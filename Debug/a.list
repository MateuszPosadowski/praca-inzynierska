
a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ccc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019f8  08007de0  08007de0  00017de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d8  080097d8  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  080097d8  080097d8  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097d8  080097d8  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  080097e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  2000021c  080099fc  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  080099fc  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff05  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025a3  00000000  00000000  0003014a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00033638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019150  00000000  00000000  00034470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb3d  00000000  00000000  0004d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091a31  00000000  00000000  0005a0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebb2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af8  00000000  00000000  000ebbac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000021c 	.word	0x2000021c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dc4 	.word	0x08007dc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000220 	.word	0x20000220
 800014c:	08007dc4 	.word	0x08007dc4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <sizeofuser>:
int MinutesAdd=0;
int HoursAlarm=0;
int MinutesAlarm=0;

int sizeofuser (userDetails *user)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	int size=0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
	while (user[size].firstname[0] != '\0') size++;
 8001004:	e002      	b.n	800100c <sizeofuser+0x14>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4613      	mov	r3, r2
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <sizeofuser+0xe>
	return size+1;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <ESP_Init>:
		{  background-color: #dddddd;}</style><table><tr><th>Time</th><th>Date</th></tr>";

/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD, char *STAIP)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b098      	sub	sp, #96	; 0x60
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	char data[80];

	Ringbuf_init();
 800103c:	f000 fd9e 	bl	8001b7c <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8001040:	4832      	ldr	r0, [pc, #200]	; (800110c <ESP_Init+0xdc>)
 8001042:	f000 fe9d 	bl	8001d80 <Uart_sendstring>
	HAL_Delay(2000);
 8001046:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800104a:	f001 ff95 	bl	8002f78 <HAL_Delay>

	/********* AT **********/
	//TEST
	Uart_flush();
 800104e:	f000 ff4b 	bl	8001ee8 <Uart_flush>
	Uart_sendstring("AT\r\n");
 8001052:	482f      	ldr	r0, [pc, #188]	; (8001110 <ESP_Init+0xe0>)
 8001054:	f000 fe94 	bl	8001d80 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8001058:	bf00      	nop
 800105a:	482e      	ldr	r0, [pc, #184]	; (8001114 <ESP_Init+0xe4>)
 800105c:	f001 f810 	bl	8002080 <Wait_for>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <ESP_Init+0x2a>


	/********* AT+CWMODE=1 **********/
	//Tryb Wi-Fi 1->Stacja, 2->AP
	Uart_flush();
 8001066:	f000 ff3f 	bl	8001ee8 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n");
 800106a:	482b      	ldr	r0, [pc, #172]	; (8001118 <ESP_Init+0xe8>)
 800106c:	f000 fe88 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8001070:	bf00      	nop
 8001072:	4828      	ldr	r0, [pc, #160]	; (8001114 <ESP_Init+0xe4>)
 8001074:	f001 f804 	bl	8002080 <Wait_for>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <ESP_Init+0x42>

	/* Set Static IP Address */
	/********* AT+CWSTAIP=IPADDRESS **********/
	Uart_flush();
 800107e:	f000 ff33 	bl	8001ee8 <Uart_flush>
	sprintf (data, "AT+CIPSTA=\"%s\"\r\n", STAIP);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4924      	ldr	r1, [pc, #144]	; (800111c <ESP_Init+0xec>)
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fa08 	bl	80064a0 <siprintf>
	Uart_sendstring(data);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fe73 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800109a:	bf00      	nop
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <ESP_Init+0xe4>)
 800109e:	f000 ffef 	bl	8002080 <Wait_for>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f9      	beq.n	800109c <ESP_Init+0x6c>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush();
 80010a8:	f000 ff1e 	bl	8001ee8 <Uart_flush>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80010ac:	f107 0010 	add.w	r0, r7, #16
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	491a      	ldr	r1, [pc, #104]	; (8001120 <ESP_Init+0xf0>)
 80010b6:	f005 f9f3 	bl	80064a0 <siprintf>
	Uart_sendstring(data);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fe5e 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80010c4:	bf00      	nop
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <ESP_Init+0xe4>)
 80010c8:	f000 ffda 	bl	8002080 <Wait_for>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f9      	beq.n	80010c6 <ESP_Init+0x96>

	/********* AT+CIPMUX **********/
	Uart_flush();
 80010d2:	f000 ff09 	bl	8001ee8 <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n");
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <ESP_Init+0xf4>)
 80010d8:	f000 fe52 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80010dc:	bf00      	nop
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <ESP_Init+0xe4>)
 80010e0:	f000 ffce 	bl	8002080 <Wait_for>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f9      	beq.n	80010de <ESP_Init+0xae>

	/********* AT+CIPSERVER **********/
	Uart_flush();
 80010ea:	f000 fefd 	bl	8001ee8 <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n");
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <ESP_Init+0xf8>)
 80010f0:	f000 fe46 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80010f4:	bf00      	nop
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <ESP_Init+0xe4>)
 80010f8:	f000 ffc2 	bl	8002080 <Wait_for>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f9      	beq.n	80010f6 <ESP_Init+0xc6>

}
 8001102:	bf00      	nop
 8001104:	3760      	adds	r7, #96	; 0x60
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	080092f4 	.word	0x080092f4
 8001110:	08009300 	.word	0x08009300
 8001114:	08009308 	.word	0x08009308
 8001118:	08009310 	.word	0x08009310
 800111c:	08009320 	.word	0x08009320
 8001120:	08009334 	.word	0x08009334
 8001124:	0800934c 	.word	0x0800934c
 8001128:	0800935c 	.word	0x0800935c

0800112c <Server_Send>:


int Server_Send (char *str, int Link_ID)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b098      	sub	sp, #96	; 0x60
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f814 	bl	8000164 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	Uart_flush();
 8001140:	f000 fed2 	bl	8001ee8 <Uart_flush>
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8001144:	f107 000c 	add.w	r0, r7, #12
 8001148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4919      	ldr	r1, [pc, #100]	; (80011b4 <Server_Send+0x88>)
 800114e:	f005 f9a7 	bl	80064a0 <siprintf>
	Uart_sendstring(data);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fe12 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for(">")));
 800115c:	bf00      	nop
 800115e:	4816      	ldr	r0, [pc, #88]	; (80011b8 <Server_Send+0x8c>)
 8001160:	f000 ff8e 	bl	8002080 <Wait_for>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f9      	beq.n	800115e <Server_Send+0x32>
	Uart_sendstring (str);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fe08 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for("SEND OK")));
 8001170:	bf00      	nop
 8001172:	4812      	ldr	r0, [pc, #72]	; (80011bc <Server_Send+0x90>)
 8001174:	f000 ff84 	bl	8002080 <Wait_for>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f9      	beq.n	8001172 <Server_Send+0x46>
	Uart_flush();
 800117e:	f000 feb3 	bl	8001ee8 <Uart_flush>
	sprintf (data, "AT+CIPCLOSE=%d\r\n",Link_ID);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	490d      	ldr	r1, [pc, #52]	; (80011c0 <Server_Send+0x94>)
 800118a:	4618      	mov	r0, r3
 800118c:	f005 f988 	bl	80064a0 <siprintf>
	Uart_sendstring(data);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fdf3 	bl	8001d80 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800119a:	bf00      	nop
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <Server_Send+0x98>)
 800119e:	f000 ff6f 	bl	8002080 <Wait_for>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f9      	beq.n	800119c <Server_Send+0x70>
	return 1;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3760      	adds	r7, #96	; 0x60
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	08009370 	.word	0x08009370
 80011b8:	08009384 	.word	0x08009384
 80011bc:	08009388 	.word	0x08009388
 80011c0:	08009390 	.word	0x08009390
 80011c4:	08009308 	.word	0x08009308

080011c8 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	f5ad 5dc1 	sub.w	sp, sp, #6176	; 0x1820
 80011ce:	b087      	sub	sp, #28
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	3b0c      	subs	r3, #12
 80011d8:	6018      	str	r0, [r3, #0]
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	3b10      	subs	r3, #16
 80011e0:	6019      	str	r1, [r3, #0]
	char datatosend[4096] = {0};
 80011e2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80011e6:	3b04      	subs	r3, #4
 80011e8:	4618      	mov	r0, r3
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	461a      	mov	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f004 fcfd 	bl	8005bf0 <memset>
	if (!(strcmp (str, "/page1")))
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	3b0c      	subs	r3, #12
 80011fc:	49bf      	ldr	r1, [pc, #764]	; (80014fc <Server_Handle+0x334>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f7fe ffa6 	bl	8000150 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d112      	bne.n	8001230 <Server_Handle+0x68>
	{
		sprintf(datatosend, page1);
 800120a:	4bbd      	ldr	r3, [pc, #756]	; (8001500 <Server_Handle+0x338>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001212:	3b04      	subs	r3, #4
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f005 f942 	bl	80064a0 <siprintf>
		Server_Send(datatosend, Link_ID);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	3b10      	subs	r3, #16
 8001222:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001226:	3a04      	subs	r2, #4
 8001228:	6819      	ldr	r1, [r3, #0]
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff ff7e 	bl	800112c <Server_Send>
	}

	if (!(strcmp (str, "/set_time")))
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	3b0c      	subs	r3, #12
 8001236:	49b3      	ldr	r1, [pc, #716]	; (8001504 <Server_Handle+0x33c>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	f7fe ff89 	bl	8000150 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d113      	bne.n	800126c <Server_Handle+0xa4>
	{
		sprintf(datatosend, set_time);
 8001244:	4bb0      	ldr	r3, [pc, #704]	; (8001508 <Server_Handle+0x340>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800124c:	3b04      	subs	r3, #4
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f005 f925 	bl	80064a0 <siprintf>
		Server_Send(datatosend, Link_ID);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	3b10      	subs	r3, #16
 800125c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001260:	3a04      	subs	r2, #4
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	4610      	mov	r0, r2
 8001266:	f7ff ff61 	bl	800112c <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 800126a:	e2ad      	b.n	80017c8 <Server_Handle+0x600>
	else if (!(strcmp (str, "/page2")))
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	3b0c      	subs	r3, #12
 8001272:	49a6      	ldr	r1, [pc, #664]	; (800150c <Server_Handle+0x344>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f7fe ff6b 	bl	8000150 <strcmp>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	f040 809b 	bne.w	80013b8 <Server_Handle+0x1f0>
		sprintf(datatosend, page2_Top);
 8001282:	4ba3      	ldr	r3, [pc, #652]	; (8001510 <Server_Handle+0x348>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800128a:	3b04      	subs	r3, #4
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f005 f906 	bl	80064a0 <siprintf>
		strcat (datatosend, table);
 8001294:	4b9f      	ldr	r3, [pc, #636]	; (8001514 <Server_Handle+0x34c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800129c:	3b04      	subs	r3, #4
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f005 f91d 	bl	80064e0 <strcat>
		int bufsize = (sizeofuser (user));
 80012a6:	489c      	ldr	r0, [pc, #624]	; (8001518 <Server_Handle+0x350>)
 80012a8:	f7ff fea6 	bl	8000ff8 <sizeofuser>
 80012ac:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80012b0:	f103 030c 	add.w	r3, r3, #12
 80012b4:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80012bc:	f102 020c 	add.w	r2, r2, #12
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e045      	b.n	8001350 <Server_Handle+0x188>
			sprintf (localbuf, "<tr><td>%s %s</td>	<td>%s</td></tr>",user[i].firstname,user[i].lastname,user[i].age);
 80012c4:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80012c8:	f103 030c 	add.w	r3, r3, #12
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	4a8f      	ldr	r2, [pc, #572]	; (8001518 <Server_Handle+0x350>)
 80012da:	1899      	adds	r1, r3, r2
 80012dc:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80012e0:	f103 030c 	add.w	r3, r3, #12
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4613      	mov	r3, r2
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3308      	adds	r3, #8
 80012f2:	4a89      	ldr	r2, [pc, #548]	; (8001518 <Server_Handle+0x350>)
 80012f4:	4413      	add	r3, r2
 80012f6:	1ddc      	adds	r4, r3, #7
 80012f8:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80012fc:	f103 030c 	add.w	r3, r3, #12
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4613      	mov	r3, r2
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3318      	adds	r3, #24
 800130e:	4a82      	ldr	r2, [pc, #520]	; (8001518 <Server_Handle+0x350>)
 8001310:	4413      	add	r3, r2
 8001312:	3306      	adds	r3, #6
 8001314:	f107 0010 	add.w	r0, r7, #16
 8001318:	3804      	subs	r0, #4
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	460a      	mov	r2, r1
 8001320:	497e      	ldr	r1, [pc, #504]	; (800151c <Server_Handle+0x354>)
 8001322:	f005 f8bd 	bl	80064a0 <siprintf>
			strcat (datatosend, localbuf);
 8001326:	f107 0210 	add.w	r2, r7, #16
 800132a:	3a04      	subs	r2, #4
 800132c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001330:	3b04      	subs	r3, #4
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f005 f8d3 	bl	80064e0 <strcat>
		for (int i=0; i<bufsize; i++)
 800133a:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800133e:	f103 030c 	add.w	r3, r3, #12
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800134a:	f102 020c 	add.w	r2, r2, #12
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001354:	f103 030c 	add.w	r3, r3, #12
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800135e:	f103 030c 	add.w	r3, r3, #12
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbad      	blt.n	80012c4 <Server_Handle+0xfc>
		strcat (datatosend, "</table>");
 8001368:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800136c:	3b04      	subs	r3, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe fef8 	bl	8000164 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800137c:	3b04      	subs	r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	4967      	ldr	r1, [pc, #412]	; (8001520 <Server_Handle+0x358>)
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	cb03      	ldmia	r3!, {r0, r1}
 8001388:	6010      	str	r0, [r2, #0]
 800138a:	6051      	str	r1, [r2, #4]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 8001390:	4b64      	ldr	r3, [pc, #400]	; (8001524 <Server_Handle+0x35c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001398:	3b04      	subs	r3, #4
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f005 f89f 	bl	80064e0 <strcat>
		Server_Send(datatosend, Link_ID);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	3b10      	subs	r3, #16
 80013a8:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80013ac:	3a04      	subs	r2, #4
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7ff febb 	bl	800112c <Server_Send>
}
 80013b6:	e207      	b.n	80017c8 <Server_Handle+0x600>
	else if (!(strcmp (str, "/time_change")))
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	3b0c      	subs	r3, #12
 80013be:	495a      	ldr	r1, [pc, #360]	; (8001528 <Server_Handle+0x360>)
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7fe fec5 	bl	8000150 <strcmp>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d113      	bne.n	80013f4 <Server_Handle+0x22c>
		sprintf(datatosend, time_change);
 80013cc:	4b57      	ldr	r3, [pc, #348]	; (800152c <Server_Handle+0x364>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80013d4:	3b04      	subs	r3, #4
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 f861 	bl	80064a0 <siprintf>
		Server_Send(datatosend, Link_ID);
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	3b10      	subs	r3, #16
 80013e4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80013e8:	3a04      	subs	r2, #4
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	4610      	mov	r0, r2
 80013ee:	f7ff fe9d 	bl	800112c <Server_Send>
}
 80013f2:	e1e9      	b.n	80017c8 <Server_Handle+0x600>
	else if (!(strcmp (str, "/temper")))
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	3b0c      	subs	r3, #12
 80013fa:	494d      	ldr	r1, [pc, #308]	; (8001530 <Server_Handle+0x368>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	f7fe fea7 	bl	8000150 <strcmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f040 809d 	bne.w	8001544 <Server_Handle+0x37c>
		sprintf(datatosend, temperature_Top);
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <Server_Handle+0x36c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001412:	3b04      	subs	r3, #4
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f842 	bl	80064a0 <siprintf>
		strcat (datatosend, table_temp);
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <Server_Handle+0x370>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001424:	3b04      	subs	r3, #4
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f005 f859 	bl	80064e0 <strcat>
		int bufsize = (sizeofuser (user));
 800142e:	483a      	ldr	r0, [pc, #232]	; (8001518 <Server_Handle+0x350>)
 8001430:	f7ff fde2 	bl	8000ff8 <sizeofuser>
 8001434:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001438:	f103 0310 	add.w	r3, r3, #16
 800143c:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001444:	f102 0208 	add.w	r2, r2, #8
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e023      	b.n	8001494 <Server_Handle+0x2cc>
			sprintf (localbuf, "<tr><td>%f</td><td>°C</td></tr>", temper);
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <Server_Handle+0x374>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe fff3 	bl	800043c <__aeabi_f2d>
 8001456:	4603      	mov	r3, r0
 8001458:	460c      	mov	r4, r1
 800145a:	f107 0010 	add.w	r0, r7, #16
 800145e:	3804      	subs	r0, #4
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	4936      	ldr	r1, [pc, #216]	; (8001540 <Server_Handle+0x378>)
 8001466:	f005 f81b 	bl	80064a0 <siprintf>
			strcat (datatosend, localbuf);
 800146a:	f107 0210 	add.w	r2, r7, #16
 800146e:	3a04      	subs	r2, #4
 8001470:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001474:	3b04      	subs	r3, #4
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f005 f831 	bl	80064e0 <strcat>
		for (int i=0; i<bufsize; i++)
 800147e:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001482:	f103 0308 	add.w	r3, r3, #8
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800148e:	f102 0208 	add.w	r2, r2, #8
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001498:	f103 0308 	add.w	r3, r3, #8
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80014a2:	f103 0310 	add.w	r3, r3, #16
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbcf      	blt.n	800144c <Server_Handle+0x284>
		strcat (datatosend, "</table>");
 80014ac:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80014b0:	3b04      	subs	r3, #4
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe fe56 	bl	8000164 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80014c0:	3b04      	subs	r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	4916      	ldr	r1, [pc, #88]	; (8001520 <Server_Handle+0x358>)
 80014c6:	461a      	mov	r2, r3
 80014c8:	460b      	mov	r3, r1
 80014ca:	cb03      	ldmia	r3!, {r0, r1}
 80014cc:	6010      	str	r0, [r2, #0]
 80014ce:	6051      	str	r1, [r2, #4]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <Server_Handle+0x35c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80014dc:	3b04      	subs	r3, #4
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fffd 	bl	80064e0 <strcat>
		Server_Send(datatosend, Link_ID);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	3b10      	subs	r3, #16
 80014ec:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80014f0:	3a04      	subs	r2, #4
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	4610      	mov	r0, r2
 80014f6:	f7ff fe19 	bl	800112c <Server_Send>
}
 80014fa:	e165      	b.n	80017c8 <Server_Handle+0x600>
 80014fc:	080093a4 	.word	0x080093a4
 8001500:	20000008 	.word	0x20000008
 8001504:	080093ac 	.word	0x080093ac
 8001508:	20000004 	.word	0x20000004
 800150c:	080093b8 	.word	0x080093b8
 8001510:	20000018 	.word	0x20000018
 8001514:	20000030 	.word	0x20000030
 8001518:	200002f8 	.word	0x200002f8
 800151c:	080093c0 	.word	0x080093c0
 8001520:	080093e4 	.word	0x080093e4
 8001524:	2000001c 	.word	0x2000001c
 8001528:	080093f0 	.word	0x080093f0
 800152c:	2000000c 	.word	0x2000000c
 8001530:	08009400 	.word	0x08009400
 8001534:	20000024 	.word	0x20000024
 8001538:	20000034 	.word	0x20000034
 800153c:	20000654 	.word	0x20000654
 8001540:	08009408 	.word	0x08009408
	else if (!(strcmp (str, "/time")))
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	3b0c      	subs	r3, #12
 800154a:	49a2      	ldr	r1, [pc, #648]	; (80017d4 <Server_Handle+0x60c>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	f7fe fdff 	bl	8000150 <strcmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d17a      	bne.n	800164e <Server_Handle+0x486>
		sprintf(datatosend, time_Top);
 8001558:	4b9f      	ldr	r3, [pc, #636]	; (80017d8 <Server_Handle+0x610>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001560:	3b04      	subs	r3, #4
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f004 ff9b 	bl	80064a0 <siprintf>
		strcat (datatosend, table_time);
 800156a:	4b9c      	ldr	r3, [pc, #624]	; (80017dc <Server_Handle+0x614>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001572:	3b04      	subs	r3, #4
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f004 ffb2 	bl	80064e0 <strcat>
		int bufsize = (sizeofuser (user));
 800157c:	4898      	ldr	r0, [pc, #608]	; (80017e0 <Server_Handle+0x618>)
 800157e:	f7ff fd3b 	bl	8000ff8 <sizeofuser>
 8001582:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001586:	f103 0314 	add.w	r3, r3, #20
 800158a:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 800158c:	2300      	movs	r3, #0
 800158e:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001592:	f102 0204 	add.w	r2, r2, #4
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e025      	b.n	80015e6 <Server_Handle+0x41e>
			sprintf (localbuf, "<tr><td>%i : %i</td></tr>",Hours+HoursAdd,Minutes+MinutesAdd);
 800159a:	4b92      	ldr	r3, [pc, #584]	; (80017e4 <Server_Handle+0x61c>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <Server_Handle+0x620>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	18d1      	adds	r1, r2, r3
 80015a4:	4b91      	ldr	r3, [pc, #580]	; (80017ec <Server_Handle+0x624>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b91      	ldr	r3, [pc, #580]	; (80017f0 <Server_Handle+0x628>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	f107 0010 	add.w	r0, r7, #16
 80015b2:	3804      	subs	r0, #4
 80015b4:	460a      	mov	r2, r1
 80015b6:	498f      	ldr	r1, [pc, #572]	; (80017f4 <Server_Handle+0x62c>)
 80015b8:	f004 ff72 	bl	80064a0 <siprintf>
			strcat (datatosend, localbuf);
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	3a04      	subs	r2, #4
 80015c2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80015c6:	3b04      	subs	r3, #4
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 ff88 	bl	80064e0 <strcat>
		for (int i=0; i<bufsize; i++)
 80015d0:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80015d4:	f103 0304 	add.w	r3, r3, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80015e0:	f102 0204 	add.w	r2, r2, #4
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80015ea:	f103 0304 	add.w	r3, r3, #4
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80015f4:	f103 0314 	add.w	r3, r3, #20
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbcd      	blt.n	800159a <Server_Handle+0x3d2>
		strcat (datatosend, "</table>");
 80015fe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001602:	3b04      	subs	r3, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fdad 	bl	8000164 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001612:	3b04      	subs	r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	4978      	ldr	r1, [pc, #480]	; (80017f8 <Server_Handle+0x630>)
 8001618:	461a      	mov	r2, r3
 800161a:	460b      	mov	r3, r1
 800161c:	cb03      	ldmia	r3!, {r0, r1}
 800161e:	6010      	str	r0, [r2, #0]
 8001620:	6051      	str	r1, [r2, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, time_end);
 8001626:	4b75      	ldr	r3, [pc, #468]	; (80017fc <Server_Handle+0x634>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800162e:	3b04      	subs	r3, #4
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f004 ff54 	bl	80064e0 <strcat>
		Server_Send(datatosend, Link_ID);
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	3b10      	subs	r3, #16
 800163e:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001642:	3a04      	subs	r2, #4
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	4610      	mov	r0, r2
 8001648:	f7ff fd70 	bl	800112c <Server_Send>
}
 800164c:	e0bc      	b.n	80017c8 <Server_Handle+0x600>
	else if (!(strcmp (str, "/lux")))
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	3b0c      	subs	r3, #12
 8001654:	496a      	ldr	r1, [pc, #424]	; (8001800 <Server_Handle+0x638>)
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	f7fe fd7a 	bl	8000150 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d170      	bne.n	8001744 <Server_Handle+0x57c>
		sprintf(datatosend, lux_Top);
 8001662:	4b68      	ldr	r3, [pc, #416]	; (8001804 <Server_Handle+0x63c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800166a:	3b04      	subs	r3, #4
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f004 ff16 	bl	80064a0 <siprintf>
		strcat (datatosend, table_lux);
 8001674:	4b64      	ldr	r3, [pc, #400]	; (8001808 <Server_Handle+0x640>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800167c:	3b04      	subs	r3, #4
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f004 ff2d 	bl	80064e0 <strcat>
		int bufsize = (sizeofuser (user));
 8001686:	4856      	ldr	r0, [pc, #344]	; (80017e0 <Server_Handle+0x618>)
 8001688:	f7ff fcb6 	bl	8000ff8 <sizeofuser>
 800168c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001690:	f103 0318 	add.w	r3, r3, #24
 8001694:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e01f      	b.n	80016e0 <Server_Handle+0x518>
			sprintf (localbuf, "<tr><td>%f</td><td>Lux</td></tr>", Lux);
 80016a0:	4b5a      	ldr	r3, [pc, #360]	; (800180c <Server_Handle+0x644>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fec9 	bl	800043c <__aeabi_f2d>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	f107 0010 	add.w	r0, r7, #16
 80016b2:	3804      	subs	r0, #4
 80016b4:	461a      	mov	r2, r3
 80016b6:	4623      	mov	r3, r4
 80016b8:	4955      	ldr	r1, [pc, #340]	; (8001810 <Server_Handle+0x648>)
 80016ba:	f004 fef1 	bl	80064a0 <siprintf>
			strcat (datatosend, localbuf);
 80016be:	f107 0210 	add.w	r2, r7, #16
 80016c2:	3a04      	subs	r2, #4
 80016c4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80016c8:	3b04      	subs	r3, #4
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 ff07 	bl	80064e0 <strcat>
		for (int i=0; i<bufsize; i++)
 80016d2:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80016ea:	f103 0318 	add.w	r3, r3, #24
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbd5      	blt.n	80016a0 <Server_Handle+0x4d8>
		strcat (datatosend, "</table>");
 80016f4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80016f8:	3b04      	subs	r3, #4
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fd32 	bl	8000164 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001708:	3b04      	subs	r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	493a      	ldr	r1, [pc, #232]	; (80017f8 <Server_Handle+0x630>)
 800170e:	461a      	mov	r2, r3
 8001710:	460b      	mov	r3, r1
 8001712:	cb03      	ldmia	r3!, {r0, r1}
 8001714:	6010      	str	r0, [r2, #0]
 8001716:	6051      	str	r1, [r2, #4]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 800171c:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <Server_Handle+0x64c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001724:	3b04      	subs	r3, #4
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f004 fed9 	bl	80064e0 <strcat>
		Server_Send(datatosend, Link_ID);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	3b10      	subs	r3, #16
 8001734:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001738:	3a04      	subs	r2, #4
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	4610      	mov	r0, r2
 800173e:	f7ff fcf5 	bl	800112c <Server_Send>
}
 8001742:	e041      	b.n	80017c8 <Server_Handle+0x600>
	else if (!(strcmp (str, "/led")))
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	3b0c      	subs	r3, #12
 800174a:	4933      	ldr	r1, [pc, #204]	; (8001818 <Server_Handle+0x650>)
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f7fe fcff 	bl	8000150 <strcmp>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d124      	bne.n	80017a2 <Server_Handle+0x5da>
		sprintf(datatosend, led);
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <Server_Handle+0x654>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001760:	3b04      	subs	r3, #4
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fe9b 	bl	80064a0 <siprintf>
		int bufsize = (sizeofuser (user));
 800176a:	481d      	ldr	r0, [pc, #116]	; (80017e0 <Server_Handle+0x618>)
 800176c:	f7ff fc44 	bl	8000ff8 <sizeofuser>
 8001770:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001774:	f103 031c 	add.w	r3, r3, #28
 8001778:	6018      	str	r0, [r3, #0]
		strcat(datatosend, page2_end);
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <Server_Handle+0x64c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001782:	3b04      	subs	r3, #4
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f004 feaa 	bl	80064e0 <strcat>
		Server_Send(datatosend, Link_ID);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	3b10      	subs	r3, #16
 8001792:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8001796:	3a04      	subs	r2, #4
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	4610      	mov	r0, r2
 800179c:	f7ff fcc6 	bl	800112c <Server_Send>
}
 80017a0:	e012      	b.n	80017c8 <Server_Handle+0x600>
		sprintf (datatosend, home);
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <Server_Handle+0x658>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80017aa:	3b04      	subs	r3, #4
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 fe76 	bl	80064a0 <siprintf>
		Server_Send(datatosend, Link_ID);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	3b10      	subs	r3, #16
 80017ba:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80017be:	3a04      	subs	r2, #4
 80017c0:	6819      	ldr	r1, [r3, #0]
 80017c2:	4610      	mov	r0, r2
 80017c4:	f7ff fcb2 	bl	800112c <Server_Send>
}
 80017c8:	bf00      	nop
 80017ca:	f507 57c1 	add.w	r7, r7, #6176	; 0x1820
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	0800942c 	.word	0x0800942c
 80017d8:	2000002c 	.word	0x2000002c
 80017dc:	2000003c 	.word	0x2000003c
 80017e0:	200002f8 	.word	0x200002f8
 80017e4:	2000068c 	.word	0x2000068c
 80017e8:	2000023c 	.word	0x2000023c
 80017ec:	20000788 	.word	0x20000788
 80017f0:	20000240 	.word	0x20000240
 80017f4:	08009434 	.word	0x08009434
 80017f8:	080093e4 	.word	0x080093e4
 80017fc:	20000020 	.word	0x20000020
 8001800:	08009450 	.word	0x08009450
 8001804:	20000028 	.word	0x20000028
 8001808:	20000038 	.word	0x20000038
 800180c:	200002dc 	.word	0x200002dc
 8001810:	08009458 	.word	0x08009458
 8001814:	2000001c 	.word	0x2000001c
 8001818:	0800947c 	.word	0x0800947c
 800181c:	200005ac 	.word	0x200005ac
 8001820:	20000000 	.word	0x20000000

08001824 <Server_Start>:

void Server_Start (void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b0a2      	sub	sp, #136	; 0x88
 8001828:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f004 f9dc 	bl	8005bf0 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID)));
 8001838:	bf00      	nop
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	461a      	mov	r2, r3
 800183e:	2101      	movs	r1, #1
 8001840:	48ae      	ldr	r0, [pc, #696]	; (8001afc <Server_Start+0x2d8>)
 8001842:	f000 fbf1 	bl	8002028 <Get_after>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f6      	beq.n	800183a <Server_Start+0x16>

	Link_ID -= 48;
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	3b30      	subs	r3, #48	; 0x30
 8001850:	b2db      	uxtb	r3, r3
 8001852:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader)));
 8001854:	bf00      	nop
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4619      	mov	r1, r3
 800185c:	48a8      	ldr	r0, [pc, #672]	; (8001b00 <Server_Start+0x2dc>)
 800185e:	f000 fb6f 	bl	8001f40 <Copy_upto>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f6      	beq.n	8001856 <Server_Start+0x32>

	if (Look_for("/page1", buftostoreheader) == 1)
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4619      	mov	r1, r3
 800186e:	48a5      	ldr	r0, [pc, #660]	; (8001b04 <Server_Start+0x2e0>)
 8001870:	f000 f9c8 	bl	8001c04 <Look_for>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	d142      	bne.n	8001900 <Server_Start+0xdc>
	{
		GetDataFromBuffer("fname=", "&", buftostoreheader, user[usernumber].firstname);
 800187a:	4ba3      	ldr	r3, [pc, #652]	; (8001b08 <Server_Start+0x2e4>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	4aa0      	ldr	r2, [pc, #640]	; (8001b0c <Server_Start+0x2e8>)
 800188a:	4413      	add	r3, r2
 800188c:	f107 0208 	add.w	r2, r7, #8
 8001890:	499f      	ldr	r1, [pc, #636]	; (8001b10 <Server_Start+0x2ec>)
 8001892:	48a0      	ldr	r0, [pc, #640]	; (8001b14 <Server_Start+0x2f0>)
 8001894:	f000 fa88 	bl	8001da8 <GetDataFromBuffer>
		GetDataFromBuffer("lname=", "&", buftostoreheader, user[usernumber].lastname);
 8001898:	4b9b      	ldr	r3, [pc, #620]	; (8001b08 <Server_Start+0x2e4>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3308      	adds	r3, #8
 80018a8:	4a98      	ldr	r2, [pc, #608]	; (8001b0c <Server_Start+0x2e8>)
 80018aa:	4413      	add	r3, r2
 80018ac:	3307      	adds	r3, #7
 80018ae:	f107 0208 	add.w	r2, r7, #8
 80018b2:	4997      	ldr	r1, [pc, #604]	; (8001b10 <Server_Start+0x2ec>)
 80018b4:	4898      	ldr	r0, [pc, #608]	; (8001b18 <Server_Start+0x2f4>)
 80018b6:	f000 fa77 	bl	8001da8 <GetDataFromBuffer>
		GetDataFromBuffer("age=", " HTTP", buftostoreheader, user[usernumber].age);
 80018ba:	4b93      	ldr	r3, [pc, #588]	; (8001b08 <Server_Start+0x2e4>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3318      	adds	r3, #24
 80018ca:	4a90      	ldr	r2, [pc, #576]	; (8001b0c <Server_Start+0x2e8>)
 80018cc:	4413      	add	r3, r2
 80018ce:	3306      	adds	r3, #6
 80018d0:	f107 0208 	add.w	r2, r7, #8
 80018d4:	4991      	ldr	r1, [pc, #580]	; (8001b1c <Server_Start+0x2f8>)
 80018d6:	4892      	ldr	r0, [pc, #584]	; (8001b20 <Server_Start+0x2fc>)
 80018d8:	f000 fa66 	bl	8001da8 <GetDataFromBuffer>
		usernumber++;
 80018dc:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <Server_Start+0x2e4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	4a89      	ldr	r2, [pc, #548]	; (8001b08 <Server_Start+0x2e4>)
 80018e4:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 80018e6:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <Server_Start+0x2e4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b09      	cmp	r3, #9
 80018ec:	dd02      	ble.n	80018f4 <Server_Start+0xd0>
 80018ee:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <Server_Start+0x2e4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
		Server_Handle("/page1",Link_ID);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4882      	ldr	r0, [pc, #520]	; (8001b04 <Server_Start+0x2e0>)
 80018fa:	f7ff fc65 	bl	80011c8 <Server_Handle>

	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 80018fe:	e0f8      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/time_change", buftostoreheader) == 1)
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4619      	mov	r1, r3
 8001906:	4887      	ldr	r0, [pc, #540]	; (8001b24 <Server_Start+0x300>)
 8001908:	f000 f97c 	bl	8001c04 <Look_for>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	d15b      	bne.n	80019ca <Server_Start+0x1a6>
		GetDataFromBuffer("minutes=", "HTTP", buftostoreheader, user[usernumber].minutes);
 8001912:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <Server_Start+0x2e4>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3340      	adds	r3, #64	; 0x40
 8001922:	4a7a      	ldr	r2, [pc, #488]	; (8001b0c <Server_Start+0x2e8>)
 8001924:	4413      	add	r3, r2
 8001926:	3301      	adds	r3, #1
 8001928:	f107 0208 	add.w	r2, r7, #8
 800192c:	497e      	ldr	r1, [pc, #504]	; (8001b28 <Server_Start+0x304>)
 800192e:	487f      	ldr	r0, [pc, #508]	; (8001b2c <Server_Start+0x308>)
 8001930:	f000 fa3a 	bl	8001da8 <GetDataFromBuffer>
		MinutesAdd = atoi(user[usernumber].minutes) - Minutes;
 8001934:	4b74      	ldr	r3, [pc, #464]	; (8001b08 <Server_Start+0x2e4>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3340      	adds	r3, #64	; 0x40
 8001944:	4a71      	ldr	r2, [pc, #452]	; (8001b0c <Server_Start+0x2e8>)
 8001946:	4413      	add	r3, r2
 8001948:	3301      	adds	r3, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f004 f922 	bl	8005b94 <atoi>
 8001950:	4602      	mov	r2, r0
 8001952:	4b77      	ldr	r3, [pc, #476]	; (8001b30 <Server_Start+0x30c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a76      	ldr	r2, [pc, #472]	; (8001b34 <Server_Start+0x310>)
 800195a:	6013      	str	r3, [r2, #0]
		GetDataFromBuffer("hour=", " HTTP", buftostoreheader, user[usernumber].hour);
 800195c:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <Server_Start+0x2e4>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3338      	adds	r3, #56	; 0x38
 800196c:	4a67      	ldr	r2, [pc, #412]	; (8001b0c <Server_Start+0x2e8>)
 800196e:	4413      	add	r3, r2
 8001970:	3307      	adds	r3, #7
 8001972:	f107 0208 	add.w	r2, r7, #8
 8001976:	4969      	ldr	r1, [pc, #420]	; (8001b1c <Server_Start+0x2f8>)
 8001978:	486f      	ldr	r0, [pc, #444]	; (8001b38 <Server_Start+0x314>)
 800197a:	f000 fa15 	bl	8001da8 <GetDataFromBuffer>
		HoursAdd = atoi(user[usernumber].hour) - Hours;
 800197e:	4b62      	ldr	r3, [pc, #392]	; (8001b08 <Server_Start+0x2e4>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3338      	adds	r3, #56	; 0x38
 800198e:	4a5f      	ldr	r2, [pc, #380]	; (8001b0c <Server_Start+0x2e8>)
 8001990:	4413      	add	r3, r2
 8001992:	3307      	adds	r3, #7
 8001994:	4618      	mov	r0, r3
 8001996:	f004 f8fd 	bl	8005b94 <atoi>
 800199a:	4602      	mov	r2, r0
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <Server_Start+0x318>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	4a67      	ldr	r2, [pc, #412]	; (8001b40 <Server_Start+0x31c>)
 80019a4:	6013      	str	r3, [r2, #0]
		usernumber++;
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <Server_Start+0x2e4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <Server_Start+0x2e4>)
 80019ae:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <Server_Start+0x2e4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	dd02      	ble.n	80019be <Server_Start+0x19a>
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <Server_Start+0x2e4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
		Server_Handle("/time_change",Link_ID);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4858      	ldr	r0, [pc, #352]	; (8001b24 <Server_Start+0x300>)
 80019c4:	f7ff fc00 	bl	80011c8 <Server_Handle>
}
 80019c8:	e093      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/page2", buftostoreheader) == 1)
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	4619      	mov	r1, r3
 80019d0:	485c      	ldr	r0, [pc, #368]	; (8001b44 <Server_Start+0x320>)
 80019d2:	f000 f917 	bl	8001c04 <Look_for>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <Server_Start+0x1c4>
		Server_Handle("/page2",Link_ID);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4619      	mov	r1, r3
 80019e0:	4858      	ldr	r0, [pc, #352]	; (8001b44 <Server_Start+0x320>)
 80019e2:	f7ff fbf1 	bl	80011c8 <Server_Handle>
}
 80019e6:	e084      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/temper", buftostoreheader) == 1)
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	4856      	ldr	r0, [pc, #344]	; (8001b48 <Server_Start+0x324>)
 80019f0:	f000 f908 	bl	8001c04 <Look_for>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <Server_Start+0x1e2>
		Server_Handle("/temper",Link_ID);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4852      	ldr	r0, [pc, #328]	; (8001b48 <Server_Start+0x324>)
 8001a00:	f7ff fbe2 	bl	80011c8 <Server_Handle>
}
 8001a04:	e075      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/lux", buftostoreheader) == 1)
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	484f      	ldr	r0, [pc, #316]	; (8001b4c <Server_Start+0x328>)
 8001a0e:	f000 f8f9 	bl	8001c04 <Look_for>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <Server_Start+0x200>
		Server_Handle("/lux",Link_ID);
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	484b      	ldr	r0, [pc, #300]	; (8001b4c <Server_Start+0x328>)
 8001a1e:	f7ff fbd3 	bl	80011c8 <Server_Handle>
}
 8001a22:	e066      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/time", buftostoreheader) == 1)
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4849      	ldr	r0, [pc, #292]	; (8001b50 <Server_Start+0x32c>)
 8001a2c:	f000 f8ea 	bl	8001c04 <Look_for>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d105      	bne.n	8001a42 <Server_Start+0x21e>
		Server_Handle("/time",Link_ID);
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4845      	ldr	r0, [pc, #276]	; (8001b50 <Server_Start+0x32c>)
 8001a3c:	f7ff fbc4 	bl	80011c8 <Server_Handle>
}
 8001a40:	e057      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/led", buftostoreheader) == 1)
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	4619      	mov	r1, r3
 8001a48:	4842      	ldr	r0, [pc, #264]	; (8001b54 <Server_Start+0x330>)
 8001a4a:	f000 f8db 	bl	8001c04 <Look_for>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d122      	bne.n	8001a9a <Server_Start+0x276>
			if(check == 1)
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <Server_Start+0x334>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d10c      	bne.n	8001a76 <Server_Start+0x252>
				{led=led_on;
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <Server_Start+0x338>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3f      	ldr	r2, [pc, #252]	; (8001b60 <Server_Start+0x33c>)
 8001a62:	6013      	str	r3, [r2, #0]
				check = 0;
 8001a64:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <Server_Start+0x334>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	483d      	ldr	r0, [pc, #244]	; (8001b64 <Server_Start+0x340>)
 8001a70:	f002 f95f 	bl	8003d32 <HAL_GPIO_WritePin>
 8001a74:	e00b      	b.n	8001a8e <Server_Start+0x26a>
				{led=led_off;
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <Server_Start+0x344>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a39      	ldr	r2, [pc, #228]	; (8001b60 <Server_Start+0x33c>)
 8001a7c:	6013      	str	r3, [r2, #0]
				check = 1;
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <Server_Start+0x334>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2120      	movs	r1, #32
 8001a88:	4836      	ldr	r0, [pc, #216]	; (8001b64 <Server_Start+0x340>)
 8001a8a:	f002 f952 	bl	8003d32 <HAL_GPIO_WritePin>
			Server_Handle("/led",Link_ID);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4830      	ldr	r0, [pc, #192]	; (8001b54 <Server_Start+0x330>)
 8001a94:	f7ff fb98 	bl	80011c8 <Server_Handle>
}
 8001a98:	e02b      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/set_time", buftostoreheader) == 1)
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4832      	ldr	r0, [pc, #200]	; (8001b6c <Server_Start+0x348>)
 8001aa2:	f000 f8af 	bl	8001c04 <Look_for>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <Server_Start+0x294>
		Server_Handle("/set_time",Link_ID);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	482e      	ldr	r0, [pc, #184]	; (8001b6c <Server_Start+0x348>)
 8001ab2:	f7ff fb89 	bl	80011c8 <Server_Handle>
}
 8001ab6:	e01c      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/home", buftostoreheader) == 1)
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	4619      	mov	r1, r3
 8001abe:	482c      	ldr	r0, [pc, #176]	; (8001b70 <Server_Start+0x34c>)
 8001ac0:	f000 f8a0 	bl	8001c04 <Look_for>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <Server_Start+0x2b2>
		Server_Handle("/home",Link_ID);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4828      	ldr	r0, [pc, #160]	; (8001b70 <Server_Start+0x34c>)
 8001ad0:	f7ff fb7a 	bl	80011c8 <Server_Handle>
}
 8001ad4:	e00d      	b.n	8001af2 <Server_Start+0x2ce>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4619      	mov	r1, r3
 8001adc:	4825      	ldr	r0, [pc, #148]	; (8001b74 <Server_Start+0x350>)
 8001ade:	f000 f891 	bl	8001c04 <Look_for>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d004      	beq.n	8001af2 <Server_Start+0x2ce>
		Server_Handle("/ ", Link_ID);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4822      	ldr	r0, [pc, #136]	; (8001b78 <Server_Start+0x354>)
 8001aee:	f7ff fb6b 	bl	80011c8 <Server_Handle>
}
 8001af2:	bf00      	nop
 8001af4:	3788      	adds	r7, #136	; 0x88
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	08009484 	.word	0x08009484
 8001b00:	0800948c 	.word	0x0800948c
 8001b04:	080093a4 	.word	0x080093a4
 8001b08:	20000238 	.word	0x20000238
 8001b0c:	200002f8 	.word	0x200002f8
 8001b10:	08009498 	.word	0x08009498
 8001b14:	0800949c 	.word	0x0800949c
 8001b18:	080094a4 	.word	0x080094a4
 8001b1c:	080094ac 	.word	0x080094ac
 8001b20:	080094b4 	.word	0x080094b4
 8001b24:	080093f0 	.word	0x080093f0
 8001b28:	080094bc 	.word	0x080094bc
 8001b2c:	080094c4 	.word	0x080094c4
 8001b30:	20000788 	.word	0x20000788
 8001b34:	20000240 	.word	0x20000240
 8001b38:	080094d0 	.word	0x080094d0
 8001b3c:	2000068c 	.word	0x2000068c
 8001b40:	2000023c 	.word	0x2000023c
 8001b44:	080093b8 	.word	0x080093b8
 8001b48:	08009400 	.word	0x08009400
 8001b4c:	08009450 	.word	0x08009450
 8001b50:	0800942c 	.word	0x0800942c
 8001b54:	0800947c 	.word	0x0800947c
 8001b58:	200002d4 	.word	0x200002d4
 8001b5c:	20000010 	.word	0x20000010
 8001b60:	200005ac 	.word	0x200005ac
 8001b64:	40010800 	.word	0x40010800
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	080093ac 	.word	0x080093ac
 8001b70:	080094d8 	.word	0x080094d8
 8001b74:	080094e0 	.word	0x080094e0
 8001b78:	080094f0 	.word	0x080094f0

08001b7c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <Ringbuf_init+0x38>)
 8001b82:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <Ringbuf_init+0x3c>)
 8001b84:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <Ringbuf_init+0x40>)
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <Ringbuf_init+0x44>)
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <Ringbuf_init+0x48>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <Ringbuf_init+0x48>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <Ringbuf_init+0x48>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <Ringbuf_init+0x48>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	60da      	str	r2, [r3, #12]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000608 	.word	0x20000608
 8001bb8:	20000244 	.word	0x20000244
 8001bbc:	20000604 	.word	0x20000604
 8001bc0:	2000028c 	.word	0x2000028c
 8001bc4:	200005c4 	.word	0x200005c4

08001bc8 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bde:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d007      	beq.n	8001bfa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	79f9      	ldrb	r1, [r7, #7]
 8001bf2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe faa8 	bl	8000164 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8001c18:	6838      	ldr	r0, [r7, #0]
 8001c1a:	f7fe faa3 	bl	8000164 <strlen>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8001c2a:	e002      	b.n	8001c32 <Look_for+0x2e>
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	440b      	add	r3, r1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d1f2      	bne.n	8001c2c <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx])
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6839      	ldr	r1, [r7, #0]
 8001c52:	440b      	add	r3, r1
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d111      	bne.n	8001c7e <Look_for+0x7a>
	{
		while (str[so_far] == buffertolookinto[indx])
 8001c5a:	e005      	b.n	8001c68 <Look_for+0x64>
		{
			so_far++;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
			indx++;
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	3301      	adds	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
		while (str[so_far] == buffertolookinto[indx])
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	440b      	add	r3, r1
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d0ef      	beq.n	8001c5c <Look_for+0x58>
 8001c7c:	e008      	b.n	8001c90 <Look_for+0x8c>
		}
	}
	else
	{
		so_far =0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
		if (indx >= bufferlength) return -1;
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dbcf      	blt.n	8001c2a <Look_for+0x26>
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e007      	b.n	8001ca0 <Look_for+0x9c>
		goto repeat;
	}

	if (so_far == stringlength) return 1;
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d101      	bne.n	8001c9c <Look_for+0x98>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e001      	b.n	8001ca0 <Look_for+0x9c>
	else return -1;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <Uart_read>:

int Uart_read(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <Uart_read+0x48>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <Uart_read+0x48>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d102      	bne.n	8001cc4 <Uart_read+0x1c>
  {
    return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e010      	b.n	8001ce6 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <Uart_read+0x48>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <Uart_read+0x48>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <Uart_read+0x48>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <Uart_read+0x48>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000608 	.word	0x20000608

08001cf4 <Uart_write>:

void Uart_write(int c)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db21      	blt.n	8001d46 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <Uart_write+0x5c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d0e:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8001d10:	bf00      	nop
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <Uart_write+0x5c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d0f9      	beq.n	8001d12 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <Uart_write+0x5c>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <Uart_write+0x5c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	b2c9      	uxtb	r1, r1
 8001d2c:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <Uart_write+0x5c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <Uart_write+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <Uart_write+0x60>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d44:	60da      	str	r2, [r3, #12]
	}
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000604 	.word	0x20000604
 8001d54:	200005c4 	.word	0x200005c4

08001d58 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <IsDataAvailable+0x24>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <IsDataAvailable+0x24>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	20000608 	.word	0x20000608

08001d80 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001d88:	e006      	b.n	8001d98 <Uart_sendstring+0x18>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ffae 	bl	8001cf4 <Uart_write>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f4      	bne.n	8001d8a <Uart_sendstring+0xa>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <GetDataFromBuffer>:

  while(*s) Uart_write(*s++);
}

void GetDataFromBuffer (char *startString, char *endString, char *buffertocopyfrom, char *buffertocopyinto)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
	int startStringLength = strlen (startString);
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7fe f9d4 	bl	8000164 <strlen>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	623b      	str	r3, [r7, #32]
	int endStringLength   = strlen (endString);
 8001dc0:	68b8      	ldr	r0, [r7, #8]
 8001dc2:	f7fe f9cf 	bl	8000164 <strlen>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	61fb      	str	r3, [r7, #28]
	int so_far = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indx = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	int startposition = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
	int endposition = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]

repeat1:
	while (startString[so_far] != buffertocopyfrom[indx]) indx++;
 8001dda:	e002      	b.n	8001de2 <GetDataFromBuffer+0x3a>
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	3301      	adds	r3, #1
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	440b      	add	r3, r1
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d1f2      	bne.n	8001ddc <GetDataFromBuffer+0x34>
	if (startString[so_far] == buffertocopyfrom[indx])
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	440b      	add	r3, r1
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d110      	bne.n	8001e2c <GetDataFromBuffer+0x84>
	{
		while (startString[so_far] == buffertocopyfrom[indx])
 8001e0a:	e005      	b.n	8001e18 <GetDataFromBuffer+0x70>
		{
			so_far++;
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	3301      	adds	r3, #1
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	3301      	adds	r3, #1
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
		while (startString[so_far] == buffertocopyfrom[indx])
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d0ef      	beq.n	8001e0c <GetDataFromBuffer+0x64>
		}
	}

	if (so_far == startStringLength) startposition = indx;
 8001e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d104      	bne.n	8001e3e <GetDataFromBuffer+0x96>
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	61bb      	str	r3, [r7, #24]
	{
		so_far =0;
		goto repeat1;
	}

	so_far = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	e006      	b.n	8001e4c <GetDataFromBuffer+0xa4>
		so_far =0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat1;
 8001e42:	e7ca      	b.n	8001dda <GetDataFromBuffer+0x32>

repeat2:
	while (endString[so_far] != buffertocopyfrom[indx]) indx++;
 8001e44:	e002      	b.n	8001e4c <GetDataFromBuffer+0xa4>
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	3301      	adds	r3, #1
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4413      	add	r3, r2
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1f2      	bne.n	8001e46 <GetDataFromBuffer+0x9e>
	if (endString[so_far] == buffertocopyfrom[indx])
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	4413      	add	r3, r2
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d110      	bne.n	8001e96 <GetDataFromBuffer+0xee>
	{
		while (endString[so_far] == buffertocopyfrom[indx])
 8001e74:	e005      	b.n	8001e82 <GetDataFromBuffer+0xda>
		{
			so_far++;
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	3301      	adds	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	3301      	adds	r3, #1
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
		while (endString[so_far] == buffertocopyfrom[indx])
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	4413      	add	r3, r2
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	440b      	add	r3, r1
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d0ef      	beq.n	8001e76 <GetDataFromBuffer+0xce>
		}
	}

	if (so_far == endStringLength) endposition = indx-endStringLength;
 8001e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d10a      	bne.n	8001eb4 <GetDataFromBuffer+0x10c>
 8001e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
	{
		so_far =0;
		goto repeat2;
	}

	so_far = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	indx=0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i=startposition; i<endposition; i++)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	e010      	b.n	8001ed6 <GetDataFromBuffer+0x12e>
		so_far =0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat2;
 8001eb8:	e7c4      	b.n	8001e44 <GetDataFromBuffer+0x9c>
	{
		buffertocopyinto[indx] = buffertocopyfrom[i];
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	441a      	add	r2, r3
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	440b      	add	r3, r1
 8001ec6:	7812      	ldrb	r2, [r2, #0]
 8001ec8:	701a      	strb	r2, [r3, #0]
		indx++;
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	3301      	adds	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i=startposition; i<endposition; i++)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbed      	blt.n	8001eba <GetDataFromBuffer+0x112>
	}
}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	; 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <Uart_flush>:

void Uart_flush (void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <Uart_flush+0x20>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fe7b 	bl	8005bf0 <memset>
	_rx_buffer->head = 0;
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <Uart_flush+0x20>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000608 	.word	0x20000608

08001f0c <Uart_peek>:

int Uart_peek()
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <Uart_peek+0x30>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <Uart_peek+0x30>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d102      	bne.n	8001f26 <Uart_peek+0x1a>
  {
    return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	e005      	b.n	8001f32 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <Uart_peek+0x30>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <Uart_peek+0x30>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000608 	.word	0x20000608

08001f40 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe f908 	bl	8000164 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8001f5c:	bf00      	nop
 8001f5e:	f7ff fefb 	bl	8001d58 <IsDataAvailable>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0fa      	beq.n	8001f5e <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8001f68:	e01b      	b.n	8001fa2 <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <Copy_upto+0xe4>)
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <Copy_upto+0xe4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6838      	ldr	r0, [r7, #0]
 8001f78:	4403      	add	r3, r0
 8001f7a:	5c8a      	ldrb	r2, [r1, r2]
 8001f7c:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001f7e:	4b29      	ldr	r3, [pc, #164]	; (8002024 <Copy_upto+0xe4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <Copy_upto+0xe4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	3301      	adds	r3, #1
 8001f94:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001f96:	bf00      	nop
 8001f98:	f7ff fede 	bl	8001d58 <IsDataAvailable>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0fa      	beq.n	8001f98 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 8001fa2:	f7ff ffb3 	bl	8001f0c <Uart_peek>
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4299      	cmp	r1, r3
 8001fb2:	d1da      	bne.n	8001f6a <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8001fb4:	e019      	b.n	8001fea <Copy_upto+0xaa>
	{
		so_far++;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001fbc:	f7ff fe74 	bl	8001ca8 <Uart_read>
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	613a      	str	r2, [r7, #16]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d101      	bne.n	8001fde <Copy_upto+0x9e>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e01d      	b.n	800201a <Copy_upto+0xda>
		while (!IsDataAvailable());
 8001fde:	bf00      	nop
 8001fe0:	f7ff feba 	bl	8001d58 <IsDataAvailable>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0fa      	beq.n	8001fe0 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 8001fea:	f7ff ff8f 	bl	8001f0c <Uart_peek>
 8001fee:	4601      	mov	r1, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4299      	cmp	r1, r3
 8001ffa:	d0dc      	beq.n	8001fb6 <Copy_upto+0x76>
	}

	if (so_far != len)
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d002      	beq.n	800200a <Copy_upto+0xca>
	{
		so_far = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
		goto again;
 8002008:	e7a8      	b.n	8001f5c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	429a      	cmp	r2, r3
 8002010:	d101      	bne.n	8002016 <Copy_upto+0xd6>
 8002012:	2301      	movs	r3, #1
 8002014:	e001      	b.n	800201a <Copy_upto+0xda>
	else return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000608 	.word	0x20000608

08002028 <Get_after>:

int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	460b      	mov	r3, r1
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string) != 1);
 8002036:	bf00      	nop
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f821 	bl	8002080 <Wait_for>
 800203e:	4603      	mov	r3, r0
 8002040:	2b01      	cmp	r3, #1
 8002042:	d1f9      	bne.n	8002038 <Get_after+0x10>
	for (int indx=0; indx<numberofchars; indx++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e010      	b.n	800206c <Get_after+0x44>
	{
		while (!(IsDataAvailable()));
 800204a:	bf00      	nop
 800204c:	f7ff fe84 	bl	8001d58 <IsDataAvailable>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0fa      	beq.n	800204c <Get_after+0x24>
		buffertosave[indx] = Uart_read();
 8002056:	f7ff fe27 	bl	8001ca8 <Uart_read>
 800205a:	4601      	mov	r1, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbea      	blt.n	800204a <Get_after+0x22>
	}
	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <Wait_for>:


int Wait_for (char *string)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7fe f869 	bl	8000164 <strlen>
 8002092:	4603      	mov	r3, r0
 8002094:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8002096:	bf00      	nop
 8002098:	f7ff fe5e 	bl	8001d58 <IsDataAvailable>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0fa      	beq.n	8002098 <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80020a2:	e008      	b.n	80020b6 <Wait_for+0x36>
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <Wait_for+0xa4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <Wait_for+0xa4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
 80020b6:	f7ff ff29 	bl	8001f0c <Uart_peek>
 80020ba:	4601      	mov	r1, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4299      	cmp	r1, r3
 80020c6:	d1ed      	bne.n	80020a4 <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 80020c8:	e010      	b.n	80020ec <Wait_for+0x6c>
	{
		so_far++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3301      	adds	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80020d0:	f7ff fdea 	bl	8001ca8 <Uart_read>
		if (so_far == len) return 1;
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d101      	bne.n	80020e0 <Wait_for+0x60>
 80020dc:	2301      	movs	r3, #1
 80020de:	e01d      	b.n	800211c <Wait_for+0x9c>
		while (!IsDataAvailable());
 80020e0:	bf00      	nop
 80020e2:	f7ff fe39 	bl	8001d58 <IsDataAvailable>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0fa      	beq.n	80020e2 <Wait_for+0x62>
	while (Uart_peek() == string [so_far])
 80020ec:	f7ff ff0e 	bl	8001f0c <Uart_peek>
 80020f0:	4601      	mov	r1, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4299      	cmp	r1, r3
 80020fc:	d0e5      	beq.n	80020ca <Wait_for+0x4a>
	}

	if (so_far != len)
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	d002      	beq.n	800210c <Wait_for+0x8c>
	{
		so_far = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
		goto again;
 800210a:	e7c4      	b.n	8002096 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d101      	bne.n	8002118 <Wait_for+0x98>
 8002114:	2301      	movs	r3, #1
 8002116:	e001      	b.n	800211c <Wait_for+0x9c>
	else return -1;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000608 	.word	0x20000608

08002128 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d013      	beq.n	8002172 <Uart_isr+0x4a>
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002162:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <Uart_isr+0xac>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fd2c 	bl	8001bc8 <store_char>
        return;
 8002170:	e02c      	b.n	80021cc <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d027      	beq.n	80021cc <Uart_isr+0xa4>
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b00      	cmp	r3, #0
 8002184:	d022      	beq.n	80021cc <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <Uart_isr+0xb0>)
 8002188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <Uart_isr+0xb0>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	429a      	cmp	r2, r3
 8002190:	d108      	bne.n	80021a4 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80021a2:	e013      	b.n	80021cc <Uart_isr+0xa4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <Uart_isr+0xb0>)
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <Uart_isr+0xb0>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <Uart_isr+0xb0>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	3301      	adds	r3, #1
 80021b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <Uart_isr+0xb0>)
 80021ba:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	7bba      	ldrb	r2, [r7, #14]
 80021c8:	605a      	str	r2, [r3, #4]
    	return;
 80021ca:	bf00      	nop
    }
}
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000608 	.word	0x20000608
 80021d8:	2000028c 	.word	0x2000028c

080021dc <get_time>:
	  gAlarm.AlarmTime.Hours   = HoursAlarm;;
	  gAlarm.AlarmTime.Minutes = MinutesAlarm;;
}
*/
void get_time(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80021e2:	463b      	mov	r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	4619      	mov	r1, r3
 80021e8:	481e      	ldr	r0, [pc, #120]	; (8002264 <get_time+0x88>)
 80021ea:	f002 fca5 	bl	8004b38 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	4619      	mov	r1, r3
 80021f4:	481b      	ldr	r0, [pc, #108]	; (8002264 <get_time+0x88>)
 80021f6:	f002 fe2d 	bl	8004e54 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80021fa:	783b      	ldrb	r3, [r7, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	787b      	ldrb	r3, [r7, #1]
 8002200:	4619      	mov	r1, r3
 8002202:	78bb      	ldrb	r3, [r7, #2]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	460b      	mov	r3, r1
 8002208:	4917      	ldr	r1, [pc, #92]	; (8002268 <get_time+0x8c>)
 800220a:	4818      	ldr	r0, [pc, #96]	; (800226c <get_time+0x90>)
 800220c:	f004 f948 	bl	80064a0 <siprintf>
  Hours = gTime.Hours;
 8002210:	783b      	ldrb	r3, [r7, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <get_time+0x94>)
 8002216:	601a      	str	r2, [r3, #0]
  Minutes = gTime.Minutes;
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	461a      	mov	r2, r3
 800221c:	4b15      	ldr	r3, [pc, #84]	; (8002274 <get_time+0x98>)
 800221e:	601a      	str	r2, [r3, #0]
  Seconds = gTime.Seconds;
 8002220:	78bb      	ldrb	r3, [r7, #2]
 8002222:	461a      	mov	r2, r3
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <get_time+0x9c>)
 8002226:	601a      	str	r2, [r3, #0]
  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	461a      	mov	r2, r3
 800222c:	797b      	ldrb	r3, [r7, #5]
 800222e:	4619      	mov	r1, r3
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	460b      	mov	r3, r1
 800223a:	4910      	ldr	r1, [pc, #64]	; (800227c <get_time+0xa0>)
 800223c:	4810      	ldr	r0, [pc, #64]	; (8002280 <get_time+0xa4>)
 800223e:	f004 f92f 	bl	80064a0 <siprintf>
  Date = gDate.Date;
 8002242:	79bb      	ldrb	r3, [r7, #6]
 8002244:	461a      	mov	r2, r3
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <get_time+0xa8>)
 8002248:	601a      	str	r2, [r3, #0]
  Month = gDate.Month;
 800224a:	797b      	ldrb	r3, [r7, #5]
 800224c:	461a      	mov	r2, r3
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <get_time+0xac>)
 8002250:	601a      	str	r2, [r3, #0]
  Year = 2000 + gDate.Year;
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002258:	4a0c      	ldr	r2, [pc, #48]	; (800228c <get_time+0xb0>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200006cc 	.word	0x200006cc
 8002268:	080094f4 	.word	0x080094f4
 800226c:	200006e4 	.word	0x200006e4
 8002270:	2000068c 	.word	0x2000068c
 8002274:	20000788 	.word	0x20000788
 8002278:	2000078c 	.word	0x2000078c
 800227c:	08009504 	.word	0x08009504
 8002280:	20000700 	.word	0x20000700
 8002284:	20000694 	.word	0x20000694
 8002288:	200006f4 	.word	0x200006f4
 800228c:	200006f0 	.word	0x200006f0

08002290 <ADC_Get_Value>:



uint16_t ADC_Get_Value (void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	uint16_t val = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc2);
 800229a:	480a      	ldr	r0, [pc, #40]	; (80022c4 <ADC_Get_Value+0x34>)
 800229c:	f000 ff66 	bl	800316c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80022a0:	2164      	movs	r1, #100	; 0x64
 80022a2:	4808      	ldr	r0, [pc, #32]	; (80022c4 <ADC_Get_Value+0x34>)
 80022a4:	f001 f83c 	bl	8003320 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc2);
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <ADC_Get_Value+0x34>)
 80022aa:	f001 f933 	bl	8003514 <HAL_ADC_GetValue>
 80022ae:	4603      	mov	r3, r0
 80022b0:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 80022b2:	4804      	ldr	r0, [pc, #16]	; (80022c4 <ADC_Get_Value+0x34>)
 80022b4:	f001 f808 	bl	80032c8 <HAL_ADC_Stop>
	return val;
 80022b8:	88fb      	ldrh	r3, [r7, #6]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000658 	.word	0x20000658

080022c8 <delay>:
uint16_t ADC_Value = 0;
uint8_t count = 0;

uint16_t Value_Buf [4];
void delay (uint16_t time)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <delay+0x2c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim4))<time);
 80022da:	bf00      	nop
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <delay+0x2c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3f9      	bcc.n	80022dc <delay+0x14>
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2000060c 	.word	0x2000060c

080022f8 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	2301      	movs	r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2302      	movs	r3, #2
 800231c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 fb93 	bl	8003a50 <HAL_GPIO_Init>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	2301      	movs	r3, #1
 8002356:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f001 fb76 	bl	8003a50 <HAL_GPIO_Init>
}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <DS18B20_Start>:

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start (void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8002376:	2102      	movs	r1, #2
 8002378:	4813      	ldr	r0, [pc, #76]	; (80023c8 <DS18B20_Start+0x5c>)
 800237a:	f7ff ffbd 	bl	80022f8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	4811      	ldr	r0, [pc, #68]	; (80023c8 <DS18B20_Start+0x5c>)
 8002384:	f001 fcd5 	bl	8003d32 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8002388:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800238c:	f7ff ff9c 	bl	80022c8 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8002390:	2102      	movs	r1, #2
 8002392:	480d      	ldr	r0, [pc, #52]	; (80023c8 <DS18B20_Start+0x5c>)
 8002394:	f7ff ffcd 	bl	8002332 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8002398:	2050      	movs	r0, #80	; 0x50
 800239a:	f7ff ff95 	bl	80022c8 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800239e:	2102      	movs	r1, #2
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <DS18B20_Start+0x5c>)
 80023a2:	f001 fcaf 	bl	8003d04 <HAL_GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <DS18B20_Start+0x46>
 80023ac:	2301      	movs	r3, #1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	e001      	b.n	80023b6 <DS18B20_Start+0x4a>
	else Response = -1;
 80023b2:	23ff      	movs	r3, #255	; 0xff
 80023b4:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 80023b6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80023ba:	f7ff ff85 	bl	80022c8 <delay>

	return Response;
 80023be:	79fb      	ldrb	r3, [r7, #7]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40010800 	.word	0x40010800

080023cc <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80023d6:	2102      	movs	r1, #2
 80023d8:	481d      	ldr	r0, [pc, #116]	; (8002450 <DS18B20_Write+0x84>)
 80023da:	f7ff ff8d 	bl	80022f8 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e02e      	b.n	8002442 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	fa42 f303 	asr.w	r3, r2, r3
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80023f4:	2102      	movs	r1, #2
 80023f6:	4816      	ldr	r0, [pc, #88]	; (8002450 <DS18B20_Write+0x84>)
 80023f8:	f7ff ff7e 	bl	80022f8 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80023fc:	2200      	movs	r2, #0
 80023fe:	2102      	movs	r1, #2
 8002400:	4813      	ldr	r0, [pc, #76]	; (8002450 <DS18B20_Write+0x84>)
 8002402:	f001 fc96 	bl	8003d32 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff ff5e 	bl	80022c8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800240c:	2102      	movs	r1, #2
 800240e:	4810      	ldr	r0, [pc, #64]	; (8002450 <DS18B20_Write+0x84>)
 8002410:	f7ff ff8f 	bl	8002332 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8002414:	2032      	movs	r0, #50	; 0x32
 8002416:	f7ff ff57 	bl	80022c8 <delay>
 800241a:	e00f      	b.n	800243c <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800241c:	2102      	movs	r1, #2
 800241e:	480c      	ldr	r0, [pc, #48]	; (8002450 <DS18B20_Write+0x84>)
 8002420:	f7ff ff6a 	bl	80022f8 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002424:	2200      	movs	r2, #0
 8002426:	2102      	movs	r1, #2
 8002428:	4809      	ldr	r0, [pc, #36]	; (8002450 <DS18B20_Write+0x84>)
 800242a:	f001 fc82 	bl	8003d32 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 800242e:	2032      	movs	r0, #50	; 0x32
 8002430:	f7ff ff4a 	bl	80022c8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8002434:	2102      	movs	r1, #2
 8002436:	4806      	ldr	r0, [pc, #24]	; (8002450 <DS18B20_Write+0x84>)
 8002438:	f7ff ff7b 	bl	8002332 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3301      	adds	r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b07      	cmp	r3, #7
 8002446:	ddcd      	ble.n	80023e4 <DS18B20_Write+0x18>
		}
	}
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40010800 	.word	0x40010800

08002454 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800245e:	2102      	movs	r1, #2
 8002460:	481a      	ldr	r0, [pc, #104]	; (80024cc <DS18B20_Read+0x78>)
 8002462:	f7ff ff66 	bl	8002332 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	e026      	b.n	80024ba <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 800246c:	2102      	movs	r1, #2
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <DS18B20_Read+0x78>)
 8002470:	f7ff ff42 	bl	80022f8 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8002474:	2200      	movs	r2, #0
 8002476:	2102      	movs	r1, #2
 8002478:	4814      	ldr	r0, [pc, #80]	; (80024cc <DS18B20_Read+0x78>)
 800247a:	f001 fc5a 	bl	8003d32 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 800247e:	2001      	movs	r0, #1
 8002480:	f7ff ff22 	bl	80022c8 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8002484:	2102      	movs	r1, #2
 8002486:	4811      	ldr	r0, [pc, #68]	; (80024cc <DS18B20_Read+0x78>)
 8002488:	f7ff ff53 	bl	8002332 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 800248c:	2102      	movs	r1, #2
 800248e:	480f      	ldr	r0, [pc, #60]	; (80024cc <DS18B20_Read+0x78>)
 8002490:	f001 fc38 	bl	8003d04 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800249a:	2201      	movs	r2, #1
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	b25a      	sxtb	r2, r3
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 80024ae:	2032      	movs	r0, #50	; 0x32
 80024b0:	f7ff ff0a 	bl	80022c8 <delay>
	for (int i=0;i<8;i++)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b07      	cmp	r3, #7
 80024be:	ddd5      	ble.n	800246c <DS18B20_Read+0x18>
	}
	return value;
 80024c0:	79fb      	ldrb	r3, [r7, #7]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40010800 	.word	0x40010800

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	b598      	push	{r3, r4, r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d4:	f000 fcee 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d8:	f000 f8dc 	bl	8002694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024dc:	f000 fa7a 	bl	80029d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80024e0:	f000 fa4e 	bl	8002980 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80024e4:	f000 f9fc 	bl	80028e0 <MX_TIM4_Init>
  MX_RTC_Init();
 80024e8:	f000 f9b0 	bl	800284c <MX_RTC_Init>
  MX_ADC1_Init();
 80024ec:	f000 f932 	bl	8002754 <MX_ADC1_Init>
  MX_ADC2_Init();
 80024f0:	f000 f96e 	bl	80027d0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 80024f4:	4856      	ldr	r0, [pc, #344]	; (8002650 <main+0x180>)
 80024f6:	f003 f823 	bl	8005540 <HAL_TIM_Base_Start>
  ESP_Init("Redmi","a1234567","192.168.43.84");
 80024fa:	4a56      	ldr	r2, [pc, #344]	; (8002654 <main+0x184>)
 80024fc:	4956      	ldr	r1, [pc, #344]	; (8002658 <main+0x188>)
 80024fe:	4857      	ldr	r0, [pc, #348]	; (800265c <main+0x18c>)
 8002500:	f7fe fd96 	bl	8001030 <ESP_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	  get_time();
 8002504:	f7ff fe6a 	bl	80021dc <get_time>
	  	  HAL_Delay(500);
 8002508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800250c:	f000 fd34 	bl	8002f78 <HAL_Delay>




	  Presence = DS18B20_Start ();
 8002510:	f7ff ff2c 	bl	800236c <DS18B20_Start>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	4b51      	ldr	r3, [pc, #324]	; (8002660 <main+0x190>)
 800251a:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay (1);
 800251c:	2001      	movs	r0, #1
 800251e:	f000 fd2b 	bl	8002f78 <HAL_Delay>
	  	  DS18B20_Write (0xCC);  // skip ROM
 8002522:	20cc      	movs	r0, #204	; 0xcc
 8002524:	f7ff ff52 	bl	80023cc <DS18B20_Write>
	  	  DS18B20_Write (0x44);  // convert t
 8002528:	2044      	movs	r0, #68	; 0x44
 800252a:	f7ff ff4f 	bl	80023cc <DS18B20_Write>
	  	  HAL_Delay (800);
 800252e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002532:	f000 fd21 	bl	8002f78 <HAL_Delay>

	  	  Presence = DS18B20_Start ();
 8002536:	f7ff ff19 	bl	800236c <DS18B20_Start>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	4b48      	ldr	r3, [pc, #288]	; (8002660 <main+0x190>)
 8002540:	701a      	strb	r2, [r3, #0]
	        HAL_Delay(1);
 8002542:	2001      	movs	r0, #1
 8002544:	f000 fd18 	bl	8002f78 <HAL_Delay>
	        DS18B20_Write (0xCC);  // skip ROM
 8002548:	20cc      	movs	r0, #204	; 0xcc
 800254a:	f7ff ff3f 	bl	80023cc <DS18B20_Write>
	        DS18B20_Write (0xBE);  // Read Scratch-pad
 800254e:	20be      	movs	r0, #190	; 0xbe
 8002550:	f7ff ff3c 	bl	80023cc <DS18B20_Write>

	        Temp_byte1 = DS18B20_Read();
 8002554:	f7ff ff7e 	bl	8002454 <DS18B20_Read>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	4b41      	ldr	r3, [pc, #260]	; (8002664 <main+0x194>)
 800255e:	701a      	strb	r2, [r3, #0]
	  	  Temp_byte2 = DS18B20_Read();
 8002560:	f7ff ff78 	bl	8002454 <DS18B20_Read>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <main+0x198>)
 800256a:	701a      	strb	r2, [r3, #0]
	  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 800256c:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <main+0x198>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	b21a      	sxth	r2, r3
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <main+0x194>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b21b      	sxth	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b21b      	sxth	r3, r3
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b3a      	ldr	r3, [pc, #232]	; (800266c <main+0x19c>)
 8002582:	801a      	strh	r2, [r3, #0]
	  	  Temperature = (float)TEMP/16;
 8002584:	4b39      	ldr	r3, [pc, #228]	; (800266c <main+0x19c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fb8d 	bl	8000ca8 <__aeabi_ui2f>
 800258e:	4603      	mov	r3, r0
 8002590:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fc93 	bl	8000ec0 <__aeabi_fdiv>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <main+0x1a0>)
 80025a0:	601a      	str	r2, [r3, #0]
	  	  temper = Temperature;
 80025a2:	4b33      	ldr	r3, [pc, #204]	; (8002670 <main+0x1a0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a33      	ldr	r2, [pc, #204]	; (8002674 <main+0x1a4>)
 80025a8:	6013      	str	r3, [r2, #0]
	  	  HAL_Delay(1000);
 80025aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ae:	f000 fce3 	bl	8002f78 <HAL_Delay>


		  ADC_Value = ADC_Get_Value();
 80025b2:	f7ff fe6d 	bl	8002290 <ADC_Get_Value>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <main+0x1a8>)
 80025bc:	801a      	strh	r2, [r3, #0]
		  Lux = ((float) ADC_Value * 5.0 / 1023) * 200;
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <main+0x1a8>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb70 	bl	8000ca8 <__aeabi_ui2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff36 	bl	800043c <__aeabi_f2d>
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <main+0x1ac>)
 80025d6:	f7fd ff89 	bl	80004ec <__aeabi_dmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	460c      	mov	r4, r1
 80025de:	4618      	mov	r0, r3
 80025e0:	4621      	mov	r1, r4
 80025e2:	a319      	add	r3, pc, #100	; (adr r3, 8002648 <main+0x178>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fe f8aa 	bl	8000740 <__aeabi_ddiv>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	4618      	mov	r0, r3
 80025f2:	4621      	mov	r1, r4
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <main+0x1b0>)
 80025fa:	f7fd ff77 	bl	80004ec <__aeabi_dmul>
 80025fe:	4603      	mov	r3, r0
 8002600:	460c      	mov	r4, r1
 8002602:	4618      	mov	r0, r3
 8002604:	4621      	mov	r1, r4
 8002606:	f7fe fa49 	bl	8000a9c <__aeabi_d2f>
 800260a:	4602      	mov	r2, r0
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <main+0x1b4>)
 800260e:	601a      	str	r2, [r3, #0]

	  	  while (start=0)
 8002610:	e010      	b.n	8002634 <main+0x164>
	  	  {
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {check = 1;}
 8002612:	2120      	movs	r1, #32
 8002614:	481c      	ldr	r0, [pc, #112]	; (8002688 <main+0x1b8>)
 8002616:	f001 fb75 	bl	8003d04 <HAL_GPIO_ReadPin>
 800261a:	4603      	mov	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d103      	bne.n	8002628 <main+0x158>
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <main+0x1bc>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e002      	b.n	800262e <main+0x15e>
	  	  else {check = 0;}
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <main+0x1bc>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
	  	  start = 1;
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <main+0x1c0>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]
	  	  while (start=0)
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <main+0x1c0>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <main+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e7      	bne.n	8002612 <main+0x142>
	  	  }

	  	  //if ( buzz != 0) alarm();

		  Server_Start();
 8002642:	f7ff f8ef 	bl	8001824 <Server_Start>
	  	  get_time();
 8002646:	e75d      	b.n	8002504 <main+0x34>
 8002648:	00000000 	.word	0x00000000
 800264c:	408ff800 	.word	0x408ff800
 8002650:	2000060c 	.word	0x2000060c
 8002654:	08009514 	.word	0x08009514
 8002658:	08009524 	.word	0x08009524
 800265c:	08009530 	.word	0x08009530
 8002660:	200002e8 	.word	0x200002e8
 8002664:	200006c8 	.word	0x200006c8
 8002668:	20000790 	.word	0x20000790
 800266c:	20000692 	.word	0x20000692
 8002670:	200002e4 	.word	0x200002e4
 8002674:	20000654 	.word	0x20000654
 8002678:	200002e0 	.word	0x200002e0
 800267c:	40140000 	.word	0x40140000
 8002680:	40690000 	.word	0x40690000
 8002684:	200002dc 	.word	0x200002dc
 8002688:	40010800 	.word	0x40010800
 800268c:	200002d4 	.word	0x200002d4
 8002690:	200002d8 	.word	0x200002d8

08002694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b094      	sub	sp, #80	; 0x50
 8002698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269e:	2228      	movs	r2, #40	; 0x28
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 faa4 	bl	8005bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80026c4:	2309      	movs	r3, #9
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d2:	2301      	movs	r3, #1
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026d6:	2301      	movs	r3, #1
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026da:	2302      	movs	r3, #2
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fb66 	bl	8003dc0 <HAL_RCC_OscConfig>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80026fa:	f000 f9e3 	bl	8002ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026fe:	230f      	movs	r3, #15
 8002700:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800270a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	2102      	movs	r1, #2
 800271a:	4618      	mov	r0, r3
 800271c:	f001 fdd0 	bl	80042c0 <HAL_RCC_ClockConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002726:	f000 f9cd 	bl	8002ac4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800272a:	2303      	movs	r3, #3
 800272c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800272e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002732:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002738:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	4618      	mov	r0, r3
 800273e:	f001 ff5b 	bl	80045f8 <HAL_RCCEx_PeriphCLKConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002748:	f000 f9bc 	bl	8002ac4 <Error_Handler>
  }
}
 800274c:	bf00      	nop
 800274e:	3750      	adds	r7, #80	; 0x50
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_ADC1_Init+0x74>)
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <MX_ADC1_Init+0x78>)
 8002768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_ADC1_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_ADC1_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_ADC1_Init+0x74>)
 8002778:	2200      	movs	r2, #0
 800277a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <MX_ADC1_Init+0x74>)
 800277e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_ADC1_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <MX_ADC1_Init+0x74>)
 800278c:	2201      	movs	r2, #1
 800278e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002790:	480d      	ldr	r0, [pc, #52]	; (80027c8 <MX_ADC1_Init+0x74>)
 8002792:	f000 fc13 	bl	8002fbc <HAL_ADC_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800279c:	f000 f992 	bl	8002ac4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027a0:	2301      	movs	r3, #1
 80027a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027a4:	2301      	movs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_ADC1_Init+0x74>)
 80027b2:	f000 febb 	bl	800352c <HAL_ADC_ConfigChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80027bc:	f000 f982 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000698 	.word	0x20000698
 80027cc:	40012400 	.word	0x40012400

080027d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_ADC2_Init+0x74>)
 80027e2:	4a19      	ldr	r2, [pc, #100]	; (8002848 <MX_ADC2_Init+0x78>)
 80027e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <MX_ADC2_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_ADC2_Init+0x74>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_ADC2_Init+0x74>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_ADC2_Init+0x74>)
 80027fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80027fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_ADC2_Init+0x74>)
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_ADC2_Init+0x74>)
 8002808:	2201      	movs	r2, #1
 800280a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800280c:	480d      	ldr	r0, [pc, #52]	; (8002844 <MX_ADC2_Init+0x74>)
 800280e:	f000 fbd5 	bl	8002fbc <HAL_ADC_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002818:	f000 f954 	bl	8002ac4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002820:	2301      	movs	r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	4619      	mov	r1, r3
 800282c:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_ADC2_Init+0x74>)
 800282e:	f000 fe7d 	bl	800352c <HAL_ADC_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002838:	f000 f944 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000658 	.word	0x20000658
 8002848:	40012800 	.word	0x40012800

0800284c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	2100      	movs	r1, #0
 8002856:	460a      	mov	r2, r1
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	460a      	mov	r2, r1
 800285c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <MX_RTC_Init+0x8c>)
 8002864:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <MX_RTC_Init+0x90>)
 8002866:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <MX_RTC_Init+0x8c>)
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <MX_RTC_Init+0x8c>)
 8002872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002876:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002878:	4817      	ldr	r0, [pc, #92]	; (80028d8 <MX_RTC_Init+0x8c>)
 800287a:	f002 f82f 	bl	80048dc <HAL_RTC_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002884:	f000 f91e 	bl	8002ac4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8002888:	2310      	movs	r3, #16
 800288a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 800288c:	2320      	movs	r3, #32
 800288e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8002890:	2330      	movs	r3, #48	; 0x30
 8002892:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2201      	movs	r2, #1
 8002898:	4619      	mov	r1, r3
 800289a:	480f      	ldr	r0, [pc, #60]	; (80028d8 <MX_RTC_Init+0x8c>)
 800289c:	f002 f8b4 	bl	8004a08 <HAL_RTC_SetTime>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80028a6:	f000 f90d 	bl	8002ac4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80028aa:	2301      	movs	r3, #1
 80028ac:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 80028ae:	2311      	movs	r3, #17
 80028b0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x16;
 80028b2:	2316      	movs	r3, #22
 80028b4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 80028b6:	2320      	movs	r3, #32
 80028b8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80028ba:	463b      	mov	r3, r7
 80028bc:	2201      	movs	r2, #1
 80028be:	4619      	mov	r1, r3
 80028c0:	4805      	ldr	r0, [pc, #20]	; (80028d8 <MX_RTC_Init+0x8c>)
 80028c2:	f002 fa11 	bl	8004ce8 <HAL_RTC_SetDate>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80028cc:	f000 f8fa 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	200006cc 	.word	0x200006cc
 80028dc:	40002800 	.word	0x40002800

080028e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <MX_TIM4_Init+0x98>)
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <MX_TIM4_Init+0x9c>)
 8002902:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50-1;
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <MX_TIM4_Init+0x98>)
 8002906:	2231      	movs	r2, #49	; 0x31
 8002908:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <MX_TIM4_Init+0x98>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <MX_TIM4_Init+0x98>)
 8002912:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002916:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <MX_TIM4_Init+0x98>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <MX_TIM4_Init+0x98>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002924:	4814      	ldr	r0, [pc, #80]	; (8002978 <MX_TIM4_Init+0x98>)
 8002926:	f002 fdbb 	bl	80054a0 <HAL_TIM_Base_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002930:	f000 f8c8 	bl	8002ac4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	4619      	mov	r1, r3
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <MX_TIM4_Init+0x98>)
 8002944:	f002 fe46 	bl	80055d4 <HAL_TIM_SlaveConfigSynchro>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800294e:	f000 f8b9 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4806      	ldr	r0, [pc, #24]	; (8002978 <MX_TIM4_Init+0x98>)
 8002960:	f002 ffde 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800296a:	f000 f8ab 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	2000060c 	.word	0x2000060c
 800297c:	40000800 	.word	0x40000800

08002980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <MX_USART3_UART_Init+0x50>)
 8002988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 800298c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 80029a6:	220c      	movs	r2, #12
 80029a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029b6:	4805      	ldr	r0, [pc, #20]	; (80029cc <MX_USART3_UART_Init+0x4c>)
 80029b8:	f003 f810 	bl	80059dc <HAL_UART_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029c2:	f000 f87f 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200005c4 	.word	0x200005c4
 80029d0:	40004800 	.word	0x40004800

080029d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029da:	f107 0310 	add.w	r3, r7, #16
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 80029ee:	f043 0310 	orr.w	r3, r3, #16
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a2b      	ldr	r2, [pc, #172]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 8002a06:	f043 0320 	orr.w	r3, r3, #32
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <MX_GPIO_Init+0xe0>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a36:	4820      	ldr	r0, [pc, #128]	; (8002ab8 <MX_GPIO_Init+0xe4>)
 8002a38:	f001 f97b 	bl	8003d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2120      	movs	r1, #32
 8002a40:	481e      	ldr	r0, [pc, #120]	; (8002abc <MX_GPIO_Init+0xe8>)
 8002a42:	f001 f976 	bl	8003d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2302      	movs	r3, #2
 8002a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4816      	ldr	r0, [pc, #88]	; (8002ab8 <MX_GPIO_Init+0xe4>)
 8002a60:	f000 fff6 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a64:	2320      	movs	r3, #32
 8002a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2302      	movs	r3, #2
 8002a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4810      	ldr	r0, [pc, #64]	; (8002abc <MX_GPIO_Init+0xe8>)
 8002a7c:	f000 ffe8 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <MX_GPIO_Init+0xec>)
 8002a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	4619      	mov	r1, r3
 8002a94:	4809      	ldr	r0, [pc, #36]	; (8002abc <MX_GPIO_Init+0xe8>)
 8002a96:	f000 ffdb 	bl	8003a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2028      	movs	r0, #40	; 0x28
 8002aa0:	f000 ff9f 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aa4:	2028      	movs	r0, #40	; 0x28
 8002aa6:	f000 ffb8 	bl	8003a1a <HAL_NVIC_EnableIRQ>

}
 8002aaa:	bf00      	nop
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	40010800 	.word	0x40010800
 8002ac0:	10110000 	.word	0x10110000

08002ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_MspInit+0x5c>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_MspInit+0x5c>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6193      	str	r3, [r2, #24]
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_MspInit+0x5c>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_MspInit+0x5c>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_MspInit+0x5c>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	61d3      	str	r3, [r2, #28]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_MspInit+0x5c>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_MspInit+0x60>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_MspInit+0x60>)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010000 	.word	0x40010000

08002b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0318 	add.w	r3, r7, #24
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <HAL_ADC_MspInit+0xbc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d122      	bne.n	8002b9a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a26      	ldr	r2, [pc, #152]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b84:	2302      	movs	r3, #2
 8002b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	4619      	mov	r1, r3
 8002b92:	4819      	ldr	r0, [pc, #100]	; (8002bf8 <HAL_ADC_MspInit+0xc4>)
 8002b94:	f000 ff5c 	bl	8003a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002b98:	e026      	b.n	8002be8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_ADC_MspInit+0xc8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d121      	bne.n	8002be8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bae:	6193      	str	r3, [r2, #24]
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6193      	str	r3, [r2, #24]
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_ADC_MspInit+0xc0>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bdc:	f107 0318 	add.w	r3, r7, #24
 8002be0:	4619      	mov	r1, r3
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_ADC_MspInit+0xc4>)
 8002be4:	f000 ff34 	bl	8003a50 <HAL_GPIO_Init>
}
 8002be8:	bf00      	nop
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40012400 	.word	0x40012400
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40010800 	.word	0x40010800
 8002bfc:	40012800 	.word	0x40012800

08002c00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_RTC_MspInit+0x4c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d118      	bne.n	8002c44 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002c12:	f001 f8c9 	bl	8003da8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_RTC_MspInit+0x50>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <HAL_RTC_MspInit+0x50>)
 8002c1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c20:	61d3      	str	r3, [r2, #28]
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RTC_MspInit+0x50>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RTC_MspInit+0x54>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	2029      	movs	r0, #41	; 0x29
 8002c3a:	f000 fed2 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c3e:	2029      	movs	r0, #41	; 0x29
 8002c40:	f000 feeb 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40002800 	.word	0x40002800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	4242043c 	.word	0x4242043c

08002c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_TIM_Base_MspInit+0x34>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10b      	bne.n	8002c82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_TIM_Base_MspInit+0x38>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <HAL_TIM_Base_MspInit+0x38>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_TIM_Base_MspInit+0x38>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40000800 	.word	0x40000800
 8002c90:	40021000 	.word	0x40021000

08002c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <HAL_UART_MspInit+0xc0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d14b      	bne.n	8002d4c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cb4:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_UART_MspInit+0xc4>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <HAL_UART_MspInit+0xc4>)
 8002cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cbe:	61d3      	str	r3, [r2, #28]
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_UART_MspInit+0xc4>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ccc:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_UART_MspInit+0xc4>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <HAL_UART_MspInit+0xc4>)
 8002cd2:	f043 0310 	orr.w	r3, r3, #16
 8002cd6:	6193      	str	r3, [r2, #24]
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <HAL_UART_MspInit+0xc4>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4818      	ldr	r0, [pc, #96]	; (8002d5c <HAL_UART_MspInit+0xc8>)
 8002cfa:	f000 fea9 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4812      	ldr	r0, [pc, #72]	; (8002d5c <HAL_UART_MspInit+0xc8>)
 8002d14:	f000 fe9c 	bl	8003a50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_UART_MspInit+0xcc>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	f043 0310 	orr.w	r3, r3, #16
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_UART_MspInit+0xcc>)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2027      	movs	r0, #39	; 0x27
 8002d42:	f000 fe4e 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d46:	2027      	movs	r0, #39	; 0x27
 8002d48:	f000 fe67 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40004800 	.word	0x40004800
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40010000 	.word	0x40010000

08002d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <HardFault_Handler+0x4>

08002d76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d7a:	e7fe      	b.n	8002d7a <MemManage_Handler+0x4>

08002d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <BusFault_Handler+0x4>

08002d82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <UsageFault_Handler+0x4>

08002d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db0:	f000 f8c6 	bl	8002f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <USART3_IRQHandler+0x10>)
 8002dbe:	f7ff f9b3 	bl	8002128 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200005c4 	.word	0x200005c4

08002dcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002dd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dd4:	f000 ffc6 	bl	8003d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <RTC_Alarm_IRQHandler+0x10>)
 8002de2:	f002 f88b 	bl	8004efc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200006cc 	.word	0x200006cc

08002df0 <_sbrk>:
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <_sbrk+0x5c>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <_sbrk+0x60>)
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <_sbrk+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <_sbrk+0x22>
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <_sbrk+0x64>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <_sbrk+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <_sbrk+0x40>
 8002e20:	f002 febc 	bl	8005b9c <__errno>
 8002e24:	4602      	mov	r2, r0
 8002e26:	230c      	movs	r3, #12
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e009      	b.n	8002e44 <_sbrk+0x54>
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <_sbrk+0x64>)
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20005000 	.word	0x20005000
 8002e50:	00000400 	.word	0x00000400
 8002e54:	200002ec 	.word	0x200002ec
 8002e58:	200007a0 	.word	0x200007a0

08002e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <Reset_Handler>:
 8002e68:	2100      	movs	r1, #0
 8002e6a:	e003      	b.n	8002e74 <LoopCopyDataInit>

08002e6c <CopyDataInit>:
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <LoopFillZerobss+0x14>)
 8002e6e:	585b      	ldr	r3, [r3, r1]
 8002e70:	5043      	str	r3, [r0, r1]
 8002e72:	3104      	adds	r1, #4

08002e74 <LoopCopyDataInit>:
 8002e74:	480a      	ldr	r0, [pc, #40]	; (8002ea0 <LoopFillZerobss+0x18>)
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <LoopFillZerobss+0x1c>)
 8002e78:	1842      	adds	r2, r0, r1
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d3f6      	bcc.n	8002e6c <CopyDataInit>
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <LoopFillZerobss+0x20>)
 8002e80:	e002      	b.n	8002e88 <LoopFillZerobss>

08002e82 <FillZerobss>:
 8002e82:	2300      	movs	r3, #0
 8002e84:	f842 3b04 	str.w	r3, [r2], #4

08002e88 <LoopFillZerobss>:
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <LoopFillZerobss+0x24>)
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3f9      	bcc.n	8002e82 <FillZerobss>
 8002e8e:	f7ff ffe5 	bl	8002e5c <SystemInit>
 8002e92:	f002 fe89 	bl	8005ba8 <__libc_init_array>
 8002e96:	f7ff fb1b 	bl	80024d0 <main>
 8002e9a:	4770      	bx	lr
 8002e9c:	080097e0 	.word	0x080097e0
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	2000021c 	.word	0x2000021c
 8002ea8:	2000021c 	.word	0x2000021c
 8002eac:	2000079c 	.word	0x2000079c

08002eb0 <ADC1_2_IRQHandler>:
 8002eb0:	e7fe      	b.n	8002eb0 <ADC1_2_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_Init+0x28>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_Init+0x28>)
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f000 fd81 	bl	80039cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f000 f808 	bl	8002ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed0:	f7ff fdfe 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000

08002ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_InitTick+0x54>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_InitTick+0x58>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fd99 	bl	8003a36 <HAL_SYSTICK_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00e      	b.n	8002f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	d80a      	bhi.n	8002f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f14:	2200      	movs	r2, #0
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f000 fd61 	bl	80039e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <HAL_InitTick+0x5c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000040 	.word	0x20000040
 8002f38:	20000048 	.word	0x20000048
 8002f3c:	20000044 	.word	0x20000044

08002f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_IncTick+0x1c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_IncTick+0x20>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_IncTick+0x20>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	20000048 	.word	0x20000048
 8002f60:	20000794 	.word	0x20000794

08002f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTick;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_GetTick+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000794 	.word	0x20000794

08002f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d005      	beq.n	8002f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_Delay+0x40>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9e:	bf00      	nop
 8002fa0:	f7ff ffe0 	bl	8002f64 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d8f7      	bhi.n	8002fa0 <HAL_Delay+0x28>
  {
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000048 	.word	0x20000048

08002fbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0be      	b.n	800315c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fd9a 	bl	8002b34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fbdd 	bl	80037c0 <ADC_ConversionStop_Disable>
 8003006:	4603      	mov	r3, r0
 8003008:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 8099 	bne.w	800314a <HAL_ADC_Init+0x18e>
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 8095 	bne.w	800314a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003028:	f023 0302 	bic.w	r3, r3, #2
 800302c:	f043 0202 	orr.w	r2, r3, #2
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800303c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7b1b      	ldrb	r3, [r3, #12]
 8003042:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003044:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	4313      	orrs	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003054:	d003      	beq.n	800305e <HAL_ADC_Init+0xa2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_ADC_Init+0xa8>
 800305e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003062:	e000      	b.n	8003066 <HAL_ADC_Init+0xaa>
 8003064:	2300      	movs	r3, #0
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7d1b      	ldrb	r3, [r3, #20]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d119      	bne.n	80030a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7b1b      	ldrb	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	3b01      	subs	r3, #1
 8003082:	035a      	lsls	r2, r3, #13
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e00b      	b.n	80030a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_ADC_Init+0x1a8>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d8:	d003      	beq.n	80030e2 <HAL_ADC_Init+0x126>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d104      	bne.n	80030ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	051b      	lsls	r3, r3, #20
 80030ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_ADC_Init+0x1ac>)
 8003108:	4013      	ands	r3, r2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d10b      	bne.n	8003128 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003126:	e018      	b.n	800315a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f023 0312 	bic.w	r3, r3, #18
 8003130:	f043 0210 	orr.w	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003148:	e007      	b.n	800315a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	f043 0210 	orr.w	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800315a:	7dfb      	ldrb	r3, [r7, #23]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	ffe1f7fd 	.word	0xffe1f7fd
 8003168:	ff1f0efe 	.word	0xff1f0efe

0800316c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_ADC_Start+0x1a>
 8003182:	2302      	movs	r3, #2
 8003184:	e098      	b.n	80032b8 <HAL_ADC_Start+0x14c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fac4 	bl	800371c <ADC_Enable>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 8087 	bne.w	80032ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a41      	ldr	r2, [pc, #260]	; (80032c0 <HAL_ADC_Start+0x154>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d105      	bne.n	80031ca <HAL_ADC_Start+0x5e>
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_ADC_Start+0x158>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d115      	bne.n	80031f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d026      	beq.n	8003232 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031f4:	e01d      	b.n	8003232 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2f      	ldr	r2, [pc, #188]	; (80032c4 <HAL_ADC_Start+0x158>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_ADC_Start+0xaa>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <HAL_ADC_Start+0x154>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10d      	bne.n	8003232 <HAL_ADC_Start+0xc6>
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_ADC_Start+0x158>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800322a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f023 0206 	bic.w	r2, r3, #6
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	62da      	str	r2, [r3, #44]	; 0x2c
 800324a:	e002      	b.n	8003252 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0202 	mvn.w	r2, #2
 8003262:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800326e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003272:	d113      	bne.n	800329c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_ADC_Start+0x154>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d105      	bne.n	800328a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_ADC_Start+0x158>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	e00c      	b.n	80032b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e003      	b.n	80032b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40012800 	.word	0x40012800
 80032c4:	40012400 	.word	0x40012400

080032c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Stop+0x1a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e01a      	b.n	8003318 <HAL_ADC_Stop+0x50>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa68 	bl	80037c0 <ADC_ConversionStop_Disable>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003336:	f7ff fe15 	bl	8002f64 <HAL_GetTick>
 800333a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f043 0220 	orr.w	r2, r3, #32
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0c8      	b.n	80034f4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d12a      	bne.n	80033c6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800337a:	2b00      	cmp	r3, #0
 800337c:	d123      	bne.n	80033c6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800337e:	e01a      	b.n	80033b6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d016      	beq.n	80033b6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_ADC_PollForConversion+0x7e>
 800338e:	f7ff fde9 	bl	8002f64 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d20b      	bcs.n	80033b6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e09e      	b.n	80034f4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0dd      	beq.n	8003380 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033c4:	e06c      	b.n	80034a0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <HAL_ADC_PollForConversion+0x1dc>)
 80033c8:	681c      	ldr	r4, [r3, #0]
 80033ca:	2002      	movs	r0, #2
 80033cc:	f001 f9ca 	bl	8004764 <HAL_RCCEx_GetPeriphCLKFreq>
 80033d0:	4603      	mov	r3, r0
 80033d2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6919      	ldr	r1, [r3, #16]
 80033dc:	4b48      	ldr	r3, [pc, #288]	; (8003500 <HAL_ADC_PollForConversion+0x1e0>)
 80033de:	400b      	ands	r3, r1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d118      	bne.n	8003416 <HAL_ADC_PollForConversion+0xf6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68d9      	ldr	r1, [r3, #12]
 80033ea:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_ADC_PollForConversion+0x1e4>)
 80033ec:	400b      	ands	r3, r1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d111      	bne.n	8003416 <HAL_ADC_PollForConversion+0xf6>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6919      	ldr	r1, [r3, #16]
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_ADC_PollForConversion+0x1e8>)
 80033fa:	400b      	ands	r3, r1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d108      	bne.n	8003412 <HAL_ADC_PollForConversion+0xf2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68d9      	ldr	r1, [r3, #12]
 8003406:	4b41      	ldr	r3, [pc, #260]	; (800350c <HAL_ADC_PollForConversion+0x1ec>)
 8003408:	400b      	ands	r3, r1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_PollForConversion+0xf2>
 800340e:	2314      	movs	r3, #20
 8003410:	e020      	b.n	8003454 <HAL_ADC_PollForConversion+0x134>
 8003412:	2329      	movs	r3, #41	; 0x29
 8003414:	e01e      	b.n	8003454 <HAL_ADC_PollForConversion+0x134>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6919      	ldr	r1, [r3, #16]
 800341c:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_ADC_PollForConversion+0x1e8>)
 800341e:	400b      	ands	r3, r1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <HAL_ADC_PollForConversion+0x112>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68d9      	ldr	r1, [r3, #12]
 800342a:	4b38      	ldr	r3, [pc, #224]	; (800350c <HAL_ADC_PollForConversion+0x1ec>)
 800342c:	400b      	ands	r3, r1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <HAL_ADC_PollForConversion+0x12e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6919      	ldr	r1, [r3, #16]
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <HAL_ADC_PollForConversion+0x1f0>)
 800343a:	400b      	ands	r3, r1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_ADC_PollForConversion+0x132>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_ADC_PollForConversion+0x1f0>)
 8003448:	400b      	ands	r3, r1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_PollForConversion+0x132>
 800344e:	2354      	movs	r3, #84	; 0x54
 8003450:	e000      	b.n	8003454 <HAL_ADC_PollForConversion+0x134>
 8003452:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800345a:	e01d      	b.n	8003498 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d016      	beq.n	8003492 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_ADC_PollForConversion+0x15a>
 800346a:	f7ff fd7b 	bl	8002f64 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d20b      	bcs.n	8003492 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	f043 0204 	orr.w	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e030      	b.n	80034f4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8dd      	bhi.n	800345c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0212 	mvn.w	r2, #18
 80034a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034c4:	d115      	bne.n	80034f2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d111      	bne.n	80034f2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d105      	bne.n	80034f2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	20000040 	.word	0x20000040
 8003500:	24924924 	.word	0x24924924
 8003504:	00924924 	.word	0x00924924
 8003508:	12492492 	.word	0x12492492
 800350c:	00492492 	.word	0x00492492
 8003510:	00249249 	.word	0x00249249

08003514 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x20>
 8003548:	2302      	movs	r3, #2
 800354a:	e0dc      	b.n	8003706 <HAL_ADC_ConfigChannel+0x1da>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b06      	cmp	r3, #6
 800355a:	d81c      	bhi.n	8003596 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	3b05      	subs	r3, #5
 800356e:	221f      	movs	r2, #31
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	4019      	ands	r1, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	3b05      	subs	r3, #5
 8003588:	fa00 f203 	lsl.w	r2, r0, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	635a      	str	r2, [r3, #52]	; 0x34
 8003594:	e03c      	b.n	8003610 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d81c      	bhi.n	80035d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	3b23      	subs	r3, #35	; 0x23
 80035b0:	221f      	movs	r2, #31
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	4019      	ands	r1, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	3b23      	subs	r3, #35	; 0x23
 80035ca:	fa00 f203 	lsl.w	r2, r0, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
 80035d6:	e01b      	b.n	8003610 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b41      	subs	r3, #65	; 0x41
 80035ea:	221f      	movs	r2, #31
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4019      	ands	r1, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b41      	subs	r3, #65	; 0x41
 8003604:	fa00 f203 	lsl.w	r2, r0, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b09      	cmp	r3, #9
 8003616:	d91c      	bls.n	8003652 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68d9      	ldr	r1, [r3, #12]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	3b1e      	subs	r3, #30
 800362a:	2207      	movs	r2, #7
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	4019      	ands	r1, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6898      	ldr	r0, [r3, #8]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	3b1e      	subs	r3, #30
 8003644:	fa00 f203 	lsl.w	r2, r0, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	e019      	b.n	8003686 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6919      	ldr	r1, [r3, #16]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	2207      	movs	r2, #7
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	4019      	ands	r1, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6898      	ldr	r0, [r3, #8]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	fa00 f203 	lsl.w	r2, r0, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b10      	cmp	r3, #16
 800368c:	d003      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003692:	2b11      	cmp	r3, #17
 8003694:	d132      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <HAL_ADC_ConfigChannel+0x1e4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d125      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d126      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036bc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d11a      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_ADC_ConfigChannel+0x1e8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a13      	ldr	r2, [pc, #76]	; (8003718 <HAL_ADC_ConfigChannel+0x1ec>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	0c9a      	lsrs	r2, r3, #18
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_ConfigChannel+0x1b2>
 80036ea:	e007      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012400 	.word	0x40012400
 8003714:	20000040 	.word	0x20000040
 8003718:	431bde83 	.word	0x431bde83

0800371c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d039      	beq.n	80037ae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <ADC_Enable+0x9c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <ADC_Enable+0xa0>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	0c9b      	lsrs	r3, r3, #18
 8003756:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003758:	e002      	b.n	8003760 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3b01      	subs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003766:	f7ff fbfd 	bl	8002f64 <HAL_GetTick>
 800376a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800376c:	e018      	b.n	80037a0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800376e:	f7ff fbf9 	bl	8002f64 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d911      	bls.n	80037a0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f043 0210 	orr.w	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d1df      	bne.n	800376e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000040 	.word	0x20000040
 80037bc:	431bde83 	.word	0x431bde83

080037c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d127      	bne.n	800382a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ea:	f7ff fbbb 	bl	8002f64 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037f0:	e014      	b.n	800381c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037f2:	f7ff fbb7 	bl	8002f64 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d90d      	bls.n	800381c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f043 0210 	orr.w	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e007      	b.n	800382c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d0e3      	beq.n	80037f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4906      	ldr	r1, [pc, #24]	; (80038cc <__NVIC_EnableIRQ+0x34>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100

080038d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db0a      	blt.n	80038fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	490c      	ldr	r1, [pc, #48]	; (800391c <__NVIC_SetPriority+0x4c>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f8:	e00a      	b.n	8003910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4908      	ldr	r1, [pc, #32]	; (8003920 <__NVIC_SetPriority+0x50>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	3b04      	subs	r3, #4
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	440b      	add	r3, r1
 800390e:	761a      	strb	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000e100 	.word	0xe000e100
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f1c3 0307 	rsb	r3, r3, #7
 800393e:	2b04      	cmp	r3, #4
 8003940:	bf28      	it	cs
 8003942:	2304      	movcs	r3, #4
 8003944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3304      	adds	r3, #4
 800394a:	2b06      	cmp	r3, #6
 800394c:	d902      	bls.n	8003954 <NVIC_EncodePriority+0x30>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3b03      	subs	r3, #3
 8003952:	e000      	b.n	8003956 <NVIC_EncodePriority+0x32>
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	401a      	ands	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800396c:	f04f 31ff 	mov.w	r1, #4294967295
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	43d9      	mvns	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	4313      	orrs	r3, r2
         );
}
 800397e:	4618      	mov	r0, r3
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003998:	d301      	bcc.n	800399e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399a:	2301      	movs	r3, #1
 800399c:	e00f      	b.n	80039be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <SysTick_Config+0x40>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a6:	210f      	movs	r1, #15
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	f7ff ff90 	bl	80038d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <SysTick_Config+0x40>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <SysTick_Config+0x40>)
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	e000e010 	.word	0xe000e010

080039cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff2d 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f4:	f7ff ff42 	bl	800387c <__NVIC_GetPriorityGrouping>
 80039f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f7ff ff90 	bl	8003924 <NVIC_EncodePriority>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff5f 	bl	80038d0 <__NVIC_SetPriority>
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff35 	bl	8003898 <__NVIC_EnableIRQ>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ffa2 	bl	8003988 <SysTick_Config>
 8003a44:	4603      	mov	r3, r0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b08b      	sub	sp, #44	; 0x2c
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a62:	e127      	b.n	8003cb4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a64:	2201      	movs	r2, #1
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	f040 8116 	bne.w	8003cae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b12      	cmp	r3, #18
 8003a88:	d034      	beq.n	8003af4 <HAL_GPIO_Init+0xa4>
 8003a8a:	2b12      	cmp	r3, #18
 8003a8c:	d80d      	bhi.n	8003aaa <HAL_GPIO_Init+0x5a>
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d02b      	beq.n	8003aea <HAL_GPIO_Init+0x9a>
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d804      	bhi.n	8003aa0 <HAL_GPIO_Init+0x50>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d031      	beq.n	8003afe <HAL_GPIO_Init+0xae>
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d01c      	beq.n	8003ad8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a9e:	e048      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d043      	beq.n	8003b2c <HAL_GPIO_Init+0xdc>
 8003aa4:	2b11      	cmp	r3, #17
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_GPIO_Init+0x90>
          break;
 8003aa8:	e043      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003aaa:	4a89      	ldr	r2, [pc, #548]	; (8003cd0 <HAL_GPIO_Init+0x280>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d026      	beq.n	8003afe <HAL_GPIO_Init+0xae>
 8003ab0:	4a87      	ldr	r2, [pc, #540]	; (8003cd0 <HAL_GPIO_Init+0x280>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d806      	bhi.n	8003ac4 <HAL_GPIO_Init+0x74>
 8003ab6:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <HAL_GPIO_Init+0x284>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d020      	beq.n	8003afe <HAL_GPIO_Init+0xae>
 8003abc:	4a86      	ldr	r2, [pc, #536]	; (8003cd8 <HAL_GPIO_Init+0x288>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_GPIO_Init+0xae>
          break;
 8003ac2:	e036      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ac4:	4a85      	ldr	r2, [pc, #532]	; (8003cdc <HAL_GPIO_Init+0x28c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d019      	beq.n	8003afe <HAL_GPIO_Init+0xae>
 8003aca:	4a85      	ldr	r2, [pc, #532]	; (8003ce0 <HAL_GPIO_Init+0x290>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d016      	beq.n	8003afe <HAL_GPIO_Init+0xae>
 8003ad0:	4a84      	ldr	r2, [pc, #528]	; (8003ce4 <HAL_GPIO_Init+0x294>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_GPIO_Init+0xae>
          break;
 8003ad6:	e02c      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	623b      	str	r3, [r7, #32]
          break;
 8003ade:	e028      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	623b      	str	r3, [r7, #32]
          break;
 8003ae8:	e023      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	3308      	adds	r3, #8
 8003af0:	623b      	str	r3, [r7, #32]
          break;
 8003af2:	e01e      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	330c      	adds	r3, #12
 8003afa:	623b      	str	r3, [r7, #32]
          break;
 8003afc:	e019      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b06:	2304      	movs	r3, #4
 8003b08:	623b      	str	r3, [r7, #32]
          break;
 8003b0a:	e012      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b14:	2308      	movs	r3, #8
 8003b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	611a      	str	r2, [r3, #16]
          break;
 8003b1e:	e008      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b20:	2308      	movs	r3, #8
 8003b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	615a      	str	r2, [r3, #20]
          break;
 8003b2a:	e002      	b.n	8003b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
          break;
 8003b30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2bff      	cmp	r3, #255	; 0xff
 8003b36:	d801      	bhi.n	8003b3c <HAL_GPIO_Init+0xec>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	e001      	b.n	8003b40 <HAL_GPIO_Init+0xf0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2bff      	cmp	r3, #255	; 0xff
 8003b46:	d802      	bhi.n	8003b4e <HAL_GPIO_Init+0xfe>
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	e002      	b.n	8003b54 <HAL_GPIO_Init+0x104>
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3b08      	subs	r3, #8
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	210f      	movs	r1, #15
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	401a      	ands	r2, r3
 8003b66:	6a39      	ldr	r1, [r7, #32]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8096 	beq.w	8003cae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b82:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_GPIO_Init+0x298>)
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_GPIO_Init+0x298>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6193      	str	r3, [r2, #24]
 8003b8e:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_GPIO_Init+0x298>)
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b9a:	4a54      	ldr	r2, [pc, #336]	; (8003cec <HAL_GPIO_Init+0x29c>)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4b      	ldr	r2, [pc, #300]	; (8003cf0 <HAL_GPIO_Init+0x2a0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_GPIO_Init+0x19e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_GPIO_Init+0x2a4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00d      	beq.n	8003bea <HAL_GPIO_Init+0x19a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a49      	ldr	r2, [pc, #292]	; (8003cf8 <HAL_GPIO_Init+0x2a8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <HAL_GPIO_Init+0x196>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a48      	ldr	r2, [pc, #288]	; (8003cfc <HAL_GPIO_Init+0x2ac>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_GPIO_Init+0x192>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <HAL_GPIO_Init+0x1a0>
 8003be2:	2304      	movs	r3, #4
 8003be4:	e004      	b.n	8003bf0 <HAL_GPIO_Init+0x1a0>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e002      	b.n	8003bf0 <HAL_GPIO_Init+0x1a0>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_GPIO_Init+0x1a0>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	f002 0203 	and.w	r2, r2, #3
 8003bf6:	0092      	lsls	r2, r2, #2
 8003bf8:	4093      	lsls	r3, r2
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c00:	493a      	ldr	r1, [pc, #232]	; (8003cec <HAL_GPIO_Init+0x29c>)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d006      	beq.n	8003c28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4938      	ldr	r1, [pc, #224]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
 8003c26:	e006      	b.n	8003c36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	4933      	ldr	r1, [pc, #204]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	492e      	ldr	r1, [pc, #184]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
 8003c4e:	e006      	b.n	8003c5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	4929      	ldr	r1, [pc, #164]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	4924      	ldr	r1, [pc, #144]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
 8003c76:	e006      	b.n	8003c86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	491f      	ldr	r1, [pc, #124]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c92:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	491a      	ldr	r1, [pc, #104]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
 8003c9e:	e006      	b.n	8003cae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	4915      	ldr	r1, [pc, #84]	; (8003d00 <HAL_GPIO_Init+0x2b0>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f47f aed0 	bne.w	8003a64 <HAL_GPIO_Init+0x14>
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	372c      	adds	r7, #44	; 0x2c
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	10210000 	.word	0x10210000
 8003cd4:	10110000 	.word	0x10110000
 8003cd8:	10120000 	.word	0x10120000
 8003cdc:	10310000 	.word	0x10310000
 8003ce0:	10320000 	.word	0x10320000
 8003ce4:	10220000 	.word	0x10220000
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40010800 	.word	0x40010800
 8003cf4:	40010c00 	.word	0x40010c00
 8003cf8:	40011000 	.word	0x40011000
 8003cfc:	40011400 	.word	0x40011400
 8003d00:	40010400 	.word	0x40010400

08003d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
 8003d20:	e001      	b.n	8003d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	807b      	strh	r3, [r7, #2]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d42:	787b      	ldrb	r3, [r7, #1]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d4e:	e003      	b.n	8003d58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d50:	887b      	ldrh	r3, [r7, #2]
 8003d52:	041a      	lsls	r2, r3, #16
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	611a      	str	r2, [r3, #16]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f806 	bl	8003d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40010400 	.word	0x40010400

08003d94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_PWR_EnableBkUpAccess+0x14>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	420e0020 	.word	0x420e0020

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e26c      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8087 	beq.w	8003eee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de0:	4b92      	ldr	r3, [pc, #584]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d00c      	beq.n	8003e06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dec:	4b8f      	ldr	r3, [pc, #572]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d112      	bne.n	8003e1e <HAL_RCC_OscConfig+0x5e>
 8003df8:	4b8c      	ldr	r3, [pc, #560]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e04:	d10b      	bne.n	8003e1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e06:	4b89      	ldr	r3, [pc, #548]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d06c      	beq.n	8003eec <HAL_RCC_OscConfig+0x12c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d168      	bne.n	8003eec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e246      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x76>
 8003e28:	4b80      	ldr	r3, [pc, #512]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a7f      	ldr	r2, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	e02e      	b.n	8003e94 <HAL_RCC_OscConfig+0xd4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b7b      	ldr	r3, [pc, #492]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a7a      	ldr	r2, [pc, #488]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b78      	ldr	r3, [pc, #480]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a77      	ldr	r2, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e01d      	b.n	8003e94 <HAL_RCC_OscConfig+0xd4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0xbc>
 8003e62:	4b72      	ldr	r3, [pc, #456]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a71      	ldr	r2, [pc, #452]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0xd4>
 8003e7c:	4b6b      	ldr	r3, [pc, #428]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a6a      	ldr	r2, [pc, #424]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b68      	ldr	r3, [pc, #416]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a67      	ldr	r2, [pc, #412]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7ff f862 	bl	8002f64 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7ff f85e 	bl	8002f64 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e1fa      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b5d      	ldr	r3, [pc, #372]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xe4>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7ff f84e 	bl	8002f64 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7ff f84a 	bl	8002f64 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1e6      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ede:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x10c>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d063      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003efa:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d11c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x18c>
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d116      	bne.n	8003f4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x176>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e1ba      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4939      	ldr	r1, [pc, #228]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	e03a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x270>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7ff f803 	bl	8002f64 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fe ffff 	bl	8002f64 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e19b      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4927      	ldr	r1, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCC_OscConfig+0x270>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe ffe2 	bl	8002f64 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fe ffde 	bl	8002f64 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e17a      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d03a      	beq.n	8004044 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d019      	beq.n	800400a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fe ffc2 	bl	8002f64 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe ffbe 	bl	8002f64 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e15a      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004002:	2001      	movs	r0, #1
 8004004:	f000 fada 	bl	80045bc <RCC_Delay>
 8004008:	e01c      	b.n	8004044 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCC_OscConfig+0x274>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7fe ffa8 	bl	8002f64 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004016:	e00f      	b.n	8004038 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7fe ffa4 	bl	8002f64 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d908      	bls.n	8004038 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e140      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	42420000 	.word	0x42420000
 8004034:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	4b9e      	ldr	r3, [pc, #632]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e9      	bne.n	8004018 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a6 	beq.w	800419e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004056:	4b97      	ldr	r3, [pc, #604]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	4b94      	ldr	r3, [pc, #592]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4a93      	ldr	r2, [pc, #588]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	61d3      	str	r3, [r2, #28]
 800406e:	4b91      	ldr	r3, [pc, #580]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b8e      	ldr	r3, [pc, #568]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d118      	bne.n	80040bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b8b      	ldr	r3, [pc, #556]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a8a      	ldr	r2, [pc, #552]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fe ff65 	bl	8002f64 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fe ff61 	bl	8002f64 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b64      	cmp	r3, #100	; 0x64
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e0fd      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <HAL_RCC_OscConfig+0x4f8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x312>
 80040c4:	4b7b      	ldr	r3, [pc, #492]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a7a      	ldr	r2, [pc, #488]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6213      	str	r3, [r2, #32]
 80040d0:	e02d      	b.n	800412e <HAL_RCC_OscConfig+0x36e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x334>
 80040da:	4b76      	ldr	r3, [pc, #472]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a75      	ldr	r2, [pc, #468]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6213      	str	r3, [r2, #32]
 80040e6:	4b73      	ldr	r3, [pc, #460]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4a72      	ldr	r2, [pc, #456]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	6213      	str	r3, [r2, #32]
 80040f2:	e01c      	b.n	800412e <HAL_RCC_OscConfig+0x36e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d10c      	bne.n	8004116 <HAL_RCC_OscConfig+0x356>
 80040fc:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	4a6c      	ldr	r2, [pc, #432]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	6213      	str	r3, [r2, #32]
 8004108:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4a69      	ldr	r2, [pc, #420]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6213      	str	r3, [r2, #32]
 8004114:	e00b      	b.n	800412e <HAL_RCC_OscConfig+0x36e>
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4a66      	ldr	r2, [pc, #408]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6213      	str	r3, [r2, #32]
 8004122:	4b64      	ldr	r3, [pc, #400]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4a63      	ldr	r2, [pc, #396]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d015      	beq.n	8004162 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7fe ff15 	bl	8002f64 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fe ff11 	bl	8002f64 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0ab      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ee      	beq.n	800413e <HAL_RCC_OscConfig+0x37e>
 8004160:	e014      	b.n	800418c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fe feff 	bl	8002f64 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fe fefb 	bl	8002f64 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	; 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e095      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004180:	4b4c      	ldr	r3, [pc, #304]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ee      	bne.n	800416a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004192:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4a47      	ldr	r2, [pc, #284]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8081 	beq.w	80042aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d061      	beq.n	8004278 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d146      	bne.n	800424a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_OscConfig+0x4fc>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fe fecf 	bl	8002f64 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fe fecb 	bl	8002f64 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e067      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f0:	d108      	bne.n	8004204 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	492d      	ldr	r1, [pc, #180]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004204:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a19      	ldr	r1, [r3, #32]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	430b      	orrs	r3, r1
 8004216:	4927      	ldr	r1, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_RCC_OscConfig+0x4fc>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fe fe9f 	bl	8002f64 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422a:	f7fe fe9b 	bl	8002f64 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e037      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x46a>
 8004248:	e02f      	b.n	80042aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <HAL_RCC_OscConfig+0x4fc>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fe fe88 	bl	8002f64 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fe fe84 	bl	8002f64 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e020      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x498>
 8004276:	e018      	b.n	80042aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e013      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_OscConfig+0x4f4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	429a      	cmp	r2, r3
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
 80042bc:	42420060 	.word	0x42420060

080042c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0d0      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d910      	bls.n	8004304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b67      	ldr	r3, [pc, #412]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	4965      	ldr	r1, [pc, #404]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0b8      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800431c:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a58      	ldr	r2, [pc, #352]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004334:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a52      	ldr	r2, [pc, #328]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800433e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004340:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	494d      	ldr	r1, [pc, #308]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d040      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d115      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e073      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06b      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4936      	ldr	r1, [pc, #216]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fe fdd8 	bl	8002f64 <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fe fdd4 	bl	8002f64 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e053      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d210      	bcs.n	8004410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 0207 	bic.w	r2, r3, #7
 80043f6:	4922      	ldr	r1, [pc, #136]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e032      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4916      	ldr	r1, [pc, #88]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	490e      	ldr	r1, [pc, #56]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800444e:	f000 f821 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8004452:	4601      	mov	r1, r0
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	5cd3      	ldrb	r3, [r2, r3]
 8004462:	fa21 f303 	lsr.w	r3, r1, r3
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1cc>)
 8004468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x1d0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fd36 	bl	8002ee0 <HAL_InitTick>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40022000 	.word	0x40022000
 8004484:	40021000 	.word	0x40021000
 8004488:	08009560 	.word	0x08009560
 800448c:	20000040 	.word	0x20000040
 8004490:	20000044 	.word	0x20000044

08004494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	b490      	push	{r4, r7}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800449a:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCC_GetSysClockFreq+0xb0>)
 800449c:	1d3c      	adds	r4, r7, #4
 800449e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d002      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x40>
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0x46>
 80044d2:	e02d      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044d6:	623b      	str	r3, [r7, #32]
      break;
 80044d8:	e02d      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	0c9b      	lsrs	r3, r3, #18
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044e6:	4413      	add	r3, r2
 80044e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0c5b      	lsrs	r3, r3, #17
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004506:	4413      	add	r3, r2
 8004508:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800450c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a0f      	ldr	r2, [pc, #60]	; (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004512:	fb02 f203 	mul.w	r2, r2, r3
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	e004      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	623b      	str	r3, [r7, #32]
      break;
 800452e:	e002      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004532:	623b      	str	r3, [r7, #32]
      break;
 8004534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004536:	6a3b      	ldr	r3, [r7, #32]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3728      	adds	r7, #40	; 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	bc90      	pop	{r4, r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	08009538 	.word	0x08009538
 8004548:	08009548 	.word	0x08009548
 800454c:	40021000 	.word	0x40021000
 8004550:	007a1200 	.word	0x007a1200
 8004554:	003d0900 	.word	0x003d0900

08004558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b02      	ldr	r3, [pc, #8]	; (8004568 <HAL_RCC_GetHCLKFreq+0x10>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	20000040 	.word	0x20000040

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004570:	f7ff fff2 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004574:	4601      	mov	r1, r0
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4a03      	ldr	r2, [pc, #12]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	08009570 	.word	0x08009570

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004598:	f7ff ffde 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 800459c:	4601      	mov	r1, r0
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	0adb      	lsrs	r3, r3, #11
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045aa:	5cd3      	ldrb	r3, [r2, r3]
 80045ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	08009570 	.word	0x08009570

080045bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <RCC_Delay+0x34>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <RCC_Delay+0x38>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0a5b      	lsrs	r3, r3, #9
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045d8:	bf00      	nop
  }
  while (Delay --);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	60fa      	str	r2, [r7, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f9      	bne.n	80045d8 <RCC_Delay+0x1c>
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000040 	.word	0x20000040
 80045f4:	10624dd3 	.word	0x10624dd3

080045f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d07d      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004614:	2300      	movs	r3, #0
 8004616:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004618:	4b4f      	ldr	r3, [pc, #316]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10d      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	4b4c      	ldr	r3, [pc, #304]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4a4b      	ldr	r2, [pc, #300]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	61d3      	str	r3, [r2, #28]
 8004630:	4b49      	ldr	r3, [pc, #292]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	4b46      	ldr	r3, [pc, #280]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d118      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464c:	4b43      	ldr	r3, [pc, #268]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a42      	ldr	r2, [pc, #264]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004658:	f7fe fc84 	bl	8002f64 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465e:	e008      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004660:	f7fe fc80 	bl	8002f64 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e06d      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	4b3a      	ldr	r3, [pc, #232]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800467e:	4b36      	ldr	r3, [pc, #216]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02e      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	429a      	cmp	r2, r3
 800469a:	d027      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800469c:	4b2e      	ldr	r3, [pc, #184]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a6:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ac:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046b2:	4a29      	ldr	r2, [pc, #164]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d014      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fe fc4f 	bl	8002f64 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fe fc4b 	bl	8002f64 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e036      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ee      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4917      	ldr	r1, [pc, #92]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4a13      	ldr	r2, [pc, #76]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	490b      	ldr	r1, [pc, #44]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4904      	ldr	r1, [pc, #16]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	42420440 	.word	0x42420440

08004764 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b08d      	sub	sp, #52	; 0x34
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800476c:	4b55      	ldr	r3, [pc, #340]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800476e:	f107 040c 	add.w	r4, r7, #12
 8004772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004778:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	2300      	movs	r3, #0
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	2300      	movs	r3, #0
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d07f      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d002      	beq.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800479c:	2b01      	cmp	r3, #1
 800479e:	d048      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80047a0:	e08b      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80047a2:	4b4a      	ldr	r3, [pc, #296]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047a8:	4b48      	ldr	r3, [pc, #288]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d07f      	beq.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	0c9b      	lsrs	r3, r3, #18
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047c0:	4413      	add	r3, r2
 80047c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047c6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d018      	beq.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047d2:	4b3e      	ldr	r3, [pc, #248]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	0c5b      	lsrs	r3, r3, #17
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047e0:	4413      	add	r3, r2
 80047e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047f2:	4a37      	ldr	r2, [pc, #220]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004802:	e004      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	4a33      	ldr	r2, [pc, #204]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800480e:	4b2f      	ldr	r3, [pc, #188]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481a:	d102      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004820:	e048      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004830:	e040      	b.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004842:	d108      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800484e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
 8004854:	e01f      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004860:	d109      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800486e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
 8004874:	e00f      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004880:	d11a      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d014      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800488e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004894:	e010      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004896:	e00f      	b.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004898:	f7ff fe7c 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	0b9b      	lsrs	r3, r3, #14
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	3301      	adds	r3, #1
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048b2:	e002      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048b4:	bf00      	nop
 80048b6:	e000      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80048b8:	bf00      	nop
    }
  }
  return (frequency);
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3734      	adds	r7, #52	; 0x34
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}
 80048c4:	0800954c 	.word	0x0800954c
 80048c8:	0800955c 	.word	0x0800955c
 80048cc:	40021000 	.word	0x40021000
 80048d0:	007a1200 	.word	0x007a1200
 80048d4:	003d0900 	.word	0x003d0900
 80048d8:	aaaaaaab 	.word	0xaaaaaaab

080048dc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e084      	b.n	80049fc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7c5b      	ldrb	r3, [r3, #17]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe f97c 	bl	8002c00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fb25 	bl	8004f5e <HAL_RTC_WaitForSynchro>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2204      	movs	r2, #4
 800491e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e06b      	b.n	80049fc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fbde 	bl	80050e6 <RTC_EnterInitMode>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2204      	movs	r2, #4
 8004934:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e060      	b.n	80049fc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0207 	bic.w	r2, r2, #7
 8004948:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004952:	4b2c      	ldr	r3, [pc, #176]	; (8004a04 <HAL_RTC_Init+0x128>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <HAL_RTC_Init+0x128>)
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800495e:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <HAL_RTC_Init+0x128>)
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4926      	ldr	r1, [pc, #152]	; (8004a04 <HAL_RTC_Init+0x128>)
 800496c:	4313      	orrs	r3, r2
 800496e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d003      	beq.n	8004982 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e00e      	b.n	80049a0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004982:	2001      	movs	r0, #1
 8004984:	f7ff feee 	bl	8004764 <HAL_RCCEx_GetPeriphCLKFreq>
 8004988:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2204      	movs	r2, #4
 8004994:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e030      	b.n	80049fc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3b01      	subs	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 010f 	bic.w	r1, r3, #15
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	0c1a      	lsrs	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	b291      	uxth	r1, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	430b      	orrs	r3, r1
 80049ca:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fbb2 	bl	8005136 <RTC_ExitInitMode>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2204      	movs	r2, #4
 80049dc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e00c      	b.n	80049fc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
  }
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40006c00 	.word	0x40006c00

08004a08 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_RTC_SetTime+0x20>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e080      	b.n	8004b2e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	7c1b      	ldrb	r3, [r3, #16]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_RTC_SetTime+0x30>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e07a      	b.n	8004b2e <HAL_RTC_SetTime+0x126>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2202      	movs	r2, #2
 8004a42:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d113      	bne.n	8004a72 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a54:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	460b      	mov	r3, r1
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a5b      	subs	r3, r3, r1
 8004a64:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a66:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a6c:	4413      	add	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e01e      	b.n	8004ab0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fba2 	bl	80051c0 <RTC_Bcd2ToByte>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a84:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fb97 	bl	80051c0 <RTC_Bcd2ToByte>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a9e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	789b      	ldrb	r3, [r3, #2]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fb8b 	bl	80051c0 <RTC_Bcd2ToByte>
 8004aaa:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004aac:	4423      	add	r3, r4
 8004aae:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004ab0:	6979      	ldr	r1, [r7, #20]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fab0 	bl	8005018 <RTC_WriteTimeCounter>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e02f      	b.n	8004b2e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0205 	bic.w	r2, r2, #5
 8004adc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fac1 	bl	8005066 <RTC_ReadAlarmCounter>
 8004ae4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d018      	beq.n	8004b20 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d214      	bcs.n	8004b20 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004afc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b00:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b02:	6939      	ldr	r1, [r7, #16]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fac7 	bl	8005098 <RTC_WriteAlarmCounter>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2204      	movs	r2, #4
 8004b14:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e006      	b.n	8004b2e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
	...

08004b38 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_RTC_GetTime+0x28>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0b5      	b.n	8004cd0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e0ac      	b.n	8004cd0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fa1e 	bl	8004fb8 <RTC_ReadTimeCounter>
 8004b7c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4a55      	ldr	r2, [pc, #340]	; (8004cd8 <HAL_RTC_GetTime+0x1a0>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0adb      	lsrs	r3, r3, #11
 8004b88:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4b52      	ldr	r3, [pc, #328]	; (8004cd8 <HAL_RTC_GetTime+0x1a0>)
 8004b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b92:	0adb      	lsrs	r3, r3, #11
 8004b94:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	4a4f      	ldr	r2, [pc, #316]	; (8004cdc <HAL_RTC_GetTime+0x1a4>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	4a4a      	ldr	r2, [pc, #296]	; (8004cd8 <HAL_RTC_GetTime+0x1a0>)
 8004bb0:	fba2 1203 	umull	r1, r2, r2, r3
 8004bb4:	0ad2      	lsrs	r2, r2, #11
 8004bb6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004bba:	fb01 f202 	mul.w	r2, r1, r2
 8004bbe:	1a9a      	subs	r2, r3, r2
 8004bc0:	4b46      	ldr	r3, [pc, #280]	; (8004cdc <HAL_RTC_GetTime+0x1a4>)
 8004bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc6:	0959      	lsrs	r1, r3, #5
 8004bc8:	460b      	mov	r3, r1
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a5b      	subs	r3, r3, r1
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	1ad1      	subs	r1, r2, r3
 8004bd2:	b2ca      	uxtb	r2, r1
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b17      	cmp	r3, #23
 8004bdc:	d955      	bls.n	8004c8a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4a3f      	ldr	r2, [pc, #252]	; (8004ce0 <HAL_RTC_GetTime+0x1a8>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	4b3c      	ldr	r3, [pc, #240]	; (8004ce0 <HAL_RTC_GetTime+0x1a8>)
 8004bee:	fba3 2301 	umull	r2, r3, r3, r1
 8004bf2:	091a      	lsrs	r2, r3, #4
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	1aca      	subs	r2, r1, r3
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fa2e 	bl	8005066 <RTC_ReadAlarmCounter>
 8004c0a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d008      	beq.n	8004c26 <HAL_RTC_GetTime+0xee>
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d904      	bls.n	8004c26 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	e002      	b.n	8004c2c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4a2d      	ldr	r2, [pc, #180]	; (8004ce4 <HAL_RTC_GetTime+0x1ac>)
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c3a:	69b9      	ldr	r1, [r7, #24]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f9eb 	bl	8005018 <RTC_WriteTimeCounter>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e041      	b.n	8004cd0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d00c      	beq.n	8004c6e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	4413      	add	r3, r2
 8004c5a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa1a 	bl	8005098 <RTC_WriteAlarmCounter>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e030      	b.n	8004cd0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c6e:	69f9      	ldr	r1, [r7, #28]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fa11 	bl	8005098 <RTC_WriteAlarmCounter>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e027      	b.n	8004cd0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fab9 	bl	80051fa <RTC_DateUpdate>
 8004c88:	e003      	b.n	8004c92 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01a      	beq.n	8004cce <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fa72 	bl	8005186 <RTC_ByteToBcd2>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa69 	bl	8005186 <RTC_ByteToBcd2>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	789b      	ldrb	r3, [r3, #2]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fa60 	bl	8005186 <RTC_ByteToBcd2>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3720      	adds	r7, #32
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	91a2b3c5 	.word	0x91a2b3c5
 8004cdc:	88888889 	.word	0x88888889
 8004ce0:	aaaaaaab 	.word	0xaaaaaaab
 8004ce4:	00015180 	.word	0x00015180

08004ce8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_RTC_SetDate+0x24>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e097      	b.n	8004e40 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	7c1b      	ldrb	r3, [r3, #16]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_RTC_SetDate+0x34>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e091      	b.n	8004e40 <HAL_RTC_SetDate+0x158>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2202      	movs	r2, #2
 8004d26:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	78da      	ldrb	r2, [r3, #3]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	785a      	ldrb	r2, [r3, #1]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	789a      	ldrb	r2, [r3, #2]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	739a      	strb	r2, [r3, #14]
 8004d46:	e01a      	b.n	8004d7e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	78db      	ldrb	r3, [r3, #3]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fa37 	bl	80051c0 <RTC_Bcd2ToByte>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fa2e 	bl	80051c0 <RTC_Bcd2ToByte>
 8004d64:	4603      	mov	r3, r0
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	789b      	ldrb	r3, [r3, #2]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fa25 	bl	80051c0 <RTC_Bcd2ToByte>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	7bdb      	ldrb	r3, [r3, #15]
 8004d82:	4618      	mov	r0, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	7b59      	ldrb	r1, [r3, #13]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	7b9b      	ldrb	r3, [r3, #14]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f000 fb0f 	bl	80053b0 <RTC_WeekDayNum>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	7b1a      	ldrb	r2, [r3, #12]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f908 	bl	8004fb8 <RTC_ReadTimeCounter>
 8004da8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_RTC_SetDate+0x160>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	0adb      	lsrs	r3, r3, #11
 8004db4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b18      	cmp	r3, #24
 8004dba:	d93a      	bls.n	8004e32 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <HAL_RTC_SetDate+0x164>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <HAL_RTC_SetDate+0x168>)
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004dd2:	69f9      	ldr	r1, [r7, #28]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f91f 	bl	8005018 <RTC_WriteTimeCounter>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2204      	movs	r2, #4
 8004de4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e027      	b.n	8004e40 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f938 	bl	8005066 <RTC_ReadAlarmCounter>
 8004df6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d018      	beq.n	8004e32 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d214      	bcs.n	8004e32 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004e0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e12:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f93e 	bl	8005098 <RTC_WriteAlarmCounter>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2204      	movs	r2, #4
 8004e26:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e006      	b.n	8004e40 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	91a2b3c5 	.word	0x91a2b3c5
 8004e4c:	aaaaaaab 	.word	0xaaaaaaab
 8004e50:	00015180 	.word	0x00015180

08004e54 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	2100      	movs	r1, #0
 8004e66:	460a      	mov	r2, r1
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <HAL_RTC_GetDate+0x26>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e03a      	b.n	8004ef4 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	2200      	movs	r2, #0
 8004e84:	4619      	mov	r1, r3
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff fe56 	bl	8004b38 <HAL_RTC_GetTime>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e02e      	b.n	8004ef4 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	7b1a      	ldrb	r2, [r3, #12]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	7bda      	ldrb	r2, [r3, #15]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	7b5a      	ldrb	r2, [r3, #13]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	7b9a      	ldrb	r2, [r3, #14]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01a      	beq.n	8004ef2 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	78db      	ldrb	r3, [r3, #3]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f960 	bl	8005186 <RTC_ByteToBcd2>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f957 	bl	8005186 <RTC_ByteToBcd2>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	789b      	ldrb	r3, [r3, #2]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f94e 	bl	8005186 <RTC_ByteToBcd2>
 8004eea:	4603      	mov	r3, r0
 8004eec:	461a      	mov	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f813 	bl	8004f4c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f06f 0202 	mvn.w	r2, #2
 8004f2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8004f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f36:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	745a      	strb	r2, [r3, #17]
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40010400 	.word	0x40010400

08004f4c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e01d      	b.n	8004fb0 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0208 	bic.w	r2, r2, #8
 8004f82:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f84:	f7fd ffee 	bl	8002f64 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f8a:	e009      	b.n	8004fa0 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f8c:	f7fd ffea 	bl	8002f64 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e007      	b.n	8004fb0 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0ee      	beq.n	8004f8c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	827b      	strh	r3, [r7, #18]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	823b      	strh	r3, [r7, #16]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004fe8:	8a7a      	ldrh	r2, [r7, #18]
 8004fea:	8a3b      	ldrh	r3, [r7, #16]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d008      	beq.n	8005002 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004ff0:	8a3b      	ldrh	r3, [r7, #16]
 8004ff2:	041a      	lsls	r2, r3, #16
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e004      	b.n	800500c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005002:	8a7b      	ldrh	r3, [r7, #18]
 8005004:	041a      	lsls	r2, r3, #16
 8005006:	89fb      	ldrh	r3, [r7, #14]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800500c:	697b      	ldr	r3, [r7, #20]
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f85d 	bl	80050e6 <RTC_EnterInitMode>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	e011      	b.n	800505c <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	0c12      	lsrs	r2, r2, #16
 8005040:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	b292      	uxth	r2, r2
 800504a:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f872 	bl	8005136 <RTC_ExitInitMode>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	81fb      	strh	r3, [r7, #14]
 8005072:	2300      	movs	r3, #0
 8005074:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005086:	89fb      	ldrh	r3, [r7, #14]
 8005088:	041a      	lsls	r2, r3, #16
 800508a:	89bb      	ldrh	r3, [r7, #12]
 800508c:	4313      	orrs	r3, r2
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f81d 	bl	80050e6 <RTC_EnterInitMode>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
 80050b6:	e011      	b.n	80050dc <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	0c12      	lsrs	r2, r2, #16
 80050c0:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	b292      	uxth	r2, r2
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f832 	bl	8005136 <RTC_ExitInitMode>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80050f2:	f7fd ff37 	bl	8002f64 <HAL_GetTick>
 80050f6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050f8:	e009      	b.n	800510e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050fa:	f7fd ff33 	bl	8002f64 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005108:	d901      	bls.n	800510e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e00f      	b.n	800512e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0ee      	beq.n	80050fa <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0210 	orr.w	r2, r2, #16
 800512a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0210 	bic.w	r2, r2, #16
 8005150:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005152:	f7fd ff07 	bl	8002f64 <HAL_GetTick>
 8005156:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005158:	e009      	b.n	800516e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800515a:	f7fd ff03 	bl	8002f64 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005168:	d901      	bls.n	800516e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e007      	b.n	800517e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0ee      	beq.n	800515a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	4603      	mov	r3, r0
 800518e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005194:	e005      	b.n	80051a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	3b0a      	subs	r3, #10
 80051a0:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	2b09      	cmp	r3, #9
 80051a6:	d8f6      	bhi.n	8005196 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b2db      	uxtb	r3, r3
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	b2db      	uxtb	r3, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	7bdb      	ldrb	r3, [r3, #15]
 8005218:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	7b5b      	ldrb	r3, [r3, #13]
 800521e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7b9b      	ldrb	r3, [r3, #14]
 8005224:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005226:	2300      	movs	r3, #0
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	e06f      	b.n	800530c <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d011      	beq.n	8005256 <RTC_DateUpdate+0x5c>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d00e      	beq.n	8005256 <RTC_DateUpdate+0x5c>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b05      	cmp	r3, #5
 800523c:	d00b      	beq.n	8005256 <RTC_DateUpdate+0x5c>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b07      	cmp	r3, #7
 8005242:	d008      	beq.n	8005256 <RTC_DateUpdate+0x5c>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b08      	cmp	r3, #8
 8005248:	d005      	beq.n	8005256 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b0a      	cmp	r3, #10
 800524e:	d002      	beq.n	8005256 <RTC_DateUpdate+0x5c>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d117      	bne.n	8005286 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b1e      	cmp	r3, #30
 800525a:	d803      	bhi.n	8005264 <RTC_DateUpdate+0x6a>
      {
        day++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005262:	e050      	b.n	8005306 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b0c      	cmp	r3, #12
 8005268:	d005      	beq.n	8005276 <RTC_DateUpdate+0x7c>
        {
          month++;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3301      	adds	r3, #1
 800526e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005270:	2301      	movs	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005274:	e047      	b.n	8005306 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005276:	2301      	movs	r3, #1
 8005278:	613b      	str	r3, [r7, #16]
          day = 1U;
 800527a:	2301      	movs	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
          year++;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	3301      	adds	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005284:	e03f      	b.n	8005306 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d008      	beq.n	800529e <RTC_DateUpdate+0xa4>
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b06      	cmp	r3, #6
 8005290:	d005      	beq.n	800529e <RTC_DateUpdate+0xa4>
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b09      	cmp	r3, #9
 8005296:	d002      	beq.n	800529e <RTC_DateUpdate+0xa4>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b0b      	cmp	r3, #11
 800529c:	d10c      	bne.n	80052b8 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b1d      	cmp	r3, #29
 80052a2:	d803      	bhi.n	80052ac <RTC_DateUpdate+0xb2>
      {
        day++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052aa:	e02c      	b.n	8005306 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	613b      	str	r3, [r7, #16]
        day = 1U;
 80052b2:	2301      	movs	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052b6:	e026      	b.n	8005306 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d123      	bne.n	8005306 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b1b      	cmp	r3, #27
 80052c2:	d803      	bhi.n	80052cc <RTC_DateUpdate+0xd2>
      {
        day++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3301      	adds	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e01c      	b.n	8005306 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b1c      	cmp	r3, #28
 80052d0:	d111      	bne.n	80052f6 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f838 	bl	800534c <RTC_IsLeapYear>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <RTC_DateUpdate+0xf0>
        {
          day++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e00d      	b.n	8005306 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	3301      	adds	r3, #1
 80052ee:	613b      	str	r3, [r7, #16]
          day = 1U;
 80052f0:	2301      	movs	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e007      	b.n	8005306 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b1d      	cmp	r3, #29
 80052fa:	d104      	bne.n	8005306 <RTC_DateUpdate+0x10c>
      {
        month++;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3301      	adds	r3, #1
 8005300:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	3301      	adds	r3, #1
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d38b      	bcc.n	800522c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	4619      	mov	r1, r3
 8005336:	6978      	ldr	r0, [r7, #20]
 8005338:	f000 f83a 	bl	80053b0 <RTC_WeekDayNum>
 800533c:	4603      	mov	r3, r0
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	731a      	strb	r2, [r3, #12]
}
 8005344:	bf00      	nop
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	e01d      	b.n	80053a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	4a10      	ldr	r2, [pc, #64]	; (80053ac <RTC_IsLeapYear+0x60>)
 800536a:	fba2 1203 	umull	r1, r2, r2, r3
 800536e:	0952      	lsrs	r2, r2, #5
 8005370:	2164      	movs	r1, #100	; 0x64
 8005372:	fb01 f202 	mul.w	r2, r1, r2
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800537e:	2301      	movs	r3, #1
 8005380:	e00f      	b.n	80053a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	4a09      	ldr	r2, [pc, #36]	; (80053ac <RTC_IsLeapYear+0x60>)
 8005386:	fba2 1203 	umull	r1, r2, r2, r3
 800538a:	09d2      	lsrs	r2, r2, #7
 800538c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005390:	fb01 f202 	mul.w	r2, r1, r2
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80053a0:	2300      	movs	r3, #0
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	51eb851f 	.word	0x51eb851f

080053b0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	70fb      	strb	r3, [r7, #3]
 80053bc:	4613      	mov	r3, r2
 80053be:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80053ce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d82d      	bhi.n	8005432 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	4613      	mov	r3, r2
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4413      	add	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	4a2c      	ldr	r2, [pc, #176]	; (8005494 <RTC_WeekDayNum+0xe4>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	085a      	lsrs	r2, r3, #1
 80053ea:	78bb      	ldrb	r3, [r7, #2]
 80053ec:	441a      	add	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	441a      	add	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	089b      	lsrs	r3, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	4926      	ldr	r1, [pc, #152]	; (8005498 <RTC_WeekDayNum+0xe8>)
 8005400:	fba1 1303 	umull	r1, r3, r1, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	1ad2      	subs	r2, r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	3b01      	subs	r3, #1
 800540c:	4922      	ldr	r1, [pc, #136]	; (8005498 <RTC_WeekDayNum+0xe8>)
 800540e:	fba1 1303 	umull	r1, r3, r1, r3
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	4413      	add	r3, r2
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <RTC_WeekDayNum+0xec>)
 800541a:	fba3 1302 	umull	r1, r3, r3, r2
 800541e:	1ad1      	subs	r1, r2, r3
 8005420:	0849      	lsrs	r1, r1, #1
 8005422:	440b      	add	r3, r1
 8005424:	0899      	lsrs	r1, r3, #2
 8005426:	460b      	mov	r3, r1
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	1a5b      	subs	r3, r3, r1
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e029      	b.n	8005486 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	4a15      	ldr	r2, [pc, #84]	; (8005494 <RTC_WeekDayNum+0xe4>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	085a      	lsrs	r2, r3, #1
 8005446:	78bb      	ldrb	r3, [r7, #2]
 8005448:	441a      	add	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	441a      	add	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	441a      	add	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4910      	ldr	r1, [pc, #64]	; (8005498 <RTC_WeekDayNum+0xe8>)
 8005458:	fba1 1303 	umull	r1, r3, r1, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	490d      	ldr	r1, [pc, #52]	; (8005498 <RTC_WeekDayNum+0xe8>)
 8005464:	fba1 1303 	umull	r1, r3, r1, r3
 8005468:	09db      	lsrs	r3, r3, #7
 800546a:	4413      	add	r3, r2
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <RTC_WeekDayNum+0xec>)
 8005470:	fba3 1302 	umull	r1, r3, r3, r2
 8005474:	1ad1      	subs	r1, r2, r3
 8005476:	0849      	lsrs	r1, r1, #1
 8005478:	440b      	add	r3, r1
 800547a:	0899      	lsrs	r1, r3, #2
 800547c:	460b      	mov	r3, r1
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	1a5b      	subs	r3, r3, r1
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	b2db      	uxtb	r3, r3
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	38e38e39 	.word	0x38e38e39
 8005498:	51eb851f 	.word	0x51eb851f
 800549c:	24924925 	.word	0x24924925

080054a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e041      	b.n	8005536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fd fbc6 	bl	8002c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 f8ba 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e032      	b.n	80055be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_TIM_Base_Start+0x88>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00e      	beq.n	8005588 <HAL_TIM_Base_Start+0x48>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005572:	d009      	beq.n	8005588 <HAL_TIM_Base_Start+0x48>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <HAL_TIM_Base_Start+0x8c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_Base_Start+0x48>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <HAL_TIM_Base_Start+0x90>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d111      	bne.n	80055ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b06      	cmp	r3, #6
 8005598:	d010      	beq.n	80055bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055aa:	e007      	b.n	80055bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800

080055d4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_SlaveConfigSynchro+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e031      	b.n	8005650 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f88c 	bl	800571c <TIM_SlaveTimer_SetConfig>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e018      	b.n	8005650 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800563c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a29      	ldr	r2, [pc, #164]	; (8005710 <TIM_Base_SetConfig+0xb8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_Base_SetConfig+0x30>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d007      	beq.n	8005688 <TIM_Base_SetConfig+0x30>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a26      	ldr	r2, [pc, #152]	; (8005714 <TIM_Base_SetConfig+0xbc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0x30>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a25      	ldr	r2, [pc, #148]	; (8005718 <TIM_Base_SetConfig+0xc0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <TIM_Base_SetConfig+0xb8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <TIM_Base_SetConfig+0xbc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <TIM_Base_SetConfig+0xc0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a07      	ldr	r2, [pc, #28]	; (8005710 <TIM_Base_SetConfig+0xb8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d103      	bne.n	8005700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	615a      	str	r2, [r3, #20]
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800

0800571c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005734:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0307 	bic.w	r3, r3, #7
 8005746:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d05c      	beq.n	800581c <TIM_SlaveTimer_SetConfig+0x100>
 8005762:	2b30      	cmp	r3, #48	; 0x30
 8005764:	d806      	bhi.n	8005774 <TIM_SlaveTimer_SetConfig+0x58>
 8005766:	2b10      	cmp	r3, #16
 8005768:	d058      	beq.n	800581c <TIM_SlaveTimer_SetConfig+0x100>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d056      	beq.n	800581c <TIM_SlaveTimer_SetConfig+0x100>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d054      	beq.n	800581c <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005772:	e054      	b.n	800581e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005774:	2b50      	cmp	r3, #80	; 0x50
 8005776:	d03d      	beq.n	80057f4 <TIM_SlaveTimer_SetConfig+0xd8>
 8005778:	2b50      	cmp	r3, #80	; 0x50
 800577a:	d802      	bhi.n	8005782 <TIM_SlaveTimer_SetConfig+0x66>
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	d010      	beq.n	80057a2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005780:	e04d      	b.n	800581e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005782:	2b60      	cmp	r3, #96	; 0x60
 8005784:	d040      	beq.n	8005808 <TIM_SlaveTimer_SetConfig+0xec>
 8005786:	2b70      	cmp	r3, #112	; 0x70
 8005788:	d000      	beq.n	800578c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800578a:	e048      	b.n	800581e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68d9      	ldr	r1, [r3, #12]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f000 f8a1 	bl	80058e2 <TIM_ETR_SetConfig>
      break;
 80057a0:	e03d      	b.n	800581e <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d101      	bne.n	80057ae <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e038      	b.n	8005820 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	621a      	str	r2, [r3, #32]
      break;
 80057f2:	e014      	b.n	800581e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	461a      	mov	r2, r3
 8005802:	f000 f811 	bl	8005828 <TIM_TI1_ConfigInputStage>
      break;
 8005806:	e00a      	b.n	800581e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6899      	ldr	r1, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	461a      	mov	r2, r3
 8005816:	f000 f835 	bl	8005884 <TIM_TI2_ConfigInputStage>
      break;
 800581a:	e000      	b.n	800581e <TIM_SlaveTimer_SetConfig+0x102>
        break;
 800581c:	bf00      	nop
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 030a 	bic.w	r3, r3, #10
 8005864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f023 0210 	bic.w	r2, r3, #16
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	031b      	lsls	r3, r3, #12
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	621a      	str	r2, [r3, #32]
}
 80058d8:	bf00      	nop
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b087      	sub	sp, #28
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	021a      	lsls	r2, r3, #8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	431a      	orrs	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4313      	orrs	r3, r2
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	609a      	str	r2, [r3, #8]
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e046      	b.n	80059c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d009      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a12      	ldr	r2, [pc, #72]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a10      	ldr	r2, [pc, #64]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d10c      	bne.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800

080059dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e03f      	b.n	8005a6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fd f946 	bl	8002c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	; 0x24
 8005a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f829 	bl	8005a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695a      	ldr	r2, [r3, #20]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ab2:	f023 030c 	bic.w	r3, r3, #12
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	430b      	orrs	r3, r1
 8005abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <UART_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7fe fd58 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	e002      	b.n	8005aee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fe fd40 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8005aec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009a      	lsls	r2, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	4a22      	ldr	r2, [pc, #136]	; (8005b90 <UART_SetConfig+0x118>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	0119      	lsls	r1, r3, #4
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009a      	lsls	r2, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <UART_SetConfig+0x118>)
 8005b26:	fba3 0302 	umull	r0, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2064      	movs	r0, #100	; 0x64
 8005b2e:	fb00 f303 	mul.w	r3, r0, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	3332      	adds	r3, #50	; 0x32
 8005b38:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <UART_SetConfig+0x118>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b44:	4419      	add	r1, r3
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009a      	lsls	r2, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <UART_SetConfig+0x118>)
 8005b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2064      	movs	r0, #100	; 0x64
 8005b66:	fb00 f303 	mul.w	r3, r0, r3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	3332      	adds	r3, #50	; 0x32
 8005b70:	4a07      	ldr	r2, [pc, #28]	; (8005b90 <UART_SetConfig+0x118>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	440a      	add	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40013800 	.word	0x40013800
 8005b90:	51eb851f 	.word	0x51eb851f

08005b94 <atoi>:
 8005b94:	220a      	movs	r2, #10
 8005b96:	2100      	movs	r1, #0
 8005b98:	f000 bd2c 	b.w	80065f4 <strtol>

08005b9c <__errno>:
 8005b9c:	4b01      	ldr	r3, [pc, #4]	; (8005ba4 <__errno+0x8>)
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	2000004c 	.word	0x2000004c

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	2500      	movs	r5, #0
 8005bac:	4e0c      	ldr	r6, [pc, #48]	; (8005be0 <__libc_init_array+0x38>)
 8005bae:	4c0d      	ldr	r4, [pc, #52]	; (8005be4 <__libc_init_array+0x3c>)
 8005bb0:	1ba4      	subs	r4, r4, r6
 8005bb2:	10a4      	asrs	r4, r4, #2
 8005bb4:	42a5      	cmp	r5, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	f002 f904 	bl	8007dc4 <_init>
 8005bbc:	2500      	movs	r5, #0
 8005bbe:	4e0a      	ldr	r6, [pc, #40]	; (8005be8 <__libc_init_array+0x40>)
 8005bc0:	4c0a      	ldr	r4, [pc, #40]	; (8005bec <__libc_init_array+0x44>)
 8005bc2:	1ba4      	subs	r4, r4, r6
 8005bc4:	10a4      	asrs	r4, r4, #2
 8005bc6:	42a5      	cmp	r5, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd0:	4798      	blx	r3
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bda:	4798      	blx	r3
 8005bdc:	3501      	adds	r5, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	080097d8 	.word	0x080097d8
 8005be4:	080097d8 	.word	0x080097d8
 8005be8:	080097d8 	.word	0x080097d8
 8005bec:	080097dc 	.word	0x080097dc

08005bf0 <memset>:
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	4402      	add	r2, r0
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d100      	bne.n	8005bfa <memset+0xa>
 8005bf8:	4770      	bx	lr
 8005bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfe:	e7f9      	b.n	8005bf4 <memset+0x4>

08005c00 <__cvt>:
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c06:	461e      	mov	r6, r3
 8005c08:	bfbb      	ittet	lt
 8005c0a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c0e:	461e      	movlt	r6, r3
 8005c10:	2300      	movge	r3, #0
 8005c12:	232d      	movlt	r3, #45	; 0x2d
 8005c14:	b088      	sub	sp, #32
 8005c16:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c18:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005c1c:	f027 0720 	bic.w	r7, r7, #32
 8005c20:	2f46      	cmp	r7, #70	; 0x46
 8005c22:	4614      	mov	r4, r2
 8005c24:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c26:	700b      	strb	r3, [r1, #0]
 8005c28:	d004      	beq.n	8005c34 <__cvt+0x34>
 8005c2a:	2f45      	cmp	r7, #69	; 0x45
 8005c2c:	d100      	bne.n	8005c30 <__cvt+0x30>
 8005c2e:	3501      	adds	r5, #1
 8005c30:	2302      	movs	r3, #2
 8005c32:	e000      	b.n	8005c36 <__cvt+0x36>
 8005c34:	2303      	movs	r3, #3
 8005c36:	aa07      	add	r2, sp, #28
 8005c38:	9204      	str	r2, [sp, #16]
 8005c3a:	aa06      	add	r2, sp, #24
 8005c3c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c40:	e9cd 3500 	strd	r3, r5, [sp]
 8005c44:	4622      	mov	r2, r4
 8005c46:	4633      	mov	r3, r6
 8005c48:	f000 fd7a 	bl	8006740 <_dtoa_r>
 8005c4c:	2f47      	cmp	r7, #71	; 0x47
 8005c4e:	4680      	mov	r8, r0
 8005c50:	d102      	bne.n	8005c58 <__cvt+0x58>
 8005c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c54:	07db      	lsls	r3, r3, #31
 8005c56:	d526      	bpl.n	8005ca6 <__cvt+0xa6>
 8005c58:	2f46      	cmp	r7, #70	; 0x46
 8005c5a:	eb08 0905 	add.w	r9, r8, r5
 8005c5e:	d111      	bne.n	8005c84 <__cvt+0x84>
 8005c60:	f898 3000 	ldrb.w	r3, [r8]
 8005c64:	2b30      	cmp	r3, #48	; 0x30
 8005c66:	d10a      	bne.n	8005c7e <__cvt+0x7e>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4631      	mov	r1, r6
 8005c70:	f7fa fea4 	bl	80009bc <__aeabi_dcmpeq>
 8005c74:	b918      	cbnz	r0, 8005c7e <__cvt+0x7e>
 8005c76:	f1c5 0501 	rsb	r5, r5, #1
 8005c7a:	f8ca 5000 	str.w	r5, [sl]
 8005c7e:	f8da 3000 	ldr.w	r3, [sl]
 8005c82:	4499      	add	r9, r3
 8005c84:	2200      	movs	r2, #0
 8005c86:	2300      	movs	r3, #0
 8005c88:	4620      	mov	r0, r4
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	f7fa fe96 	bl	80009bc <__aeabi_dcmpeq>
 8005c90:	b938      	cbnz	r0, 8005ca2 <__cvt+0xa2>
 8005c92:	2230      	movs	r2, #48	; 0x30
 8005c94:	9b07      	ldr	r3, [sp, #28]
 8005c96:	454b      	cmp	r3, r9
 8005c98:	d205      	bcs.n	8005ca6 <__cvt+0xa6>
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	9107      	str	r1, [sp, #28]
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e7f8      	b.n	8005c94 <__cvt+0x94>
 8005ca2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	9b07      	ldr	r3, [sp, #28]
 8005caa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cac:	eba3 0308 	sub.w	r3, r3, r8
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	b008      	add	sp, #32
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cb8 <__exponent>:
 8005cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	bfb4      	ite	lt
 8005cbe:	232d      	movlt	r3, #45	; 0x2d
 8005cc0:	232b      	movge	r3, #43	; 0x2b
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	bfb8      	it	lt
 8005cc6:	4249      	neglt	r1, r1
 8005cc8:	2909      	cmp	r1, #9
 8005cca:	f804 2b02 	strb.w	r2, [r4], #2
 8005cce:	7043      	strb	r3, [r0, #1]
 8005cd0:	dd21      	ble.n	8005d16 <__exponent+0x5e>
 8005cd2:	f10d 0307 	add.w	r3, sp, #7
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	260a      	movs	r6, #10
 8005cda:	fb91 f5f6 	sdiv	r5, r1, r6
 8005cde:	fb06 1115 	mls	r1, r6, r5, r1
 8005ce2:	2d09      	cmp	r5, #9
 8005ce4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005ce8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cec:	f103 32ff 	add.w	r2, r3, #4294967295
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	dc09      	bgt.n	8005d08 <__exponent+0x50>
 8005cf4:	3130      	adds	r1, #48	; 0x30
 8005cf6:	3b02      	subs	r3, #2
 8005cf8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005cfc:	42bb      	cmp	r3, r7
 8005cfe:	4622      	mov	r2, r4
 8005d00:	d304      	bcc.n	8005d0c <__exponent+0x54>
 8005d02:	1a10      	subs	r0, r2, r0
 8005d04:	b003      	add	sp, #12
 8005d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d08:	4613      	mov	r3, r2
 8005d0a:	e7e6      	b.n	8005cda <__exponent+0x22>
 8005d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d10:	f804 2b01 	strb.w	r2, [r4], #1
 8005d14:	e7f2      	b.n	8005cfc <__exponent+0x44>
 8005d16:	2330      	movs	r3, #48	; 0x30
 8005d18:	4419      	add	r1, r3
 8005d1a:	7083      	strb	r3, [r0, #2]
 8005d1c:	1d02      	adds	r2, r0, #4
 8005d1e:	70c1      	strb	r1, [r0, #3]
 8005d20:	e7ef      	b.n	8005d02 <__exponent+0x4a>
	...

08005d24 <_printf_float>:
 8005d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	b091      	sub	sp, #68	; 0x44
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005d2e:	4693      	mov	fp, r2
 8005d30:	461e      	mov	r6, r3
 8005d32:	4605      	mov	r5, r0
 8005d34:	f001 fabc 	bl	80072b0 <_localeconv_r>
 8005d38:	6803      	ldr	r3, [r0, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3e:	f7fa fa11 	bl	8000164 <strlen>
 8005d42:	2300      	movs	r3, #0
 8005d44:	930e      	str	r3, [sp, #56]	; 0x38
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	900a      	str	r0, [sp, #40]	; 0x28
 8005d4a:	3307      	adds	r3, #7
 8005d4c:	f023 0307 	bic.w	r3, r3, #7
 8005d50:	f103 0208 	add.w	r2, r3, #8
 8005d54:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005d58:	f8d4 a000 	ldr.w	sl, [r4]
 8005d5c:	603a      	str	r2, [r7, #0]
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d66:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005d6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d70:	f04f 32ff 	mov.w	r2, #4294967295
 8005d74:	4ba6      	ldr	r3, [pc, #664]	; (8006010 <_printf_float+0x2ec>)
 8005d76:	4638      	mov	r0, r7
 8005d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d7a:	f7fa fe51 	bl	8000a20 <__aeabi_dcmpun>
 8005d7e:	bb68      	cbnz	r0, 8005ddc <_printf_float+0xb8>
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	4ba2      	ldr	r3, [pc, #648]	; (8006010 <_printf_float+0x2ec>)
 8005d86:	4638      	mov	r0, r7
 8005d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d8a:	f7fa fe2b 	bl	80009e4 <__aeabi_dcmple>
 8005d8e:	bb28      	cbnz	r0, 8005ddc <_printf_float+0xb8>
 8005d90:	2200      	movs	r2, #0
 8005d92:	2300      	movs	r3, #0
 8005d94:	4638      	mov	r0, r7
 8005d96:	4649      	mov	r1, r9
 8005d98:	f7fa fe1a 	bl	80009d0 <__aeabi_dcmplt>
 8005d9c:	b110      	cbz	r0, 8005da4 <_printf_float+0x80>
 8005d9e:	232d      	movs	r3, #45	; 0x2d
 8005da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da4:	4f9b      	ldr	r7, [pc, #620]	; (8006014 <_printf_float+0x2f0>)
 8005da6:	4b9c      	ldr	r3, [pc, #624]	; (8006018 <_printf_float+0x2f4>)
 8005da8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005dac:	bf98      	it	ls
 8005dae:	461f      	movls	r7, r3
 8005db0:	2303      	movs	r3, #3
 8005db2:	f04f 0900 	mov.w	r9, #0
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	f02a 0304 	bic.w	r3, sl, #4
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	9600      	str	r6, [sp, #0]
 8005dc0:	465b      	mov	r3, fp
 8005dc2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f9e2 	bl	8006190 <_printf_common>
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f040 8090 	bne.w	8005ef2 <_printf_float+0x1ce>
 8005dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd6:	b011      	add	sp, #68	; 0x44
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	463a      	mov	r2, r7
 8005dde:	464b      	mov	r3, r9
 8005de0:	4638      	mov	r0, r7
 8005de2:	4649      	mov	r1, r9
 8005de4:	f7fa fe1c 	bl	8000a20 <__aeabi_dcmpun>
 8005de8:	b110      	cbz	r0, 8005df0 <_printf_float+0xcc>
 8005dea:	4f8c      	ldr	r7, [pc, #560]	; (800601c <_printf_float+0x2f8>)
 8005dec:	4b8c      	ldr	r3, [pc, #560]	; (8006020 <_printf_float+0x2fc>)
 8005dee:	e7db      	b.n	8005da8 <_printf_float+0x84>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	a80d      	add	r0, sp, #52	; 0x34
 8005dfa:	a90e      	add	r1, sp, #56	; 0x38
 8005dfc:	d140      	bne.n	8005e80 <_printf_float+0x15c>
 8005dfe:	2306      	movs	r3, #6
 8005e00:	6063      	str	r3, [r4, #4]
 8005e02:	f04f 0c00 	mov.w	ip, #0
 8005e06:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005e0a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005e0e:	6863      	ldr	r3, [r4, #4]
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	463a      	mov	r2, r7
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7ff feed 	bl	8005c00 <__cvt>
 8005e26:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005e2a:	2b47      	cmp	r3, #71	; 0x47
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	d109      	bne.n	8005e44 <_printf_float+0x120>
 8005e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e32:	1cd8      	adds	r0, r3, #3
 8005e34:	db02      	blt.n	8005e3c <_printf_float+0x118>
 8005e36:	6862      	ldr	r2, [r4, #4]
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	dd47      	ble.n	8005ecc <_printf_float+0x1a8>
 8005e3c:	f1a8 0802 	sub.w	r8, r8, #2
 8005e40:	fa5f f888 	uxtb.w	r8, r8
 8005e44:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005e48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e4a:	d824      	bhi.n	8005e96 <_printf_float+0x172>
 8005e4c:	3901      	subs	r1, #1
 8005e4e:	4642      	mov	r2, r8
 8005e50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e54:	910d      	str	r1, [sp, #52]	; 0x34
 8005e56:	f7ff ff2f 	bl	8005cb8 <__exponent>
 8005e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e5c:	4681      	mov	r9, r0
 8005e5e:	1813      	adds	r3, r2, r0
 8005e60:	2a01      	cmp	r2, #1
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	dc02      	bgt.n	8005e6c <_printf_float+0x148>
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	07d1      	lsls	r1, r2, #31
 8005e6a:	d501      	bpl.n	8005e70 <_printf_float+0x14c>
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	6123      	str	r3, [r4, #16]
 8005e70:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0a2      	beq.n	8005dbe <_printf_float+0x9a>
 8005e78:	232d      	movs	r3, #45	; 0x2d
 8005e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e7e:	e79e      	b.n	8005dbe <_printf_float+0x9a>
 8005e80:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005e84:	f000 816e 	beq.w	8006164 <_printf_float+0x440>
 8005e88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e8c:	d1b9      	bne.n	8005e02 <_printf_float+0xde>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1b7      	bne.n	8005e02 <_printf_float+0xde>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e7b4      	b.n	8005e00 <_printf_float+0xdc>
 8005e96:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005e9a:	d119      	bne.n	8005ed0 <_printf_float+0x1ac>
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	6863      	ldr	r3, [r4, #4]
 8005ea0:	dd0c      	ble.n	8005ebc <_printf_float+0x198>
 8005ea2:	6121      	str	r1, [r4, #16]
 8005ea4:	b913      	cbnz	r3, 8005eac <_printf_float+0x188>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	07d2      	lsls	r2, r2, #31
 8005eaa:	d502      	bpl.n	8005eb2 <_printf_float+0x18e>
 8005eac:	3301      	adds	r3, #1
 8005eae:	440b      	add	r3, r1
 8005eb0:	6123      	str	r3, [r4, #16]
 8005eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb4:	f04f 0900 	mov.w	r9, #0
 8005eb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8005eba:	e7d9      	b.n	8005e70 <_printf_float+0x14c>
 8005ebc:	b913      	cbnz	r3, 8005ec4 <_printf_float+0x1a0>
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	07d0      	lsls	r0, r2, #31
 8005ec2:	d501      	bpl.n	8005ec8 <_printf_float+0x1a4>
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	e7f3      	b.n	8005eb0 <_printf_float+0x18c>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e7f1      	b.n	8005eb0 <_printf_float+0x18c>
 8005ecc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005ed0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	db05      	blt.n	8005ee4 <_printf_float+0x1c0>
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	07d1      	lsls	r1, r2, #31
 8005ede:	d5e8      	bpl.n	8005eb2 <_printf_float+0x18e>
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	e7e5      	b.n	8005eb0 <_printf_float+0x18c>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bfcc      	ite	gt
 8005ee8:	2301      	movgt	r3, #1
 8005eea:	f1c3 0302 	rsble	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	e7de      	b.n	8005eb0 <_printf_float+0x18c>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	055a      	lsls	r2, r3, #21
 8005ef6:	d407      	bmi.n	8005f08 <_printf_float+0x1e4>
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	463a      	mov	r2, r7
 8005efc:	4659      	mov	r1, fp
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b0      	blx	r6
 8005f02:	3001      	adds	r0, #1
 8005f04:	d129      	bne.n	8005f5a <_printf_float+0x236>
 8005f06:	e764      	b.n	8005dd2 <_printf_float+0xae>
 8005f08:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005f0c:	f240 80d7 	bls.w	80060be <_printf_float+0x39a>
 8005f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f14:	2200      	movs	r2, #0
 8005f16:	2300      	movs	r3, #0
 8005f18:	f7fa fd50 	bl	80009bc <__aeabi_dcmpeq>
 8005f1c:	b388      	cbz	r0, 8005f82 <_printf_float+0x25e>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4a40      	ldr	r2, [pc, #256]	; (8006024 <_printf_float+0x300>)
 8005f22:	4659      	mov	r1, fp
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b0      	blx	r6
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f43f af52 	beq.w	8005dd2 <_printf_float+0xae>
 8005f2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f32:	429a      	cmp	r2, r3
 8005f34:	db02      	blt.n	8005f3c <_printf_float+0x218>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	07d8      	lsls	r0, r3, #31
 8005f3a:	d50e      	bpl.n	8005f5a <_printf_float+0x236>
 8005f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f40:	4659      	mov	r1, fp
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b0      	blx	r6
 8005f46:	3001      	adds	r0, #1
 8005f48:	f43f af43 	beq.w	8005dd2 <_printf_float+0xae>
 8005f4c:	2700      	movs	r7, #0
 8005f4e:	f104 081a 	add.w	r8, r4, #26
 8005f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f54:	3b01      	subs	r3, #1
 8005f56:	42bb      	cmp	r3, r7
 8005f58:	dc09      	bgt.n	8005f6e <_printf_float+0x24a>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	079f      	lsls	r7, r3, #30
 8005f5e:	f100 80fd 	bmi.w	800615c <_printf_float+0x438>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bfb8      	it	lt
 8005f6a:	4618      	movlt	r0, r3
 8005f6c:	e733      	b.n	8005dd6 <_printf_float+0xb2>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4642      	mov	r2, r8
 8005f72:	4659      	mov	r1, fp
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b0      	blx	r6
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f af2a 	beq.w	8005dd2 <_printf_float+0xae>
 8005f7e:	3701      	adds	r7, #1
 8005f80:	e7e7      	b.n	8005f52 <_printf_float+0x22e>
 8005f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dc2b      	bgt.n	8005fe0 <_printf_float+0x2bc>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4a26      	ldr	r2, [pc, #152]	; (8006024 <_printf_float+0x300>)
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b0      	blx	r6
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f af1d 	beq.w	8005dd2 <_printf_float+0xae>
 8005f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f9a:	b923      	cbnz	r3, 8005fa6 <_printf_float+0x282>
 8005f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9e:	b913      	cbnz	r3, 8005fa6 <_printf_float+0x282>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	07d9      	lsls	r1, r3, #31
 8005fa4:	d5d9      	bpl.n	8005f5a <_printf_float+0x236>
 8005fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005faa:	4659      	mov	r1, fp
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b0      	blx	r6
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f af0e 	beq.w	8005dd2 <_printf_float+0xae>
 8005fb6:	f04f 0800 	mov.w	r8, #0
 8005fba:	f104 091a 	add.w	r9, r4, #26
 8005fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc0:	425b      	negs	r3, r3
 8005fc2:	4543      	cmp	r3, r8
 8005fc4:	dc01      	bgt.n	8005fca <_printf_float+0x2a6>
 8005fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc8:	e797      	b.n	8005efa <_printf_float+0x1d6>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	464a      	mov	r2, r9
 8005fce:	4659      	mov	r1, fp
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	47b0      	blx	r6
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f43f aefc 	beq.w	8005dd2 <_printf_float+0xae>
 8005fda:	f108 0801 	add.w	r8, r8, #1
 8005fde:	e7ee      	b.n	8005fbe <_printf_float+0x29a>
 8005fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fe2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	bfa8      	it	ge
 8005fe8:	461a      	movge	r2, r3
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	4690      	mov	r8, r2
 8005fee:	dd07      	ble.n	8006000 <_printf_float+0x2dc>
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	4659      	mov	r1, fp
 8005ff4:	463a      	mov	r2, r7
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b0      	blx	r6
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	f43f aee9 	beq.w	8005dd2 <_printf_float+0xae>
 8006000:	f104 031a 	add.w	r3, r4, #26
 8006004:	f04f 0a00 	mov.w	sl, #0
 8006008:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800600c:	930b      	str	r3, [sp, #44]	; 0x2c
 800600e:	e015      	b.n	800603c <_printf_float+0x318>
 8006010:	7fefffff 	.word	0x7fefffff
 8006014:	0800957c 	.word	0x0800957c
 8006018:	08009578 	.word	0x08009578
 800601c:	08009584 	.word	0x08009584
 8006020:	08009580 	.word	0x08009580
 8006024:	08009588 	.word	0x08009588
 8006028:	2301      	movs	r3, #1
 800602a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800602c:	4659      	mov	r1, fp
 800602e:	4628      	mov	r0, r5
 8006030:	47b0      	blx	r6
 8006032:	3001      	adds	r0, #1
 8006034:	f43f aecd 	beq.w	8005dd2 <_printf_float+0xae>
 8006038:	f10a 0a01 	add.w	sl, sl, #1
 800603c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006040:	eba9 0308 	sub.w	r3, r9, r8
 8006044:	4553      	cmp	r3, sl
 8006046:	dcef      	bgt.n	8006028 <_printf_float+0x304>
 8006048:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800604c:	429a      	cmp	r2, r3
 800604e:	444f      	add	r7, r9
 8006050:	db14      	blt.n	800607c <_printf_float+0x358>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	07da      	lsls	r2, r3, #31
 8006056:	d411      	bmi.n	800607c <_printf_float+0x358>
 8006058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800605a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800605c:	eba3 0209 	sub.w	r2, r3, r9
 8006060:	eba3 0901 	sub.w	r9, r3, r1
 8006064:	4591      	cmp	r9, r2
 8006066:	bfa8      	it	ge
 8006068:	4691      	movge	r9, r2
 800606a:	f1b9 0f00 	cmp.w	r9, #0
 800606e:	dc0d      	bgt.n	800608c <_printf_float+0x368>
 8006070:	2700      	movs	r7, #0
 8006072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006076:	f104 081a 	add.w	r8, r4, #26
 800607a:	e018      	b.n	80060ae <_printf_float+0x38a>
 800607c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006080:	4659      	mov	r1, fp
 8006082:	4628      	mov	r0, r5
 8006084:	47b0      	blx	r6
 8006086:	3001      	adds	r0, #1
 8006088:	d1e6      	bne.n	8006058 <_printf_float+0x334>
 800608a:	e6a2      	b.n	8005dd2 <_printf_float+0xae>
 800608c:	464b      	mov	r3, r9
 800608e:	463a      	mov	r2, r7
 8006090:	4659      	mov	r1, fp
 8006092:	4628      	mov	r0, r5
 8006094:	47b0      	blx	r6
 8006096:	3001      	adds	r0, #1
 8006098:	d1ea      	bne.n	8006070 <_printf_float+0x34c>
 800609a:	e69a      	b.n	8005dd2 <_printf_float+0xae>
 800609c:	2301      	movs	r3, #1
 800609e:	4642      	mov	r2, r8
 80060a0:	4659      	mov	r1, fp
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b0      	blx	r6
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f ae93 	beq.w	8005dd2 <_printf_float+0xae>
 80060ac:	3701      	adds	r7, #1
 80060ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	eba3 0309 	sub.w	r3, r3, r9
 80060b8:	42bb      	cmp	r3, r7
 80060ba:	dcef      	bgt.n	800609c <_printf_float+0x378>
 80060bc:	e74d      	b.n	8005f5a <_printf_float+0x236>
 80060be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060c0:	2a01      	cmp	r2, #1
 80060c2:	dc01      	bgt.n	80060c8 <_printf_float+0x3a4>
 80060c4:	07db      	lsls	r3, r3, #31
 80060c6:	d538      	bpl.n	800613a <_printf_float+0x416>
 80060c8:	2301      	movs	r3, #1
 80060ca:	463a      	mov	r2, r7
 80060cc:	4659      	mov	r1, fp
 80060ce:	4628      	mov	r0, r5
 80060d0:	47b0      	blx	r6
 80060d2:	3001      	adds	r0, #1
 80060d4:	f43f ae7d 	beq.w	8005dd2 <_printf_float+0xae>
 80060d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060dc:	4659      	mov	r1, fp
 80060de:	4628      	mov	r0, r5
 80060e0:	47b0      	blx	r6
 80060e2:	3001      	adds	r0, #1
 80060e4:	f107 0701 	add.w	r7, r7, #1
 80060e8:	f43f ae73 	beq.w	8005dd2 <_printf_float+0xae>
 80060ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060f2:	2200      	movs	r2, #0
 80060f4:	f103 38ff 	add.w	r8, r3, #4294967295
 80060f8:	2300      	movs	r3, #0
 80060fa:	f7fa fc5f 	bl	80009bc <__aeabi_dcmpeq>
 80060fe:	b9c0      	cbnz	r0, 8006132 <_printf_float+0x40e>
 8006100:	4643      	mov	r3, r8
 8006102:	463a      	mov	r2, r7
 8006104:	4659      	mov	r1, fp
 8006106:	4628      	mov	r0, r5
 8006108:	47b0      	blx	r6
 800610a:	3001      	adds	r0, #1
 800610c:	d10d      	bne.n	800612a <_printf_float+0x406>
 800610e:	e660      	b.n	8005dd2 <_printf_float+0xae>
 8006110:	2301      	movs	r3, #1
 8006112:	4642      	mov	r2, r8
 8006114:	4659      	mov	r1, fp
 8006116:	4628      	mov	r0, r5
 8006118:	47b0      	blx	r6
 800611a:	3001      	adds	r0, #1
 800611c:	f43f ae59 	beq.w	8005dd2 <_printf_float+0xae>
 8006120:	3701      	adds	r7, #1
 8006122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006124:	3b01      	subs	r3, #1
 8006126:	42bb      	cmp	r3, r7
 8006128:	dcf2      	bgt.n	8006110 <_printf_float+0x3ec>
 800612a:	464b      	mov	r3, r9
 800612c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006130:	e6e4      	b.n	8005efc <_printf_float+0x1d8>
 8006132:	2700      	movs	r7, #0
 8006134:	f104 081a 	add.w	r8, r4, #26
 8006138:	e7f3      	b.n	8006122 <_printf_float+0x3fe>
 800613a:	2301      	movs	r3, #1
 800613c:	e7e1      	b.n	8006102 <_printf_float+0x3de>
 800613e:	2301      	movs	r3, #1
 8006140:	4642      	mov	r2, r8
 8006142:	4659      	mov	r1, fp
 8006144:	4628      	mov	r0, r5
 8006146:	47b0      	blx	r6
 8006148:	3001      	adds	r0, #1
 800614a:	f43f ae42 	beq.w	8005dd2 <_printf_float+0xae>
 800614e:	3701      	adds	r7, #1
 8006150:	68e3      	ldr	r3, [r4, #12]
 8006152:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	42bb      	cmp	r3, r7
 8006158:	dcf1      	bgt.n	800613e <_printf_float+0x41a>
 800615a:	e702      	b.n	8005f62 <_printf_float+0x23e>
 800615c:	2700      	movs	r7, #0
 800615e:	f104 0819 	add.w	r8, r4, #25
 8006162:	e7f5      	b.n	8006150 <_printf_float+0x42c>
 8006164:	2b00      	cmp	r3, #0
 8006166:	f43f ae94 	beq.w	8005e92 <_printf_float+0x16e>
 800616a:	f04f 0c00 	mov.w	ip, #0
 800616e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006172:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006176:	6022      	str	r2, [r4, #0]
 8006178:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800617c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	463a      	mov	r2, r7
 8006184:	464b      	mov	r3, r9
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff fd3a 	bl	8005c00 <__cvt>
 800618c:	4607      	mov	r7, r0
 800618e:	e64f      	b.n	8005e30 <_printf_float+0x10c>

08006190 <_printf_common>:
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	4691      	mov	r9, r2
 8006196:	461f      	mov	r7, r3
 8006198:	688a      	ldr	r2, [r1, #8]
 800619a:	690b      	ldr	r3, [r1, #16]
 800619c:	4606      	mov	r6, r0
 800619e:	4293      	cmp	r3, r2
 80061a0:	bfb8      	it	lt
 80061a2:	4613      	movlt	r3, r2
 80061a4:	f8c9 3000 	str.w	r3, [r9]
 80061a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ac:	460c      	mov	r4, r1
 80061ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061b2:	b112      	cbz	r2, 80061ba <_printf_common+0x2a>
 80061b4:	3301      	adds	r3, #1
 80061b6:	f8c9 3000 	str.w	r3, [r9]
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	0699      	lsls	r1, r3, #26
 80061be:	bf42      	ittt	mi
 80061c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80061c4:	3302      	addmi	r3, #2
 80061c6:	f8c9 3000 	strmi.w	r3, [r9]
 80061ca:	6825      	ldr	r5, [r4, #0]
 80061cc:	f015 0506 	ands.w	r5, r5, #6
 80061d0:	d107      	bne.n	80061e2 <_printf_common+0x52>
 80061d2:	f104 0a19 	add.w	sl, r4, #25
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	f8d9 2000 	ldr.w	r2, [r9]
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	42ab      	cmp	r3, r5
 80061e0:	dc29      	bgt.n	8006236 <_printf_common+0xa6>
 80061e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	3300      	adds	r3, #0
 80061ea:	bf18      	it	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	0692      	lsls	r2, r2, #26
 80061f0:	d42e      	bmi.n	8006250 <_printf_common+0xc0>
 80061f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061f6:	4639      	mov	r1, r7
 80061f8:	4630      	mov	r0, r6
 80061fa:	47c0      	blx	r8
 80061fc:	3001      	adds	r0, #1
 80061fe:	d021      	beq.n	8006244 <_printf_common+0xb4>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	68e5      	ldr	r5, [r4, #12]
 8006204:	f003 0306 	and.w	r3, r3, #6
 8006208:	2b04      	cmp	r3, #4
 800620a:	bf18      	it	ne
 800620c:	2500      	movne	r5, #0
 800620e:	f8d9 2000 	ldr.w	r2, [r9]
 8006212:	f04f 0900 	mov.w	r9, #0
 8006216:	bf08      	it	eq
 8006218:	1aad      	subeq	r5, r5, r2
 800621a:	68a3      	ldr	r3, [r4, #8]
 800621c:	6922      	ldr	r2, [r4, #16]
 800621e:	bf08      	it	eq
 8006220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006224:	4293      	cmp	r3, r2
 8006226:	bfc4      	itt	gt
 8006228:	1a9b      	subgt	r3, r3, r2
 800622a:	18ed      	addgt	r5, r5, r3
 800622c:	341a      	adds	r4, #26
 800622e:	454d      	cmp	r5, r9
 8006230:	d11a      	bne.n	8006268 <_printf_common+0xd8>
 8006232:	2000      	movs	r0, #0
 8006234:	e008      	b.n	8006248 <_printf_common+0xb8>
 8006236:	2301      	movs	r3, #1
 8006238:	4652      	mov	r2, sl
 800623a:	4639      	mov	r1, r7
 800623c:	4630      	mov	r0, r6
 800623e:	47c0      	blx	r8
 8006240:	3001      	adds	r0, #1
 8006242:	d103      	bne.n	800624c <_printf_common+0xbc>
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624c:	3501      	adds	r5, #1
 800624e:	e7c2      	b.n	80061d6 <_printf_common+0x46>
 8006250:	2030      	movs	r0, #48	; 0x30
 8006252:	18e1      	adds	r1, r4, r3
 8006254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800625e:	4422      	add	r2, r4
 8006260:	3302      	adds	r3, #2
 8006262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006266:	e7c4      	b.n	80061f2 <_printf_common+0x62>
 8006268:	2301      	movs	r3, #1
 800626a:	4622      	mov	r2, r4
 800626c:	4639      	mov	r1, r7
 800626e:	4630      	mov	r0, r6
 8006270:	47c0      	blx	r8
 8006272:	3001      	adds	r0, #1
 8006274:	d0e6      	beq.n	8006244 <_printf_common+0xb4>
 8006276:	f109 0901 	add.w	r9, r9, #1
 800627a:	e7d8      	b.n	800622e <_printf_common+0x9e>

0800627c <_printf_i>:
 800627c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006284:	460c      	mov	r4, r1
 8006286:	7e09      	ldrb	r1, [r1, #24]
 8006288:	b085      	sub	sp, #20
 800628a:	296e      	cmp	r1, #110	; 0x6e
 800628c:	4617      	mov	r7, r2
 800628e:	4606      	mov	r6, r0
 8006290:	4698      	mov	r8, r3
 8006292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006294:	f000 80b3 	beq.w	80063fe <_printf_i+0x182>
 8006298:	d822      	bhi.n	80062e0 <_printf_i+0x64>
 800629a:	2963      	cmp	r1, #99	; 0x63
 800629c:	d036      	beq.n	800630c <_printf_i+0x90>
 800629e:	d80a      	bhi.n	80062b6 <_printf_i+0x3a>
 80062a0:	2900      	cmp	r1, #0
 80062a2:	f000 80b9 	beq.w	8006418 <_printf_i+0x19c>
 80062a6:	2958      	cmp	r1, #88	; 0x58
 80062a8:	f000 8083 	beq.w	80063b2 <_printf_i+0x136>
 80062ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062b4:	e032      	b.n	800631c <_printf_i+0xa0>
 80062b6:	2964      	cmp	r1, #100	; 0x64
 80062b8:	d001      	beq.n	80062be <_printf_i+0x42>
 80062ba:	2969      	cmp	r1, #105	; 0x69
 80062bc:	d1f6      	bne.n	80062ac <_printf_i+0x30>
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	6813      	ldr	r3, [r2, #0]
 80062c2:	0605      	lsls	r5, r0, #24
 80062c4:	f103 0104 	add.w	r1, r3, #4
 80062c8:	d52a      	bpl.n	8006320 <_printf_i+0xa4>
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da03      	bge.n	80062da <_printf_i+0x5e>
 80062d2:	222d      	movs	r2, #45	; 0x2d
 80062d4:	425b      	negs	r3, r3
 80062d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062da:	486f      	ldr	r0, [pc, #444]	; (8006498 <_printf_i+0x21c>)
 80062dc:	220a      	movs	r2, #10
 80062de:	e039      	b.n	8006354 <_printf_i+0xd8>
 80062e0:	2973      	cmp	r1, #115	; 0x73
 80062e2:	f000 809d 	beq.w	8006420 <_printf_i+0x1a4>
 80062e6:	d808      	bhi.n	80062fa <_printf_i+0x7e>
 80062e8:	296f      	cmp	r1, #111	; 0x6f
 80062ea:	d020      	beq.n	800632e <_printf_i+0xb2>
 80062ec:	2970      	cmp	r1, #112	; 0x70
 80062ee:	d1dd      	bne.n	80062ac <_printf_i+0x30>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	f043 0320 	orr.w	r3, r3, #32
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	e003      	b.n	8006302 <_printf_i+0x86>
 80062fa:	2975      	cmp	r1, #117	; 0x75
 80062fc:	d017      	beq.n	800632e <_printf_i+0xb2>
 80062fe:	2978      	cmp	r1, #120	; 0x78
 8006300:	d1d4      	bne.n	80062ac <_printf_i+0x30>
 8006302:	2378      	movs	r3, #120	; 0x78
 8006304:	4865      	ldr	r0, [pc, #404]	; (800649c <_printf_i+0x220>)
 8006306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800630a:	e055      	b.n	80063b8 <_printf_i+0x13c>
 800630c:	6813      	ldr	r3, [r2, #0]
 800630e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006312:	1d19      	adds	r1, r3, #4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6011      	str	r1, [r2, #0]
 8006318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800631c:	2301      	movs	r3, #1
 800631e:	e08c      	b.n	800643a <_printf_i+0x1be>
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006326:	6011      	str	r1, [r2, #0]
 8006328:	bf18      	it	ne
 800632a:	b21b      	sxthne	r3, r3
 800632c:	e7cf      	b.n	80062ce <_printf_i+0x52>
 800632e:	6813      	ldr	r3, [r2, #0]
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	1d18      	adds	r0, r3, #4
 8006334:	6010      	str	r0, [r2, #0]
 8006336:	0628      	lsls	r0, r5, #24
 8006338:	d501      	bpl.n	800633e <_printf_i+0xc2>
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	e002      	b.n	8006344 <_printf_i+0xc8>
 800633e:	0668      	lsls	r0, r5, #25
 8006340:	d5fb      	bpl.n	800633a <_printf_i+0xbe>
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	296f      	cmp	r1, #111	; 0x6f
 8006346:	bf14      	ite	ne
 8006348:	220a      	movne	r2, #10
 800634a:	2208      	moveq	r2, #8
 800634c:	4852      	ldr	r0, [pc, #328]	; (8006498 <_printf_i+0x21c>)
 800634e:	2100      	movs	r1, #0
 8006350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006354:	6865      	ldr	r5, [r4, #4]
 8006356:	2d00      	cmp	r5, #0
 8006358:	60a5      	str	r5, [r4, #8]
 800635a:	f2c0 8095 	blt.w	8006488 <_printf_i+0x20c>
 800635e:	6821      	ldr	r1, [r4, #0]
 8006360:	f021 0104 	bic.w	r1, r1, #4
 8006364:	6021      	str	r1, [r4, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d13d      	bne.n	80063e6 <_printf_i+0x16a>
 800636a:	2d00      	cmp	r5, #0
 800636c:	f040 808e 	bne.w	800648c <_printf_i+0x210>
 8006370:	4665      	mov	r5, ip
 8006372:	2a08      	cmp	r2, #8
 8006374:	d10b      	bne.n	800638e <_printf_i+0x112>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	07db      	lsls	r3, r3, #31
 800637a:	d508      	bpl.n	800638e <_printf_i+0x112>
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	6862      	ldr	r2, [r4, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	bfde      	ittt	le
 8006384:	2330      	movle	r3, #48	; 0x30
 8006386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800638a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800638e:	ebac 0305 	sub.w	r3, ip, r5
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	f8cd 8000 	str.w	r8, [sp]
 8006398:	463b      	mov	r3, r7
 800639a:	aa03      	add	r2, sp, #12
 800639c:	4621      	mov	r1, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	f7ff fef6 	bl	8006190 <_printf_common>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d14d      	bne.n	8006444 <_printf_i+0x1c8>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	b005      	add	sp, #20
 80063ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063b2:	4839      	ldr	r0, [pc, #228]	; (8006498 <_printf_i+0x21c>)
 80063b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063b8:	6813      	ldr	r3, [r2, #0]
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	1d1d      	adds	r5, r3, #4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6015      	str	r5, [r2, #0]
 80063c2:	060a      	lsls	r2, r1, #24
 80063c4:	d50b      	bpl.n	80063de <_printf_i+0x162>
 80063c6:	07ca      	lsls	r2, r1, #31
 80063c8:	bf44      	itt	mi
 80063ca:	f041 0120 	orrmi.w	r1, r1, #32
 80063ce:	6021      	strmi	r1, [r4, #0]
 80063d0:	b91b      	cbnz	r3, 80063da <_printf_i+0x15e>
 80063d2:	6822      	ldr	r2, [r4, #0]
 80063d4:	f022 0220 	bic.w	r2, r2, #32
 80063d8:	6022      	str	r2, [r4, #0]
 80063da:	2210      	movs	r2, #16
 80063dc:	e7b7      	b.n	800634e <_printf_i+0xd2>
 80063de:	064d      	lsls	r5, r1, #25
 80063e0:	bf48      	it	mi
 80063e2:	b29b      	uxthmi	r3, r3
 80063e4:	e7ef      	b.n	80063c6 <_printf_i+0x14a>
 80063e6:	4665      	mov	r5, ip
 80063e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80063ec:	fb02 3311 	mls	r3, r2, r1, r3
 80063f0:	5cc3      	ldrb	r3, [r0, r3]
 80063f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063f6:	460b      	mov	r3, r1
 80063f8:	2900      	cmp	r1, #0
 80063fa:	d1f5      	bne.n	80063e8 <_printf_i+0x16c>
 80063fc:	e7b9      	b.n	8006372 <_printf_i+0xf6>
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	6825      	ldr	r5, [r4, #0]
 8006402:	1d18      	adds	r0, r3, #4
 8006404:	6961      	ldr	r1, [r4, #20]
 8006406:	6010      	str	r0, [r2, #0]
 8006408:	0628      	lsls	r0, r5, #24
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	d501      	bpl.n	8006412 <_printf_i+0x196>
 800640e:	6019      	str	r1, [r3, #0]
 8006410:	e002      	b.n	8006418 <_printf_i+0x19c>
 8006412:	066a      	lsls	r2, r5, #25
 8006414:	d5fb      	bpl.n	800640e <_printf_i+0x192>
 8006416:	8019      	strh	r1, [r3, #0]
 8006418:	2300      	movs	r3, #0
 800641a:	4665      	mov	r5, ip
 800641c:	6123      	str	r3, [r4, #16]
 800641e:	e7b9      	b.n	8006394 <_printf_i+0x118>
 8006420:	6813      	ldr	r3, [r2, #0]
 8006422:	1d19      	adds	r1, r3, #4
 8006424:	6011      	str	r1, [r2, #0]
 8006426:	681d      	ldr	r5, [r3, #0]
 8006428:	6862      	ldr	r2, [r4, #4]
 800642a:	2100      	movs	r1, #0
 800642c:	4628      	mov	r0, r5
 800642e:	f000 ff67 	bl	8007300 <memchr>
 8006432:	b108      	cbz	r0, 8006438 <_printf_i+0x1bc>
 8006434:	1b40      	subs	r0, r0, r5
 8006436:	6060      	str	r0, [r4, #4]
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	2300      	movs	r3, #0
 800643e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006442:	e7a7      	b.n	8006394 <_printf_i+0x118>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	462a      	mov	r2, r5
 8006448:	4639      	mov	r1, r7
 800644a:	4630      	mov	r0, r6
 800644c:	47c0      	blx	r8
 800644e:	3001      	adds	r0, #1
 8006450:	d0aa      	beq.n	80063a8 <_printf_i+0x12c>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	079b      	lsls	r3, r3, #30
 8006456:	d413      	bmi.n	8006480 <_printf_i+0x204>
 8006458:	68e0      	ldr	r0, [r4, #12]
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	4298      	cmp	r0, r3
 800645e:	bfb8      	it	lt
 8006460:	4618      	movlt	r0, r3
 8006462:	e7a3      	b.n	80063ac <_printf_i+0x130>
 8006464:	2301      	movs	r3, #1
 8006466:	464a      	mov	r2, r9
 8006468:	4639      	mov	r1, r7
 800646a:	4630      	mov	r0, r6
 800646c:	47c0      	blx	r8
 800646e:	3001      	adds	r0, #1
 8006470:	d09a      	beq.n	80063a8 <_printf_i+0x12c>
 8006472:	3501      	adds	r5, #1
 8006474:	68e3      	ldr	r3, [r4, #12]
 8006476:	9a03      	ldr	r2, [sp, #12]
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	42ab      	cmp	r3, r5
 800647c:	dcf2      	bgt.n	8006464 <_printf_i+0x1e8>
 800647e:	e7eb      	b.n	8006458 <_printf_i+0x1dc>
 8006480:	2500      	movs	r5, #0
 8006482:	f104 0919 	add.w	r9, r4, #25
 8006486:	e7f5      	b.n	8006474 <_printf_i+0x1f8>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1ac      	bne.n	80063e6 <_printf_i+0x16a>
 800648c:	7803      	ldrb	r3, [r0, #0]
 800648e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006496:	e76c      	b.n	8006372 <_printf_i+0xf6>
 8006498:	0800958a 	.word	0x0800958a
 800649c:	0800959b 	.word	0x0800959b

080064a0 <siprintf>:
 80064a0:	b40e      	push	{r1, r2, r3}
 80064a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064a6:	b500      	push	{lr}
 80064a8:	b09c      	sub	sp, #112	; 0x70
 80064aa:	ab1d      	add	r3, sp, #116	; 0x74
 80064ac:	9002      	str	r0, [sp, #8]
 80064ae:	9006      	str	r0, [sp, #24]
 80064b0:	9107      	str	r1, [sp, #28]
 80064b2:	9104      	str	r1, [sp, #16]
 80064b4:	4808      	ldr	r0, [pc, #32]	; (80064d8 <siprintf+0x38>)
 80064b6:	4909      	ldr	r1, [pc, #36]	; (80064dc <siprintf+0x3c>)
 80064b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064bc:	9105      	str	r1, [sp, #20]
 80064be:	6800      	ldr	r0, [r0, #0]
 80064c0:	a902      	add	r1, sp, #8
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	f001 fb20 	bl	8007b08 <_svfiprintf_r>
 80064c8:	2200      	movs	r2, #0
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	b01c      	add	sp, #112	; 0x70
 80064d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d4:	b003      	add	sp, #12
 80064d6:	4770      	bx	lr
 80064d8:	2000004c 	.word	0x2000004c
 80064dc:	ffff0208 	.word	0xffff0208

080064e0 <strcat>:
 80064e0:	4603      	mov	r3, r0
 80064e2:	b510      	push	{r4, lr}
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	1c5c      	adds	r4, r3, #1
 80064e8:	b93a      	cbnz	r2, 80064fa <strcat+0x1a>
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064f4:	2a00      	cmp	r2, #0
 80064f6:	d1f9      	bne.n	80064ec <strcat+0xc>
 80064f8:	bd10      	pop	{r4, pc}
 80064fa:	4623      	mov	r3, r4
 80064fc:	e7f2      	b.n	80064e4 <strcat+0x4>

080064fe <_strtol_l.isra.0>:
 80064fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006502:	4680      	mov	r8, r0
 8006504:	4689      	mov	r9, r1
 8006506:	4692      	mov	sl, r2
 8006508:	461e      	mov	r6, r3
 800650a:	460f      	mov	r7, r1
 800650c:	463d      	mov	r5, r7
 800650e:	9808      	ldr	r0, [sp, #32]
 8006510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006514:	f000 fec8 	bl	80072a8 <__locale_ctype_ptr_l>
 8006518:	4420      	add	r0, r4
 800651a:	7843      	ldrb	r3, [r0, #1]
 800651c:	f013 0308 	ands.w	r3, r3, #8
 8006520:	d132      	bne.n	8006588 <_strtol_l.isra.0+0x8a>
 8006522:	2c2d      	cmp	r4, #45	; 0x2d
 8006524:	d132      	bne.n	800658c <_strtol_l.isra.0+0x8e>
 8006526:	2201      	movs	r2, #1
 8006528:	787c      	ldrb	r4, [r7, #1]
 800652a:	1cbd      	adds	r5, r7, #2
 800652c:	2e00      	cmp	r6, #0
 800652e:	d05d      	beq.n	80065ec <_strtol_l.isra.0+0xee>
 8006530:	2e10      	cmp	r6, #16
 8006532:	d109      	bne.n	8006548 <_strtol_l.isra.0+0x4a>
 8006534:	2c30      	cmp	r4, #48	; 0x30
 8006536:	d107      	bne.n	8006548 <_strtol_l.isra.0+0x4a>
 8006538:	782b      	ldrb	r3, [r5, #0]
 800653a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800653e:	2b58      	cmp	r3, #88	; 0x58
 8006540:	d14f      	bne.n	80065e2 <_strtol_l.isra.0+0xe4>
 8006542:	2610      	movs	r6, #16
 8006544:	786c      	ldrb	r4, [r5, #1]
 8006546:	3502      	adds	r5, #2
 8006548:	2a00      	cmp	r2, #0
 800654a:	bf14      	ite	ne
 800654c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006550:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006554:	2700      	movs	r7, #0
 8006556:	fbb1 fcf6 	udiv	ip, r1, r6
 800655a:	4638      	mov	r0, r7
 800655c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006560:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006564:	2b09      	cmp	r3, #9
 8006566:	d817      	bhi.n	8006598 <_strtol_l.isra.0+0x9a>
 8006568:	461c      	mov	r4, r3
 800656a:	42a6      	cmp	r6, r4
 800656c:	dd23      	ble.n	80065b6 <_strtol_l.isra.0+0xb8>
 800656e:	1c7b      	adds	r3, r7, #1
 8006570:	d007      	beq.n	8006582 <_strtol_l.isra.0+0x84>
 8006572:	4584      	cmp	ip, r0
 8006574:	d31c      	bcc.n	80065b0 <_strtol_l.isra.0+0xb2>
 8006576:	d101      	bne.n	800657c <_strtol_l.isra.0+0x7e>
 8006578:	45a6      	cmp	lr, r4
 800657a:	db19      	blt.n	80065b0 <_strtol_l.isra.0+0xb2>
 800657c:	2701      	movs	r7, #1
 800657e:	fb00 4006 	mla	r0, r0, r6, r4
 8006582:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006586:	e7eb      	b.n	8006560 <_strtol_l.isra.0+0x62>
 8006588:	462f      	mov	r7, r5
 800658a:	e7bf      	b.n	800650c <_strtol_l.isra.0+0xe>
 800658c:	2c2b      	cmp	r4, #43	; 0x2b
 800658e:	bf04      	itt	eq
 8006590:	1cbd      	addeq	r5, r7, #2
 8006592:	787c      	ldrbeq	r4, [r7, #1]
 8006594:	461a      	mov	r2, r3
 8006596:	e7c9      	b.n	800652c <_strtol_l.isra.0+0x2e>
 8006598:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800659c:	2b19      	cmp	r3, #25
 800659e:	d801      	bhi.n	80065a4 <_strtol_l.isra.0+0xa6>
 80065a0:	3c37      	subs	r4, #55	; 0x37
 80065a2:	e7e2      	b.n	800656a <_strtol_l.isra.0+0x6c>
 80065a4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80065a8:	2b19      	cmp	r3, #25
 80065aa:	d804      	bhi.n	80065b6 <_strtol_l.isra.0+0xb8>
 80065ac:	3c57      	subs	r4, #87	; 0x57
 80065ae:	e7dc      	b.n	800656a <_strtol_l.isra.0+0x6c>
 80065b0:	f04f 37ff 	mov.w	r7, #4294967295
 80065b4:	e7e5      	b.n	8006582 <_strtol_l.isra.0+0x84>
 80065b6:	1c7b      	adds	r3, r7, #1
 80065b8:	d108      	bne.n	80065cc <_strtol_l.isra.0+0xce>
 80065ba:	2322      	movs	r3, #34	; 0x22
 80065bc:	4608      	mov	r0, r1
 80065be:	f8c8 3000 	str.w	r3, [r8]
 80065c2:	f1ba 0f00 	cmp.w	sl, #0
 80065c6:	d107      	bne.n	80065d8 <_strtol_l.isra.0+0xda>
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	b102      	cbz	r2, 80065d0 <_strtol_l.isra.0+0xd2>
 80065ce:	4240      	negs	r0, r0
 80065d0:	f1ba 0f00 	cmp.w	sl, #0
 80065d4:	d0f8      	beq.n	80065c8 <_strtol_l.isra.0+0xca>
 80065d6:	b10f      	cbz	r7, 80065dc <_strtol_l.isra.0+0xde>
 80065d8:	f105 39ff 	add.w	r9, r5, #4294967295
 80065dc:	f8ca 9000 	str.w	r9, [sl]
 80065e0:	e7f2      	b.n	80065c8 <_strtol_l.isra.0+0xca>
 80065e2:	2430      	movs	r4, #48	; 0x30
 80065e4:	2e00      	cmp	r6, #0
 80065e6:	d1af      	bne.n	8006548 <_strtol_l.isra.0+0x4a>
 80065e8:	2608      	movs	r6, #8
 80065ea:	e7ad      	b.n	8006548 <_strtol_l.isra.0+0x4a>
 80065ec:	2c30      	cmp	r4, #48	; 0x30
 80065ee:	d0a3      	beq.n	8006538 <_strtol_l.isra.0+0x3a>
 80065f0:	260a      	movs	r6, #10
 80065f2:	e7a9      	b.n	8006548 <_strtol_l.isra.0+0x4a>

080065f4 <strtol>:
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <strtol+0x24>)
 80065f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065f8:	681c      	ldr	r4, [r3, #0]
 80065fa:	4d08      	ldr	r5, [pc, #32]	; (800661c <strtol+0x28>)
 80065fc:	6a23      	ldr	r3, [r4, #32]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf08      	it	eq
 8006602:	462b      	moveq	r3, r5
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	460a      	mov	r2, r1
 800660a:	4601      	mov	r1, r0
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff ff76 	bl	80064fe <_strtol_l.isra.0>
 8006612:	b003      	add	sp, #12
 8006614:	bd30      	pop	{r4, r5, pc}
 8006616:	bf00      	nop
 8006618:	2000004c 	.word	0x2000004c
 800661c:	200000b0 	.word	0x200000b0

08006620 <quorem>:
 8006620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	6903      	ldr	r3, [r0, #16]
 8006626:	690c      	ldr	r4, [r1, #16]
 8006628:	4680      	mov	r8, r0
 800662a:	42a3      	cmp	r3, r4
 800662c:	f2c0 8084 	blt.w	8006738 <quorem+0x118>
 8006630:	3c01      	subs	r4, #1
 8006632:	f101 0714 	add.w	r7, r1, #20
 8006636:	f100 0614 	add.w	r6, r0, #20
 800663a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800663e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006642:	3501      	adds	r5, #1
 8006644:	fbb0 f5f5 	udiv	r5, r0, r5
 8006648:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800664c:	eb06 030c 	add.w	r3, r6, ip
 8006650:	eb07 090c 	add.w	r9, r7, ip
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	b39d      	cbz	r5, 80066c0 <quorem+0xa0>
 8006658:	f04f 0a00 	mov.w	sl, #0
 800665c:	4638      	mov	r0, r7
 800665e:	46b6      	mov	lr, r6
 8006660:	46d3      	mov	fp, sl
 8006662:	f850 2b04 	ldr.w	r2, [r0], #4
 8006666:	b293      	uxth	r3, r2
 8006668:	fb05 a303 	mla	r3, r5, r3, sl
 800666c:	0c12      	lsrs	r2, r2, #16
 800666e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006672:	fb05 a202 	mla	r2, r5, r2, sl
 8006676:	b29b      	uxth	r3, r3
 8006678:	ebab 0303 	sub.w	r3, fp, r3
 800667c:	f8de b000 	ldr.w	fp, [lr]
 8006680:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006684:	fa1f fb8b 	uxth.w	fp, fp
 8006688:	445b      	add	r3, fp
 800668a:	fa1f fb82 	uxth.w	fp, r2
 800668e:	f8de 2000 	ldr.w	r2, [lr]
 8006692:	4581      	cmp	r9, r0
 8006694:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80066a6:	f84e 3b04 	str.w	r3, [lr], #4
 80066aa:	d2da      	bcs.n	8006662 <quorem+0x42>
 80066ac:	f856 300c 	ldr.w	r3, [r6, ip]
 80066b0:	b933      	cbnz	r3, 80066c0 <quorem+0xa0>
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	429e      	cmp	r6, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	d331      	bcc.n	8006720 <quorem+0x100>
 80066bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80066c0:	4640      	mov	r0, r8
 80066c2:	f001 f84b 	bl	800775c <__mcmp>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	db26      	blt.n	8006718 <quorem+0xf8>
 80066ca:	4630      	mov	r0, r6
 80066cc:	f04f 0c00 	mov.w	ip, #0
 80066d0:	3501      	adds	r5, #1
 80066d2:	f857 1b04 	ldr.w	r1, [r7], #4
 80066d6:	f8d0 e000 	ldr.w	lr, [r0]
 80066da:	b28b      	uxth	r3, r1
 80066dc:	ebac 0303 	sub.w	r3, ip, r3
 80066e0:	fa1f f28e 	uxth.w	r2, lr
 80066e4:	4413      	add	r3, r2
 80066e6:	0c0a      	lsrs	r2, r1, #16
 80066e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066f6:	45b9      	cmp	r9, r7
 80066f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066fc:	f840 3b04 	str.w	r3, [r0], #4
 8006700:	d2e7      	bcs.n	80066d2 <quorem+0xb2>
 8006702:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006706:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800670a:	b92a      	cbnz	r2, 8006718 <quorem+0xf8>
 800670c:	3b04      	subs	r3, #4
 800670e:	429e      	cmp	r6, r3
 8006710:	461a      	mov	r2, r3
 8006712:	d30b      	bcc.n	800672c <quorem+0x10c>
 8006714:	f8c8 4010 	str.w	r4, [r8, #16]
 8006718:	4628      	mov	r0, r5
 800671a:	b003      	add	sp, #12
 800671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	3b04      	subs	r3, #4
 8006724:	2a00      	cmp	r2, #0
 8006726:	d1c9      	bne.n	80066bc <quorem+0x9c>
 8006728:	3c01      	subs	r4, #1
 800672a:	e7c4      	b.n	80066b6 <quorem+0x96>
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	3b04      	subs	r3, #4
 8006730:	2a00      	cmp	r2, #0
 8006732:	d1ef      	bne.n	8006714 <quorem+0xf4>
 8006734:	3c01      	subs	r4, #1
 8006736:	e7ea      	b.n	800670e <quorem+0xee>
 8006738:	2000      	movs	r0, #0
 800673a:	e7ee      	b.n	800671a <quorem+0xfa>
 800673c:	0000      	movs	r0, r0
	...

08006740 <_dtoa_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	4616      	mov	r6, r2
 8006746:	461f      	mov	r7, r3
 8006748:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800674a:	b095      	sub	sp, #84	; 0x54
 800674c:	4604      	mov	r4, r0
 800674e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006752:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006756:	b93d      	cbnz	r5, 8006768 <_dtoa_r+0x28>
 8006758:	2010      	movs	r0, #16
 800675a:	f000 fdb7 	bl	80072cc <malloc>
 800675e:	6260      	str	r0, [r4, #36]	; 0x24
 8006760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006764:	6005      	str	r5, [r0, #0]
 8006766:	60c5      	str	r5, [r0, #12]
 8006768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800676a:	6819      	ldr	r1, [r3, #0]
 800676c:	b151      	cbz	r1, 8006784 <_dtoa_r+0x44>
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	2301      	movs	r3, #1
 8006772:	4093      	lsls	r3, r2
 8006774:	604a      	str	r2, [r1, #4]
 8006776:	608b      	str	r3, [r1, #8]
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fe0e 	bl	800739a <_Bfree>
 800677e:	2200      	movs	r2, #0
 8006780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	1e3b      	subs	r3, r7, #0
 8006786:	bfaf      	iteee	ge
 8006788:	2300      	movge	r3, #0
 800678a:	2201      	movlt	r2, #1
 800678c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006790:	9303      	strlt	r3, [sp, #12]
 8006792:	bfac      	ite	ge
 8006794:	f8c8 3000 	strge.w	r3, [r8]
 8006798:	f8c8 2000 	strlt.w	r2, [r8]
 800679c:	4bae      	ldr	r3, [pc, #696]	; (8006a58 <_dtoa_r+0x318>)
 800679e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80067a2:	ea33 0308 	bics.w	r3, r3, r8
 80067a6:	d11b      	bne.n	80067e0 <_dtoa_r+0xa0>
 80067a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80067ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	b923      	cbnz	r3, 80067be <_dtoa_r+0x7e>
 80067b4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f000 8545 	beq.w	8007248 <_dtoa_r+0xb08>
 80067be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067c0:	b953      	cbnz	r3, 80067d8 <_dtoa_r+0x98>
 80067c2:	4ba6      	ldr	r3, [pc, #664]	; (8006a5c <_dtoa_r+0x31c>)
 80067c4:	e021      	b.n	800680a <_dtoa_r+0xca>
 80067c6:	4ba6      	ldr	r3, [pc, #664]	; (8006a60 <_dtoa_r+0x320>)
 80067c8:	9306      	str	r3, [sp, #24]
 80067ca:	3308      	adds	r3, #8
 80067cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	9806      	ldr	r0, [sp, #24]
 80067d2:	b015      	add	sp, #84	; 0x54
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	4ba0      	ldr	r3, [pc, #640]	; (8006a5c <_dtoa_r+0x31c>)
 80067da:	9306      	str	r3, [sp, #24]
 80067dc:	3303      	adds	r3, #3
 80067de:	e7f5      	b.n	80067cc <_dtoa_r+0x8c>
 80067e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	2300      	movs	r3, #0
 80067e8:	4630      	mov	r0, r6
 80067ea:	4639      	mov	r1, r7
 80067ec:	f7fa f8e6 	bl	80009bc <__aeabi_dcmpeq>
 80067f0:	4682      	mov	sl, r0
 80067f2:	b160      	cbz	r0, 800680e <_dtoa_r+0xce>
 80067f4:	2301      	movs	r3, #1
 80067f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8520 	beq.w	8007242 <_dtoa_r+0xb02>
 8006802:	4b98      	ldr	r3, [pc, #608]	; (8006a64 <_dtoa_r+0x324>)
 8006804:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	3b01      	subs	r3, #1
 800680a:	9306      	str	r3, [sp, #24]
 800680c:	e7e0      	b.n	80067d0 <_dtoa_r+0x90>
 800680e:	ab12      	add	r3, sp, #72	; 0x48
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	ab13      	add	r3, sp, #76	; 0x4c
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4632      	mov	r2, r6
 8006818:	463b      	mov	r3, r7
 800681a:	4620      	mov	r0, r4
 800681c:	f001 f816 	bl	800784c <__d2b>
 8006820:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006824:	4683      	mov	fp, r0
 8006826:	2d00      	cmp	r5, #0
 8006828:	d07d      	beq.n	8006926 <_dtoa_r+0x1e6>
 800682a:	46b0      	mov	r8, r6
 800682c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006830:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006834:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006838:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800683c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006840:	2200      	movs	r2, #0
 8006842:	4b89      	ldr	r3, [pc, #548]	; (8006a68 <_dtoa_r+0x328>)
 8006844:	4640      	mov	r0, r8
 8006846:	4649      	mov	r1, r9
 8006848:	f7f9 fc98 	bl	800017c <__aeabi_dsub>
 800684c:	a37c      	add	r3, pc, #496	; (adr r3, 8006a40 <_dtoa_r+0x300>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f7f9 fe4b 	bl	80004ec <__aeabi_dmul>
 8006856:	a37c      	add	r3, pc, #496	; (adr r3, 8006a48 <_dtoa_r+0x308>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fc90 	bl	8000180 <__adddf3>
 8006860:	4606      	mov	r6, r0
 8006862:	4628      	mov	r0, r5
 8006864:	460f      	mov	r7, r1
 8006866:	f7f9 fdd7 	bl	8000418 <__aeabi_i2d>
 800686a:	a379      	add	r3, pc, #484	; (adr r3, 8006a50 <_dtoa_r+0x310>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 fe3c 	bl	80004ec <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7f9 fc80 	bl	8000180 <__adddf3>
 8006880:	4606      	mov	r6, r0
 8006882:	460f      	mov	r7, r1
 8006884:	f7fa f8e2 	bl	8000a4c <__aeabi_d2iz>
 8006888:	2200      	movs	r2, #0
 800688a:	4682      	mov	sl, r0
 800688c:	2300      	movs	r3, #0
 800688e:	4630      	mov	r0, r6
 8006890:	4639      	mov	r1, r7
 8006892:	f7fa f89d 	bl	80009d0 <__aeabi_dcmplt>
 8006896:	b148      	cbz	r0, 80068ac <_dtoa_r+0x16c>
 8006898:	4650      	mov	r0, sl
 800689a:	f7f9 fdbd 	bl	8000418 <__aeabi_i2d>
 800689e:	4632      	mov	r2, r6
 80068a0:	463b      	mov	r3, r7
 80068a2:	f7fa f88b 	bl	80009bc <__aeabi_dcmpeq>
 80068a6:	b908      	cbnz	r0, 80068ac <_dtoa_r+0x16c>
 80068a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ac:	f1ba 0f16 	cmp.w	sl, #22
 80068b0:	d85a      	bhi.n	8006968 <_dtoa_r+0x228>
 80068b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068b6:	496d      	ldr	r1, [pc, #436]	; (8006a6c <_dtoa_r+0x32c>)
 80068b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80068bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c0:	f7fa f8a4 	bl	8000a0c <__aeabi_dcmpgt>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d051      	beq.n	800696c <_dtoa_r+0x22c>
 80068c8:	2300      	movs	r3, #0
 80068ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ce:	930d      	str	r3, [sp, #52]	; 0x34
 80068d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068d2:	1b5d      	subs	r5, r3, r5
 80068d4:	1e6b      	subs	r3, r5, #1
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	bf43      	ittte	mi
 80068da:	2300      	movmi	r3, #0
 80068dc:	f1c5 0901 	rsbmi	r9, r5, #1
 80068e0:	9307      	strmi	r3, [sp, #28]
 80068e2:	f04f 0900 	movpl.w	r9, #0
 80068e6:	f1ba 0f00 	cmp.w	sl, #0
 80068ea:	db41      	blt.n	8006970 <_dtoa_r+0x230>
 80068ec:	9b07      	ldr	r3, [sp, #28]
 80068ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80068f2:	4453      	add	r3, sl
 80068f4:	9307      	str	r3, [sp, #28]
 80068f6:	2300      	movs	r3, #0
 80068f8:	9308      	str	r3, [sp, #32]
 80068fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068fc:	2b09      	cmp	r3, #9
 80068fe:	f200 808f 	bhi.w	8006a20 <_dtoa_r+0x2e0>
 8006902:	2b05      	cmp	r3, #5
 8006904:	bfc4      	itt	gt
 8006906:	3b04      	subgt	r3, #4
 8006908:	931e      	strgt	r3, [sp, #120]	; 0x78
 800690a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800690c:	bfc8      	it	gt
 800690e:	2500      	movgt	r5, #0
 8006910:	f1a3 0302 	sub.w	r3, r3, #2
 8006914:	bfd8      	it	le
 8006916:	2501      	movle	r5, #1
 8006918:	2b03      	cmp	r3, #3
 800691a:	f200 808d 	bhi.w	8006a38 <_dtoa_r+0x2f8>
 800691e:	e8df f003 	tbb	[pc, r3]
 8006922:	7d7b      	.short	0x7d7b
 8006924:	6f2f      	.short	0x6f2f
 8006926:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800692a:	441d      	add	r5, r3
 800692c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006930:	2820      	cmp	r0, #32
 8006932:	dd13      	ble.n	800695c <_dtoa_r+0x21c>
 8006934:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006938:	9b02      	ldr	r3, [sp, #8]
 800693a:	fa08 f800 	lsl.w	r8, r8, r0
 800693e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006942:	fa23 f000 	lsr.w	r0, r3, r0
 8006946:	ea48 0000 	orr.w	r0, r8, r0
 800694a:	f7f9 fd55 	bl	80003f8 <__aeabi_ui2d>
 800694e:	2301      	movs	r3, #1
 8006950:	4680      	mov	r8, r0
 8006952:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006956:	3d01      	subs	r5, #1
 8006958:	9310      	str	r3, [sp, #64]	; 0x40
 800695a:	e771      	b.n	8006840 <_dtoa_r+0x100>
 800695c:	9b02      	ldr	r3, [sp, #8]
 800695e:	f1c0 0020 	rsb	r0, r0, #32
 8006962:	fa03 f000 	lsl.w	r0, r3, r0
 8006966:	e7f0      	b.n	800694a <_dtoa_r+0x20a>
 8006968:	2301      	movs	r3, #1
 800696a:	e7b0      	b.n	80068ce <_dtoa_r+0x18e>
 800696c:	900d      	str	r0, [sp, #52]	; 0x34
 800696e:	e7af      	b.n	80068d0 <_dtoa_r+0x190>
 8006970:	f1ca 0300 	rsb	r3, sl, #0
 8006974:	9308      	str	r3, [sp, #32]
 8006976:	2300      	movs	r3, #0
 8006978:	eba9 090a 	sub.w	r9, r9, sl
 800697c:	930c      	str	r3, [sp, #48]	; 0x30
 800697e:	e7bc      	b.n	80068fa <_dtoa_r+0x1ba>
 8006980:	2301      	movs	r3, #1
 8006982:	9309      	str	r3, [sp, #36]	; 0x24
 8006984:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006986:	2b00      	cmp	r3, #0
 8006988:	dd74      	ble.n	8006a74 <_dtoa_r+0x334>
 800698a:	4698      	mov	r8, r3
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	2200      	movs	r2, #0
 8006990:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006992:	6072      	str	r2, [r6, #4]
 8006994:	2204      	movs	r2, #4
 8006996:	f102 0014 	add.w	r0, r2, #20
 800699a:	4298      	cmp	r0, r3
 800699c:	6871      	ldr	r1, [r6, #4]
 800699e:	d96e      	bls.n	8006a7e <_dtoa_r+0x33e>
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 fcc6 	bl	8007332 <_Balloc>
 80069a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a8:	6030      	str	r0, [r6, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f1b8 0f0e 	cmp.w	r8, #14
 80069b0:	9306      	str	r3, [sp, #24]
 80069b2:	f200 80ed 	bhi.w	8006b90 <_dtoa_r+0x450>
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	f000 80ea 	beq.w	8006b90 <_dtoa_r+0x450>
 80069bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069c0:	f1ba 0f00 	cmp.w	sl, #0
 80069c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80069c8:	dd77      	ble.n	8006aba <_dtoa_r+0x37a>
 80069ca:	4a28      	ldr	r2, [pc, #160]	; (8006a6c <_dtoa_r+0x32c>)
 80069cc:	f00a 030f 	and.w	r3, sl, #15
 80069d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80069d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069d8:	06f0      	lsls	r0, r6, #27
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069e2:	d568      	bpl.n	8006ab6 <_dtoa_r+0x376>
 80069e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069e8:	4b21      	ldr	r3, [pc, #132]	; (8006a70 <_dtoa_r+0x330>)
 80069ea:	2503      	movs	r5, #3
 80069ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069f0:	f7f9 fea6 	bl	8000740 <__aeabi_ddiv>
 80069f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f8:	f006 060f 	and.w	r6, r6, #15
 80069fc:	4f1c      	ldr	r7, [pc, #112]	; (8006a70 <_dtoa_r+0x330>)
 80069fe:	e04f      	b.n	8006aa0 <_dtoa_r+0x360>
 8006a00:	2301      	movs	r3, #1
 8006a02:	9309      	str	r3, [sp, #36]	; 0x24
 8006a04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a06:	4453      	add	r3, sl
 8006a08:	f103 0801 	add.w	r8, r3, #1
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	4643      	mov	r3, r8
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	bfb8      	it	lt
 8006a14:	2301      	movlt	r3, #1
 8006a16:	e7ba      	b.n	800698e <_dtoa_r+0x24e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e7b2      	b.n	8006982 <_dtoa_r+0x242>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e7f0      	b.n	8006a02 <_dtoa_r+0x2c2>
 8006a20:	2501      	movs	r5, #1
 8006a22:	2300      	movs	r3, #0
 8006a24:	9509      	str	r5, [sp, #36]	; 0x24
 8006a26:	931e      	str	r3, [sp, #120]	; 0x78
 8006a28:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	4698      	mov	r8, r3
 8006a32:	2312      	movs	r3, #18
 8006a34:	921f      	str	r2, [sp, #124]	; 0x7c
 8006a36:	e7aa      	b.n	800698e <_dtoa_r+0x24e>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	e7f4      	b.n	8006a28 <_dtoa_r+0x2e8>
 8006a3e:	bf00      	nop
 8006a40:	636f4361 	.word	0x636f4361
 8006a44:	3fd287a7 	.word	0x3fd287a7
 8006a48:	8b60c8b3 	.word	0x8b60c8b3
 8006a4c:	3fc68a28 	.word	0x3fc68a28
 8006a50:	509f79fb 	.word	0x509f79fb
 8006a54:	3fd34413 	.word	0x3fd34413
 8006a58:	7ff00000 	.word	0x7ff00000
 8006a5c:	080095b5 	.word	0x080095b5
 8006a60:	080095ac 	.word	0x080095ac
 8006a64:	08009589 	.word	0x08009589
 8006a68:	3ff80000 	.word	0x3ff80000
 8006a6c:	080095f0 	.word	0x080095f0
 8006a70:	080095c8 	.word	0x080095c8
 8006a74:	2301      	movs	r3, #1
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	4698      	mov	r8, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	e7da      	b.n	8006a34 <_dtoa_r+0x2f4>
 8006a7e:	3101      	adds	r1, #1
 8006a80:	6071      	str	r1, [r6, #4]
 8006a82:	0052      	lsls	r2, r2, #1
 8006a84:	e787      	b.n	8006996 <_dtoa_r+0x256>
 8006a86:	07f1      	lsls	r1, r6, #31
 8006a88:	d508      	bpl.n	8006a9c <_dtoa_r+0x35c>
 8006a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a92:	f7f9 fd2b 	bl	80004ec <__aeabi_dmul>
 8006a96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a9a:	3501      	adds	r5, #1
 8006a9c:	1076      	asrs	r6, r6, #1
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	2e00      	cmp	r6, #0
 8006aa2:	d1f0      	bne.n	8006a86 <_dtoa_r+0x346>
 8006aa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aac:	f7f9 fe48 	bl	8000740 <__aeabi_ddiv>
 8006ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab4:	e01b      	b.n	8006aee <_dtoa_r+0x3ae>
 8006ab6:	2502      	movs	r5, #2
 8006ab8:	e7a0      	b.n	80069fc <_dtoa_r+0x2bc>
 8006aba:	f000 80a4 	beq.w	8006c06 <_dtoa_r+0x4c6>
 8006abe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ac2:	f1ca 0600 	rsb	r6, sl, #0
 8006ac6:	4ba0      	ldr	r3, [pc, #640]	; (8006d48 <_dtoa_r+0x608>)
 8006ac8:	f006 020f 	and.w	r2, r6, #15
 8006acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7f9 fd0a 	bl	80004ec <__aeabi_dmul>
 8006ad8:	2502      	movs	r5, #2
 8006ada:	2300      	movs	r3, #0
 8006adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ae0:	4f9a      	ldr	r7, [pc, #616]	; (8006d4c <_dtoa_r+0x60c>)
 8006ae2:	1136      	asrs	r6, r6, #4
 8006ae4:	2e00      	cmp	r6, #0
 8006ae6:	f040 8083 	bne.w	8006bf0 <_dtoa_r+0x4b0>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e0      	bne.n	8006ab0 <_dtoa_r+0x370>
 8006aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 808a 	beq.w	8006c0a <_dtoa_r+0x4ca>
 8006af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006afa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006afe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b02:	2200      	movs	r2, #0
 8006b04:	4b92      	ldr	r3, [pc, #584]	; (8006d50 <_dtoa_r+0x610>)
 8006b06:	f7f9 ff63 	bl	80009d0 <__aeabi_dcmplt>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d07d      	beq.n	8006c0a <_dtoa_r+0x4ca>
 8006b0e:	f1b8 0f00 	cmp.w	r8, #0
 8006b12:	d07a      	beq.n	8006c0a <_dtoa_r+0x4ca>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd36      	ble.n	8006b88 <_dtoa_r+0x448>
 8006b1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b1e:	2200      	movs	r2, #0
 8006b20:	4b8c      	ldr	r3, [pc, #560]	; (8006d54 <_dtoa_r+0x614>)
 8006b22:	f7f9 fce3 	bl	80004ec <__aeabi_dmul>
 8006b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2a:	9e04      	ldr	r6, [sp, #16]
 8006b2c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006b30:	3501      	adds	r5, #1
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7f9 fc70 	bl	8000418 <__aeabi_i2d>
 8006b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b3c:	f7f9 fcd6 	bl	80004ec <__aeabi_dmul>
 8006b40:	2200      	movs	r2, #0
 8006b42:	4b85      	ldr	r3, [pc, #532]	; (8006d58 <_dtoa_r+0x618>)
 8006b44:	f7f9 fb1c 	bl	8000180 <__adddf3>
 8006b48:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006b4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b50:	950b      	str	r5, [sp, #44]	; 0x2c
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d15c      	bne.n	8006c10 <_dtoa_r+0x4d0>
 8006b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4b7f      	ldr	r3, [pc, #508]	; (8006d5c <_dtoa_r+0x61c>)
 8006b5e:	f7f9 fb0d 	bl	800017c <__aeabi_dsub>
 8006b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b64:	462b      	mov	r3, r5
 8006b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b6a:	f7f9 ff4f 	bl	8000a0c <__aeabi_dcmpgt>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f040 8281 	bne.w	8007076 <_dtoa_r+0x936>
 8006b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b7a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b7e:	f7f9 ff27 	bl	80009d0 <__aeabi_dcmplt>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f040 8275 	bne.w	8007072 <_dtoa_r+0x932>
 8006b88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006b8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f2c0 814b 	blt.w	8006e2e <_dtoa_r+0x6ee>
 8006b98:	f1ba 0f0e 	cmp.w	sl, #14
 8006b9c:	f300 8147 	bgt.w	8006e2e <_dtoa_r+0x6ee>
 8006ba0:	4b69      	ldr	r3, [pc, #420]	; (8006d48 <_dtoa_r+0x608>)
 8006ba2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f280 80d7 	bge.w	8006d64 <_dtoa_r+0x624>
 8006bb6:	f1b8 0f00 	cmp.w	r8, #0
 8006bba:	f300 80d3 	bgt.w	8006d64 <_dtoa_r+0x624>
 8006bbe:	f040 8257 	bne.w	8007070 <_dtoa_r+0x930>
 8006bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4b64      	ldr	r3, [pc, #400]	; (8006d5c <_dtoa_r+0x61c>)
 8006bca:	f7f9 fc8f 	bl	80004ec <__aeabi_dmul>
 8006bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bd2:	f7f9 ff11 	bl	80009f8 <__aeabi_dcmpge>
 8006bd6:	4646      	mov	r6, r8
 8006bd8:	4647      	mov	r7, r8
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	f040 822d 	bne.w	800703a <_dtoa_r+0x8fa>
 8006be0:	9b06      	ldr	r3, [sp, #24]
 8006be2:	9a06      	ldr	r2, [sp, #24]
 8006be4:	1c5d      	adds	r5, r3, #1
 8006be6:	2331      	movs	r3, #49	; 0x31
 8006be8:	f10a 0a01 	add.w	sl, sl, #1
 8006bec:	7013      	strb	r3, [r2, #0]
 8006bee:	e228      	b.n	8007042 <_dtoa_r+0x902>
 8006bf0:	07f2      	lsls	r2, r6, #31
 8006bf2:	d505      	bpl.n	8006c00 <_dtoa_r+0x4c0>
 8006bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf8:	f7f9 fc78 	bl	80004ec <__aeabi_dmul>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	3501      	adds	r5, #1
 8006c00:	1076      	asrs	r6, r6, #1
 8006c02:	3708      	adds	r7, #8
 8006c04:	e76e      	b.n	8006ae4 <_dtoa_r+0x3a4>
 8006c06:	2502      	movs	r5, #2
 8006c08:	e771      	b.n	8006aee <_dtoa_r+0x3ae>
 8006c0a:	4657      	mov	r7, sl
 8006c0c:	4646      	mov	r6, r8
 8006c0e:	e790      	b.n	8006b32 <_dtoa_r+0x3f2>
 8006c10:	4b4d      	ldr	r3, [pc, #308]	; (8006d48 <_dtoa_r+0x608>)
 8006c12:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c16:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d048      	beq.n	8006cb2 <_dtoa_r+0x572>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	2000      	movs	r0, #0
 8006c26:	494e      	ldr	r1, [pc, #312]	; (8006d60 <_dtoa_r+0x620>)
 8006c28:	f7f9 fd8a 	bl	8000740 <__aeabi_ddiv>
 8006c2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c30:	f7f9 faa4 	bl	800017c <__aeabi_dsub>
 8006c34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c38:	9d06      	ldr	r5, [sp, #24]
 8006c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3e:	f7f9 ff05 	bl	8000a4c <__aeabi_d2iz>
 8006c42:	9011      	str	r0, [sp, #68]	; 0x44
 8006c44:	f7f9 fbe8 	bl	8000418 <__aeabi_i2d>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c50:	f7f9 fa94 	bl	800017c <__aeabi_dsub>
 8006c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5a:	3330      	adds	r3, #48	; 0x30
 8006c5c:	f805 3b01 	strb.w	r3, [r5], #1
 8006c60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c64:	f7f9 feb4 	bl	80009d0 <__aeabi_dcmplt>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d163      	bne.n	8006d34 <_dtoa_r+0x5f4>
 8006c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c70:	2000      	movs	r0, #0
 8006c72:	4937      	ldr	r1, [pc, #220]	; (8006d50 <_dtoa_r+0x610>)
 8006c74:	f7f9 fa82 	bl	800017c <__aeabi_dsub>
 8006c78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c7c:	f7f9 fea8 	bl	80009d0 <__aeabi_dcmplt>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f040 80b5 	bne.w	8006df0 <_dtoa_r+0x6b0>
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	1aeb      	subs	r3, r5, r3
 8006c8a:	429e      	cmp	r6, r3
 8006c8c:	f77f af7c 	ble.w	8006b88 <_dtoa_r+0x448>
 8006c90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c94:	2200      	movs	r2, #0
 8006c96:	4b2f      	ldr	r3, [pc, #188]	; (8006d54 <_dtoa_r+0x614>)
 8006c98:	f7f9 fc28 	bl	80004ec <__aeabi_dmul>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca6:	4b2b      	ldr	r3, [pc, #172]	; (8006d54 <_dtoa_r+0x614>)
 8006ca8:	f7f9 fc20 	bl	80004ec <__aeabi_dmul>
 8006cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb0:	e7c3      	b.n	8006c3a <_dtoa_r+0x4fa>
 8006cb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cb6:	f7f9 fc19 	bl	80004ec <__aeabi_dmul>
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006cc0:	199d      	adds	r5, r3, r6
 8006cc2:	461e      	mov	r6, r3
 8006cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc8:	f7f9 fec0 	bl	8000a4c <__aeabi_d2iz>
 8006ccc:	9011      	str	r0, [sp, #68]	; 0x44
 8006cce:	f7f9 fba3 	bl	8000418 <__aeabi_i2d>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cda:	f7f9 fa4f 	bl	800017c <__aeabi_dsub>
 8006cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce4:	3330      	adds	r3, #48	; 0x30
 8006ce6:	f806 3b01 	strb.w	r3, [r6], #1
 8006cea:	42ae      	cmp	r6, r5
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	d124      	bne.n	8006d3c <_dtoa_r+0x5fc>
 8006cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <_dtoa_r+0x620>)
 8006cf8:	f7f9 fa42 	bl	8000180 <__adddf3>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d04:	f7f9 fe82 	bl	8000a0c <__aeabi_dcmpgt>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d171      	bne.n	8006df0 <_dtoa_r+0x6b0>
 8006d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d10:	2000      	movs	r0, #0
 8006d12:	4913      	ldr	r1, [pc, #76]	; (8006d60 <_dtoa_r+0x620>)
 8006d14:	f7f9 fa32 	bl	800017c <__aeabi_dsub>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d20:	f7f9 fe56 	bl	80009d0 <__aeabi_dcmplt>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	f43f af2f 	beq.w	8006b88 <_dtoa_r+0x448>
 8006d2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d2e:	1e6a      	subs	r2, r5, #1
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d001      	beq.n	8006d38 <_dtoa_r+0x5f8>
 8006d34:	46ba      	mov	sl, r7
 8006d36:	e04a      	b.n	8006dce <_dtoa_r+0x68e>
 8006d38:	4615      	mov	r5, r2
 8006d3a:	e7f6      	b.n	8006d2a <_dtoa_r+0x5ea>
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <_dtoa_r+0x614>)
 8006d3e:	f7f9 fbd5 	bl	80004ec <__aeabi_dmul>
 8006d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d46:	e7bd      	b.n	8006cc4 <_dtoa_r+0x584>
 8006d48:	080095f0 	.word	0x080095f0
 8006d4c:	080095c8 	.word	0x080095c8
 8006d50:	3ff00000 	.word	0x3ff00000
 8006d54:	40240000 	.word	0x40240000
 8006d58:	401c0000 	.word	0x401c0000
 8006d5c:	40140000 	.word	0x40140000
 8006d60:	3fe00000 	.word	0x3fe00000
 8006d64:	9d06      	ldr	r5, [sp, #24]
 8006d66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fce5 	bl	8000740 <__aeabi_ddiv>
 8006d76:	f7f9 fe69 	bl	8000a4c <__aeabi_d2iz>
 8006d7a:	4681      	mov	r9, r0
 8006d7c:	f7f9 fb4c 	bl	8000418 <__aeabi_i2d>
 8006d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d84:	f7f9 fbb2 	bl	80004ec <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	4639      	mov	r1, r7
 8006d90:	f7f9 f9f4 	bl	800017c <__aeabi_dsub>
 8006d94:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006d98:	f805 6b01 	strb.w	r6, [r5], #1
 8006d9c:	9e06      	ldr	r6, [sp, #24]
 8006d9e:	4602      	mov	r2, r0
 8006da0:	1bae      	subs	r6, r5, r6
 8006da2:	45b0      	cmp	r8, r6
 8006da4:	460b      	mov	r3, r1
 8006da6:	d135      	bne.n	8006e14 <_dtoa_r+0x6d4>
 8006da8:	f7f9 f9ea 	bl	8000180 <__adddf3>
 8006dac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006db0:	4606      	mov	r6, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	f7f9 fe2a 	bl	8000a0c <__aeabi_dcmpgt>
 8006db8:	b9c8      	cbnz	r0, 8006dee <_dtoa_r+0x6ae>
 8006dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fdfb 	bl	80009bc <__aeabi_dcmpeq>
 8006dc6:	b110      	cbz	r0, 8006dce <_dtoa_r+0x68e>
 8006dc8:	f019 0f01 	tst.w	r9, #1
 8006dcc:	d10f      	bne.n	8006dee <_dtoa_r+0x6ae>
 8006dce:	4659      	mov	r1, fp
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fae2 	bl	800739a <_Bfree>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006dda:	702b      	strb	r3, [r5, #0]
 8006ddc:	f10a 0301 	add.w	r3, sl, #1
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f43f acf3 	beq.w	80067d0 <_dtoa_r+0x90>
 8006dea:	601d      	str	r5, [r3, #0]
 8006dec:	e4f0      	b.n	80067d0 <_dtoa_r+0x90>
 8006dee:	4657      	mov	r7, sl
 8006df0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006df4:	1e6b      	subs	r3, r5, #1
 8006df6:	2a39      	cmp	r2, #57	; 0x39
 8006df8:	d106      	bne.n	8006e08 <_dtoa_r+0x6c8>
 8006dfa:	9a06      	ldr	r2, [sp, #24]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d107      	bne.n	8006e10 <_dtoa_r+0x6d0>
 8006e00:	2330      	movs	r3, #48	; 0x30
 8006e02:	7013      	strb	r3, [r2, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	3701      	adds	r7, #1
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e791      	b.n	8006d34 <_dtoa_r+0x5f4>
 8006e10:	461d      	mov	r5, r3
 8006e12:	e7ed      	b.n	8006df0 <_dtoa_r+0x6b0>
 8006e14:	2200      	movs	r2, #0
 8006e16:	4b99      	ldr	r3, [pc, #612]	; (800707c <_dtoa_r+0x93c>)
 8006e18:	f7f9 fb68 	bl	80004ec <__aeabi_dmul>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4606      	mov	r6, r0
 8006e22:	460f      	mov	r7, r1
 8006e24:	f7f9 fdca 	bl	80009bc <__aeabi_dcmpeq>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d09e      	beq.n	8006d6a <_dtoa_r+0x62a>
 8006e2c:	e7cf      	b.n	8006dce <_dtoa_r+0x68e>
 8006e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	f000 8088 	beq.w	8006f46 <_dtoa_r+0x806>
 8006e36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e38:	2a01      	cmp	r2, #1
 8006e3a:	dc6d      	bgt.n	8006f18 <_dtoa_r+0x7d8>
 8006e3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d066      	beq.n	8006f10 <_dtoa_r+0x7d0>
 8006e42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e46:	464d      	mov	r5, r9
 8006e48:	9e08      	ldr	r6, [sp, #32]
 8006e4a:	9a07      	ldr	r2, [sp, #28]
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	441a      	add	r2, r3
 8006e50:	4620      	mov	r0, r4
 8006e52:	4499      	add	r9, r3
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	f000 fb40 	bl	80074da <__i2b>
 8006e5a:	4607      	mov	r7, r0
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	dd0b      	ble.n	8006e78 <_dtoa_r+0x738>
 8006e60:	9b07      	ldr	r3, [sp, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd08      	ble.n	8006e78 <_dtoa_r+0x738>
 8006e66:	42ab      	cmp	r3, r5
 8006e68:	bfa8      	it	ge
 8006e6a:	462b      	movge	r3, r5
 8006e6c:	9a07      	ldr	r2, [sp, #28]
 8006e6e:	eba9 0903 	sub.w	r9, r9, r3
 8006e72:	1aed      	subs	r5, r5, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	9307      	str	r3, [sp, #28]
 8006e78:	9b08      	ldr	r3, [sp, #32]
 8006e7a:	b1eb      	cbz	r3, 8006eb8 <_dtoa_r+0x778>
 8006e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d065      	beq.n	8006f4e <_dtoa_r+0x80e>
 8006e82:	b18e      	cbz	r6, 8006ea8 <_dtoa_r+0x768>
 8006e84:	4639      	mov	r1, r7
 8006e86:	4632      	mov	r2, r6
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fbc5 	bl	8007618 <__pow5mult>
 8006e8e:	465a      	mov	r2, fp
 8006e90:	4601      	mov	r1, r0
 8006e92:	4607      	mov	r7, r0
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 fb29 	bl	80074ec <__multiply>
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 fa7b 	bl	800739a <_Bfree>
 8006ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea6:	469b      	mov	fp, r3
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	1b9a      	subs	r2, r3, r6
 8006eac:	d004      	beq.n	8006eb8 <_dtoa_r+0x778>
 8006eae:	4659      	mov	r1, fp
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fbb1 	bl	8007618 <__pow5mult>
 8006eb6:	4683      	mov	fp, r0
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 fb0d 	bl	80074da <__i2b>
 8006ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 81c6 	beq.w	8007256 <_dtoa_r+0xb16>
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4601      	mov	r1, r0
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fba2 	bl	8007618 <__pow5mult>
 8006ed4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	dc3e      	bgt.n	8006f5a <_dtoa_r+0x81a>
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d137      	bne.n	8006f52 <_dtoa_r+0x812>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d134      	bne.n	8006f56 <_dtoa_r+0x816>
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	0d1b      	lsrs	r3, r3, #20
 8006ef4:	051b      	lsls	r3, r3, #20
 8006ef6:	b12b      	cbz	r3, 8006f04 <_dtoa_r+0x7c4>
 8006ef8:	9b07      	ldr	r3, [sp, #28]
 8006efa:	f109 0901 	add.w	r9, r9, #1
 8006efe:	3301      	adds	r3, #1
 8006f00:	9307      	str	r3, [sp, #28]
 8006f02:	2301      	movs	r3, #1
 8006f04:	9308      	str	r3, [sp, #32]
 8006f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d128      	bne.n	8006f5e <_dtoa_r+0x81e>
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	e02e      	b.n	8006f6e <_dtoa_r+0x82e>
 8006f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f16:	e796      	b.n	8006e46 <_dtoa_r+0x706>
 8006f18:	9b08      	ldr	r3, [sp, #32]
 8006f1a:	f108 36ff 	add.w	r6, r8, #4294967295
 8006f1e:	42b3      	cmp	r3, r6
 8006f20:	bfb7      	itett	lt
 8006f22:	9b08      	ldrlt	r3, [sp, #32]
 8006f24:	1b9e      	subge	r6, r3, r6
 8006f26:	1af2      	sublt	r2, r6, r3
 8006f28:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006f2a:	bfbf      	itttt	lt
 8006f2c:	9608      	strlt	r6, [sp, #32]
 8006f2e:	189b      	addlt	r3, r3, r2
 8006f30:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006f32:	2600      	movlt	r6, #0
 8006f34:	f1b8 0f00 	cmp.w	r8, #0
 8006f38:	bfb9      	ittee	lt
 8006f3a:	eba9 0508 	sublt.w	r5, r9, r8
 8006f3e:	2300      	movlt	r3, #0
 8006f40:	464d      	movge	r5, r9
 8006f42:	4643      	movge	r3, r8
 8006f44:	e781      	b.n	8006e4a <_dtoa_r+0x70a>
 8006f46:	9e08      	ldr	r6, [sp, #32]
 8006f48:	464d      	mov	r5, r9
 8006f4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f4c:	e786      	b.n	8006e5c <_dtoa_r+0x71c>
 8006f4e:	9a08      	ldr	r2, [sp, #32]
 8006f50:	e7ad      	b.n	8006eae <_dtoa_r+0x76e>
 8006f52:	2300      	movs	r3, #0
 8006f54:	e7d6      	b.n	8006f04 <_dtoa_r+0x7c4>
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	e7d4      	b.n	8006f04 <_dtoa_r+0x7c4>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9308      	str	r3, [sp, #32]
 8006f5e:	6933      	ldr	r3, [r6, #16]
 8006f60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f64:	6918      	ldr	r0, [r3, #16]
 8006f66:	f000 fa6a 	bl	800743e <__hi0bits>
 8006f6a:	f1c0 0020 	rsb	r0, r0, #32
 8006f6e:	9b07      	ldr	r3, [sp, #28]
 8006f70:	4418      	add	r0, r3
 8006f72:	f010 001f 	ands.w	r0, r0, #31
 8006f76:	d047      	beq.n	8007008 <_dtoa_r+0x8c8>
 8006f78:	f1c0 0320 	rsb	r3, r0, #32
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	dd3b      	ble.n	8006ff8 <_dtoa_r+0x8b8>
 8006f80:	9b07      	ldr	r3, [sp, #28]
 8006f82:	f1c0 001c 	rsb	r0, r0, #28
 8006f86:	4481      	add	r9, r0
 8006f88:	4405      	add	r5, r0
 8006f8a:	4403      	add	r3, r0
 8006f8c:	9307      	str	r3, [sp, #28]
 8006f8e:	f1b9 0f00 	cmp.w	r9, #0
 8006f92:	dd05      	ble.n	8006fa0 <_dtoa_r+0x860>
 8006f94:	4659      	mov	r1, fp
 8006f96:	464a      	mov	r2, r9
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fb8b 	bl	80076b4 <__lshift>
 8006f9e:	4683      	mov	fp, r0
 8006fa0:	9b07      	ldr	r3, [sp, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	dd05      	ble.n	8006fb2 <_dtoa_r+0x872>
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 fb82 	bl	80076b4 <__lshift>
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb4:	b353      	cbz	r3, 800700c <_dtoa_r+0x8cc>
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4658      	mov	r0, fp
 8006fba:	f000 fbcf 	bl	800775c <__mcmp>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	da24      	bge.n	800700c <_dtoa_r+0x8cc>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	4659      	mov	r1, fp
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 f9fd 	bl	80073c8 <__multadd>
 8006fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fd4:	4683      	mov	fp, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8144 	beq.w	8007264 <_dtoa_r+0xb24>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4639      	mov	r1, r7
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 f9f0 	bl	80073c8 <__multadd>
 8006fe8:	9b04      	ldr	r3, [sp, #16]
 8006fea:	4607      	mov	r7, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dc4d      	bgt.n	800708c <_dtoa_r+0x94c>
 8006ff0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	dd4a      	ble.n	800708c <_dtoa_r+0x94c>
 8006ff6:	e011      	b.n	800701c <_dtoa_r+0x8dc>
 8006ff8:	d0c9      	beq.n	8006f8e <_dtoa_r+0x84e>
 8006ffa:	9a07      	ldr	r2, [sp, #28]
 8006ffc:	331c      	adds	r3, #28
 8006ffe:	441a      	add	r2, r3
 8007000:	4499      	add	r9, r3
 8007002:	441d      	add	r5, r3
 8007004:	4613      	mov	r3, r2
 8007006:	e7c1      	b.n	8006f8c <_dtoa_r+0x84c>
 8007008:	4603      	mov	r3, r0
 800700a:	e7f6      	b.n	8006ffa <_dtoa_r+0x8ba>
 800700c:	f1b8 0f00 	cmp.w	r8, #0
 8007010:	dc36      	bgt.n	8007080 <_dtoa_r+0x940>
 8007012:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007014:	2b02      	cmp	r3, #2
 8007016:	dd33      	ble.n	8007080 <_dtoa_r+0x940>
 8007018:	f8cd 8010 	str.w	r8, [sp, #16]
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	b963      	cbnz	r3, 800703a <_dtoa_r+0x8fa>
 8007020:	4631      	mov	r1, r6
 8007022:	2205      	movs	r2, #5
 8007024:	4620      	mov	r0, r4
 8007026:	f000 f9cf 	bl	80073c8 <__multadd>
 800702a:	4601      	mov	r1, r0
 800702c:	4606      	mov	r6, r0
 800702e:	4658      	mov	r0, fp
 8007030:	f000 fb94 	bl	800775c <__mcmp>
 8007034:	2800      	cmp	r0, #0
 8007036:	f73f add3 	bgt.w	8006be0 <_dtoa_r+0x4a0>
 800703a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800703c:	9d06      	ldr	r5, [sp, #24]
 800703e:	ea6f 0a03 	mvn.w	sl, r3
 8007042:	f04f 0900 	mov.w	r9, #0
 8007046:	4631      	mov	r1, r6
 8007048:	4620      	mov	r0, r4
 800704a:	f000 f9a6 	bl	800739a <_Bfree>
 800704e:	2f00      	cmp	r7, #0
 8007050:	f43f aebd 	beq.w	8006dce <_dtoa_r+0x68e>
 8007054:	f1b9 0f00 	cmp.w	r9, #0
 8007058:	d005      	beq.n	8007066 <_dtoa_r+0x926>
 800705a:	45b9      	cmp	r9, r7
 800705c:	d003      	beq.n	8007066 <_dtoa_r+0x926>
 800705e:	4649      	mov	r1, r9
 8007060:	4620      	mov	r0, r4
 8007062:	f000 f99a 	bl	800739a <_Bfree>
 8007066:	4639      	mov	r1, r7
 8007068:	4620      	mov	r0, r4
 800706a:	f000 f996 	bl	800739a <_Bfree>
 800706e:	e6ae      	b.n	8006dce <_dtoa_r+0x68e>
 8007070:	2600      	movs	r6, #0
 8007072:	4637      	mov	r7, r6
 8007074:	e7e1      	b.n	800703a <_dtoa_r+0x8fa>
 8007076:	46ba      	mov	sl, r7
 8007078:	4637      	mov	r7, r6
 800707a:	e5b1      	b.n	8006be0 <_dtoa_r+0x4a0>
 800707c:	40240000 	.word	0x40240000
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	f8cd 8010 	str.w	r8, [sp, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 80f3 	beq.w	8007272 <_dtoa_r+0xb32>
 800708c:	2d00      	cmp	r5, #0
 800708e:	dd05      	ble.n	800709c <_dtoa_r+0x95c>
 8007090:	4639      	mov	r1, r7
 8007092:	462a      	mov	r2, r5
 8007094:	4620      	mov	r0, r4
 8007096:	f000 fb0d 	bl	80076b4 <__lshift>
 800709a:	4607      	mov	r7, r0
 800709c:	9b08      	ldr	r3, [sp, #32]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d04c      	beq.n	800713c <_dtoa_r+0x9fc>
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 f944 	bl	8007332 <_Balloc>
 80070aa:	4605      	mov	r5, r0
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	f107 010c 	add.w	r1, r7, #12
 80070b2:	3202      	adds	r2, #2
 80070b4:	0092      	lsls	r2, r2, #2
 80070b6:	300c      	adds	r0, #12
 80070b8:	f000 f930 	bl	800731c <memcpy>
 80070bc:	2201      	movs	r2, #1
 80070be:	4629      	mov	r1, r5
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 faf7 	bl	80076b4 <__lshift>
 80070c6:	46b9      	mov	r9, r7
 80070c8:	4607      	mov	r7, r0
 80070ca:	9b06      	ldr	r3, [sp, #24]
 80070cc:	9307      	str	r3, [sp, #28]
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	9308      	str	r3, [sp, #32]
 80070d6:	4631      	mov	r1, r6
 80070d8:	4658      	mov	r0, fp
 80070da:	f7ff faa1 	bl	8006620 <quorem>
 80070de:	4649      	mov	r1, r9
 80070e0:	4605      	mov	r5, r0
 80070e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80070e6:	4658      	mov	r0, fp
 80070e8:	f000 fb38 	bl	800775c <__mcmp>
 80070ec:	463a      	mov	r2, r7
 80070ee:	9002      	str	r0, [sp, #8]
 80070f0:	4631      	mov	r1, r6
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fb4c 	bl	8007790 <__mdiff>
 80070f8:	68c3      	ldr	r3, [r0, #12]
 80070fa:	4602      	mov	r2, r0
 80070fc:	bb03      	cbnz	r3, 8007140 <_dtoa_r+0xa00>
 80070fe:	4601      	mov	r1, r0
 8007100:	9009      	str	r0, [sp, #36]	; 0x24
 8007102:	4658      	mov	r0, fp
 8007104:	f000 fb2a 	bl	800775c <__mcmp>
 8007108:	4603      	mov	r3, r0
 800710a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800710c:	4611      	mov	r1, r2
 800710e:	4620      	mov	r0, r4
 8007110:	9309      	str	r3, [sp, #36]	; 0x24
 8007112:	f000 f942 	bl	800739a <_Bfree>
 8007116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007118:	b9a3      	cbnz	r3, 8007144 <_dtoa_r+0xa04>
 800711a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800711c:	b992      	cbnz	r2, 8007144 <_dtoa_r+0xa04>
 800711e:	9a08      	ldr	r2, [sp, #32]
 8007120:	b982      	cbnz	r2, 8007144 <_dtoa_r+0xa04>
 8007122:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007126:	d029      	beq.n	800717c <_dtoa_r+0xa3c>
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dd01      	ble.n	8007132 <_dtoa_r+0x9f2>
 800712e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007132:	9b07      	ldr	r3, [sp, #28]
 8007134:	1c5d      	adds	r5, r3, #1
 8007136:	f883 8000 	strb.w	r8, [r3]
 800713a:	e784      	b.n	8007046 <_dtoa_r+0x906>
 800713c:	4638      	mov	r0, r7
 800713e:	e7c2      	b.n	80070c6 <_dtoa_r+0x986>
 8007140:	2301      	movs	r3, #1
 8007142:	e7e3      	b.n	800710c <_dtoa_r+0x9cc>
 8007144:	9a02      	ldr	r2, [sp, #8]
 8007146:	2a00      	cmp	r2, #0
 8007148:	db04      	blt.n	8007154 <_dtoa_r+0xa14>
 800714a:	d123      	bne.n	8007194 <_dtoa_r+0xa54>
 800714c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800714e:	bb0a      	cbnz	r2, 8007194 <_dtoa_r+0xa54>
 8007150:	9a08      	ldr	r2, [sp, #32]
 8007152:	b9fa      	cbnz	r2, 8007194 <_dtoa_r+0xa54>
 8007154:	2b00      	cmp	r3, #0
 8007156:	ddec      	ble.n	8007132 <_dtoa_r+0x9f2>
 8007158:	4659      	mov	r1, fp
 800715a:	2201      	movs	r2, #1
 800715c:	4620      	mov	r0, r4
 800715e:	f000 faa9 	bl	80076b4 <__lshift>
 8007162:	4631      	mov	r1, r6
 8007164:	4683      	mov	fp, r0
 8007166:	f000 faf9 	bl	800775c <__mcmp>
 800716a:	2800      	cmp	r0, #0
 800716c:	dc03      	bgt.n	8007176 <_dtoa_r+0xa36>
 800716e:	d1e0      	bne.n	8007132 <_dtoa_r+0x9f2>
 8007170:	f018 0f01 	tst.w	r8, #1
 8007174:	d0dd      	beq.n	8007132 <_dtoa_r+0x9f2>
 8007176:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800717a:	d1d8      	bne.n	800712e <_dtoa_r+0x9ee>
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	9a07      	ldr	r2, [sp, #28]
 8007180:	1c5d      	adds	r5, r3, #1
 8007182:	2339      	movs	r3, #57	; 0x39
 8007184:	7013      	strb	r3, [r2, #0]
 8007186:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800718a:	1e6a      	subs	r2, r5, #1
 800718c:	2b39      	cmp	r3, #57	; 0x39
 800718e:	d04d      	beq.n	800722c <_dtoa_r+0xaec>
 8007190:	3301      	adds	r3, #1
 8007192:	e052      	b.n	800723a <_dtoa_r+0xafa>
 8007194:	9a07      	ldr	r2, [sp, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f102 0501 	add.w	r5, r2, #1
 800719c:	dd06      	ble.n	80071ac <_dtoa_r+0xa6c>
 800719e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80071a2:	d0eb      	beq.n	800717c <_dtoa_r+0xa3c>
 80071a4:	f108 0801 	add.w	r8, r8, #1
 80071a8:	9b07      	ldr	r3, [sp, #28]
 80071aa:	e7c4      	b.n	8007136 <_dtoa_r+0x9f6>
 80071ac:	9b06      	ldr	r3, [sp, #24]
 80071ae:	9a04      	ldr	r2, [sp, #16]
 80071b0:	1aeb      	subs	r3, r5, r3
 80071b2:	4293      	cmp	r3, r2
 80071b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80071b8:	d021      	beq.n	80071fe <_dtoa_r+0xabe>
 80071ba:	4659      	mov	r1, fp
 80071bc:	2300      	movs	r3, #0
 80071be:	220a      	movs	r2, #10
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 f901 	bl	80073c8 <__multadd>
 80071c6:	45b9      	cmp	r9, r7
 80071c8:	4683      	mov	fp, r0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	f04f 020a 	mov.w	r2, #10
 80071d2:	4649      	mov	r1, r9
 80071d4:	4620      	mov	r0, r4
 80071d6:	d105      	bne.n	80071e4 <_dtoa_r+0xaa4>
 80071d8:	f000 f8f6 	bl	80073c8 <__multadd>
 80071dc:	4681      	mov	r9, r0
 80071de:	4607      	mov	r7, r0
 80071e0:	9507      	str	r5, [sp, #28]
 80071e2:	e778      	b.n	80070d6 <_dtoa_r+0x996>
 80071e4:	f000 f8f0 	bl	80073c8 <__multadd>
 80071e8:	4639      	mov	r1, r7
 80071ea:	4681      	mov	r9, r0
 80071ec:	2300      	movs	r3, #0
 80071ee:	220a      	movs	r2, #10
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 f8e9 	bl	80073c8 <__multadd>
 80071f6:	4607      	mov	r7, r0
 80071f8:	e7f2      	b.n	80071e0 <_dtoa_r+0xaa0>
 80071fa:	f04f 0900 	mov.w	r9, #0
 80071fe:	4659      	mov	r1, fp
 8007200:	2201      	movs	r2, #1
 8007202:	4620      	mov	r0, r4
 8007204:	f000 fa56 	bl	80076b4 <__lshift>
 8007208:	4631      	mov	r1, r6
 800720a:	4683      	mov	fp, r0
 800720c:	f000 faa6 	bl	800775c <__mcmp>
 8007210:	2800      	cmp	r0, #0
 8007212:	dcb8      	bgt.n	8007186 <_dtoa_r+0xa46>
 8007214:	d102      	bne.n	800721c <_dtoa_r+0xadc>
 8007216:	f018 0f01 	tst.w	r8, #1
 800721a:	d1b4      	bne.n	8007186 <_dtoa_r+0xa46>
 800721c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007220:	1e6a      	subs	r2, r5, #1
 8007222:	2b30      	cmp	r3, #48	; 0x30
 8007224:	f47f af0f 	bne.w	8007046 <_dtoa_r+0x906>
 8007228:	4615      	mov	r5, r2
 800722a:	e7f7      	b.n	800721c <_dtoa_r+0xadc>
 800722c:	9b06      	ldr	r3, [sp, #24]
 800722e:	4293      	cmp	r3, r2
 8007230:	d105      	bne.n	800723e <_dtoa_r+0xafe>
 8007232:	2331      	movs	r3, #49	; 0x31
 8007234:	9a06      	ldr	r2, [sp, #24]
 8007236:	f10a 0a01 	add.w	sl, sl, #1
 800723a:	7013      	strb	r3, [r2, #0]
 800723c:	e703      	b.n	8007046 <_dtoa_r+0x906>
 800723e:	4615      	mov	r5, r2
 8007240:	e7a1      	b.n	8007186 <_dtoa_r+0xa46>
 8007242:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <_dtoa_r+0xb60>)
 8007244:	f7ff bae1 	b.w	800680a <_dtoa_r+0xca>
 8007248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800724a:	2b00      	cmp	r3, #0
 800724c:	f47f aabb 	bne.w	80067c6 <_dtoa_r+0x86>
 8007250:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <_dtoa_r+0xb64>)
 8007252:	f7ff bada 	b.w	800680a <_dtoa_r+0xca>
 8007256:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007258:	2b01      	cmp	r3, #1
 800725a:	f77f ae3f 	ble.w	8006edc <_dtoa_r+0x79c>
 800725e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	e653      	b.n	8006f0c <_dtoa_r+0x7cc>
 8007264:	9b04      	ldr	r3, [sp, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	dc03      	bgt.n	8007272 <_dtoa_r+0xb32>
 800726a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800726c:	2b02      	cmp	r3, #2
 800726e:	f73f aed5 	bgt.w	800701c <_dtoa_r+0x8dc>
 8007272:	9d06      	ldr	r5, [sp, #24]
 8007274:	4631      	mov	r1, r6
 8007276:	4658      	mov	r0, fp
 8007278:	f7ff f9d2 	bl	8006620 <quorem>
 800727c:	9b06      	ldr	r3, [sp, #24]
 800727e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007282:	f805 8b01 	strb.w	r8, [r5], #1
 8007286:	9a04      	ldr	r2, [sp, #16]
 8007288:	1aeb      	subs	r3, r5, r3
 800728a:	429a      	cmp	r2, r3
 800728c:	ddb5      	ble.n	80071fa <_dtoa_r+0xaba>
 800728e:	4659      	mov	r1, fp
 8007290:	2300      	movs	r3, #0
 8007292:	220a      	movs	r2, #10
 8007294:	4620      	mov	r0, r4
 8007296:	f000 f897 	bl	80073c8 <__multadd>
 800729a:	4683      	mov	fp, r0
 800729c:	e7ea      	b.n	8007274 <_dtoa_r+0xb34>
 800729e:	bf00      	nop
 80072a0:	08009588 	.word	0x08009588
 80072a4:	080095ac 	.word	0x080095ac

080072a8 <__locale_ctype_ptr_l>:
 80072a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80072ac:	4770      	bx	lr
	...

080072b0 <_localeconv_r>:
 80072b0:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <_localeconv_r+0x14>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6a18      	ldr	r0, [r3, #32]
 80072b6:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <_localeconv_r+0x18>)
 80072b8:	2800      	cmp	r0, #0
 80072ba:	bf08      	it	eq
 80072bc:	4618      	moveq	r0, r3
 80072be:	30f0      	adds	r0, #240	; 0xf0
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	2000004c 	.word	0x2000004c
 80072c8:	200000b0 	.word	0x200000b0

080072cc <malloc>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <malloc+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f000 bb65 	b.w	80079a0 <_malloc_r>
 80072d6:	bf00      	nop
 80072d8:	2000004c 	.word	0x2000004c

080072dc <__ascii_mbtowc>:
 80072dc:	b082      	sub	sp, #8
 80072de:	b901      	cbnz	r1, 80072e2 <__ascii_mbtowc+0x6>
 80072e0:	a901      	add	r1, sp, #4
 80072e2:	b142      	cbz	r2, 80072f6 <__ascii_mbtowc+0x1a>
 80072e4:	b14b      	cbz	r3, 80072fa <__ascii_mbtowc+0x1e>
 80072e6:	7813      	ldrb	r3, [r2, #0]
 80072e8:	600b      	str	r3, [r1, #0]
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	1c10      	adds	r0, r2, #0
 80072ee:	bf18      	it	ne
 80072f0:	2001      	movne	r0, #1
 80072f2:	b002      	add	sp, #8
 80072f4:	4770      	bx	lr
 80072f6:	4610      	mov	r0, r2
 80072f8:	e7fb      	b.n	80072f2 <__ascii_mbtowc+0x16>
 80072fa:	f06f 0001 	mvn.w	r0, #1
 80072fe:	e7f8      	b.n	80072f2 <__ascii_mbtowc+0x16>

08007300 <memchr>:
 8007300:	b510      	push	{r4, lr}
 8007302:	b2c9      	uxtb	r1, r1
 8007304:	4402      	add	r2, r0
 8007306:	4290      	cmp	r0, r2
 8007308:	4603      	mov	r3, r0
 800730a:	d101      	bne.n	8007310 <memchr+0x10>
 800730c:	2300      	movs	r3, #0
 800730e:	e003      	b.n	8007318 <memchr+0x18>
 8007310:	781c      	ldrb	r4, [r3, #0]
 8007312:	3001      	adds	r0, #1
 8007314:	428c      	cmp	r4, r1
 8007316:	d1f6      	bne.n	8007306 <memchr+0x6>
 8007318:	4618      	mov	r0, r3
 800731a:	bd10      	pop	{r4, pc}

0800731c <memcpy>:
 800731c:	b510      	push	{r4, lr}
 800731e:	1e43      	subs	r3, r0, #1
 8007320:	440a      	add	r2, r1
 8007322:	4291      	cmp	r1, r2
 8007324:	d100      	bne.n	8007328 <memcpy+0xc>
 8007326:	bd10      	pop	{r4, pc}
 8007328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007330:	e7f7      	b.n	8007322 <memcpy+0x6>

08007332 <_Balloc>:
 8007332:	b570      	push	{r4, r5, r6, lr}
 8007334:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007336:	4604      	mov	r4, r0
 8007338:	460e      	mov	r6, r1
 800733a:	b93d      	cbnz	r5, 800734c <_Balloc+0x1a>
 800733c:	2010      	movs	r0, #16
 800733e:	f7ff ffc5 	bl	80072cc <malloc>
 8007342:	6260      	str	r0, [r4, #36]	; 0x24
 8007344:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007348:	6005      	str	r5, [r0, #0]
 800734a:	60c5      	str	r5, [r0, #12]
 800734c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800734e:	68eb      	ldr	r3, [r5, #12]
 8007350:	b183      	cbz	r3, 8007374 <_Balloc+0x42>
 8007352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800735a:	b9b8      	cbnz	r0, 800738c <_Balloc+0x5a>
 800735c:	2101      	movs	r1, #1
 800735e:	fa01 f506 	lsl.w	r5, r1, r6
 8007362:	1d6a      	adds	r2, r5, #5
 8007364:	0092      	lsls	r2, r2, #2
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fabf 	bl	80078ea <_calloc_r>
 800736c:	b160      	cbz	r0, 8007388 <_Balloc+0x56>
 800736e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007372:	e00e      	b.n	8007392 <_Balloc+0x60>
 8007374:	2221      	movs	r2, #33	; 0x21
 8007376:	2104      	movs	r1, #4
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fab6 	bl	80078ea <_calloc_r>
 800737e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007380:	60e8      	str	r0, [r5, #12]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e4      	bne.n	8007352 <_Balloc+0x20>
 8007388:	2000      	movs	r0, #0
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	6802      	ldr	r2, [r0, #0]
 800738e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007392:	2300      	movs	r3, #0
 8007394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007398:	e7f7      	b.n	800738a <_Balloc+0x58>

0800739a <_Bfree>:
 800739a:	b570      	push	{r4, r5, r6, lr}
 800739c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800739e:	4606      	mov	r6, r0
 80073a0:	460d      	mov	r5, r1
 80073a2:	b93c      	cbnz	r4, 80073b4 <_Bfree+0x1a>
 80073a4:	2010      	movs	r0, #16
 80073a6:	f7ff ff91 	bl	80072cc <malloc>
 80073aa:	6270      	str	r0, [r6, #36]	; 0x24
 80073ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b0:	6004      	str	r4, [r0, #0]
 80073b2:	60c4      	str	r4, [r0, #12]
 80073b4:	b13d      	cbz	r5, 80073c6 <_Bfree+0x2c>
 80073b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80073b8:	686a      	ldr	r2, [r5, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073c0:	6029      	str	r1, [r5, #0]
 80073c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80073c6:	bd70      	pop	{r4, r5, r6, pc}

080073c8 <__multadd>:
 80073c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073cc:	461f      	mov	r7, r3
 80073ce:	4606      	mov	r6, r0
 80073d0:	460c      	mov	r4, r1
 80073d2:	2300      	movs	r3, #0
 80073d4:	690d      	ldr	r5, [r1, #16]
 80073d6:	f101 0c14 	add.w	ip, r1, #20
 80073da:	f8dc 0000 	ldr.w	r0, [ip]
 80073de:	3301      	adds	r3, #1
 80073e0:	b281      	uxth	r1, r0
 80073e2:	fb02 7101 	mla	r1, r2, r1, r7
 80073e6:	0c00      	lsrs	r0, r0, #16
 80073e8:	0c0f      	lsrs	r7, r1, #16
 80073ea:	fb02 7000 	mla	r0, r2, r0, r7
 80073ee:	b289      	uxth	r1, r1
 80073f0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80073f4:	429d      	cmp	r5, r3
 80073f6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80073fa:	f84c 1b04 	str.w	r1, [ip], #4
 80073fe:	dcec      	bgt.n	80073da <__multadd+0x12>
 8007400:	b1d7      	cbz	r7, 8007438 <__multadd+0x70>
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	42ab      	cmp	r3, r5
 8007406:	dc12      	bgt.n	800742e <__multadd+0x66>
 8007408:	6861      	ldr	r1, [r4, #4]
 800740a:	4630      	mov	r0, r6
 800740c:	3101      	adds	r1, #1
 800740e:	f7ff ff90 	bl	8007332 <_Balloc>
 8007412:	4680      	mov	r8, r0
 8007414:	6922      	ldr	r2, [r4, #16]
 8007416:	f104 010c 	add.w	r1, r4, #12
 800741a:	3202      	adds	r2, #2
 800741c:	0092      	lsls	r2, r2, #2
 800741e:	300c      	adds	r0, #12
 8007420:	f7ff ff7c 	bl	800731c <memcpy>
 8007424:	4621      	mov	r1, r4
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ffb7 	bl	800739a <_Bfree>
 800742c:	4644      	mov	r4, r8
 800742e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007432:	3501      	adds	r5, #1
 8007434:	615f      	str	r7, [r3, #20]
 8007436:	6125      	str	r5, [r4, #16]
 8007438:	4620      	mov	r0, r4
 800743a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800743e <__hi0bits>:
 800743e:	0c02      	lsrs	r2, r0, #16
 8007440:	0412      	lsls	r2, r2, #16
 8007442:	4603      	mov	r3, r0
 8007444:	b9b2      	cbnz	r2, 8007474 <__hi0bits+0x36>
 8007446:	0403      	lsls	r3, r0, #16
 8007448:	2010      	movs	r0, #16
 800744a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800744e:	bf04      	itt	eq
 8007450:	021b      	lsleq	r3, r3, #8
 8007452:	3008      	addeq	r0, #8
 8007454:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007458:	bf04      	itt	eq
 800745a:	011b      	lsleq	r3, r3, #4
 800745c:	3004      	addeq	r0, #4
 800745e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007462:	bf04      	itt	eq
 8007464:	009b      	lsleq	r3, r3, #2
 8007466:	3002      	addeq	r0, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	db06      	blt.n	800747a <__hi0bits+0x3c>
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	d503      	bpl.n	8007478 <__hi0bits+0x3a>
 8007470:	3001      	adds	r0, #1
 8007472:	4770      	bx	lr
 8007474:	2000      	movs	r0, #0
 8007476:	e7e8      	b.n	800744a <__hi0bits+0xc>
 8007478:	2020      	movs	r0, #32
 800747a:	4770      	bx	lr

0800747c <__lo0bits>:
 800747c:	6803      	ldr	r3, [r0, #0]
 800747e:	4601      	mov	r1, r0
 8007480:	f013 0207 	ands.w	r2, r3, #7
 8007484:	d00b      	beq.n	800749e <__lo0bits+0x22>
 8007486:	07da      	lsls	r2, r3, #31
 8007488:	d423      	bmi.n	80074d2 <__lo0bits+0x56>
 800748a:	0798      	lsls	r0, r3, #30
 800748c:	bf49      	itett	mi
 800748e:	085b      	lsrmi	r3, r3, #1
 8007490:	089b      	lsrpl	r3, r3, #2
 8007492:	2001      	movmi	r0, #1
 8007494:	600b      	strmi	r3, [r1, #0]
 8007496:	bf5c      	itt	pl
 8007498:	600b      	strpl	r3, [r1, #0]
 800749a:	2002      	movpl	r0, #2
 800749c:	4770      	bx	lr
 800749e:	b298      	uxth	r0, r3
 80074a0:	b9a8      	cbnz	r0, 80074ce <__lo0bits+0x52>
 80074a2:	2010      	movs	r0, #16
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074aa:	bf04      	itt	eq
 80074ac:	0a1b      	lsreq	r3, r3, #8
 80074ae:	3008      	addeq	r0, #8
 80074b0:	071a      	lsls	r2, r3, #28
 80074b2:	bf04      	itt	eq
 80074b4:	091b      	lsreq	r3, r3, #4
 80074b6:	3004      	addeq	r0, #4
 80074b8:	079a      	lsls	r2, r3, #30
 80074ba:	bf04      	itt	eq
 80074bc:	089b      	lsreq	r3, r3, #2
 80074be:	3002      	addeq	r0, #2
 80074c0:	07da      	lsls	r2, r3, #31
 80074c2:	d402      	bmi.n	80074ca <__lo0bits+0x4e>
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	d006      	beq.n	80074d6 <__lo0bits+0x5a>
 80074c8:	3001      	adds	r0, #1
 80074ca:	600b      	str	r3, [r1, #0]
 80074cc:	4770      	bx	lr
 80074ce:	4610      	mov	r0, r2
 80074d0:	e7e9      	b.n	80074a6 <__lo0bits+0x2a>
 80074d2:	2000      	movs	r0, #0
 80074d4:	4770      	bx	lr
 80074d6:	2020      	movs	r0, #32
 80074d8:	4770      	bx	lr

080074da <__i2b>:
 80074da:	b510      	push	{r4, lr}
 80074dc:	460c      	mov	r4, r1
 80074de:	2101      	movs	r1, #1
 80074e0:	f7ff ff27 	bl	8007332 <_Balloc>
 80074e4:	2201      	movs	r2, #1
 80074e6:	6144      	str	r4, [r0, #20]
 80074e8:	6102      	str	r2, [r0, #16]
 80074ea:	bd10      	pop	{r4, pc}

080074ec <__multiply>:
 80074ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	4614      	mov	r4, r2
 80074f2:	690a      	ldr	r2, [r1, #16]
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	4688      	mov	r8, r1
 80074f8:	429a      	cmp	r2, r3
 80074fa:	bfbe      	ittt	lt
 80074fc:	460b      	movlt	r3, r1
 80074fe:	46a0      	movlt	r8, r4
 8007500:	461c      	movlt	r4, r3
 8007502:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007506:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800750a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800750e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007512:	eb07 0609 	add.w	r6, r7, r9
 8007516:	42b3      	cmp	r3, r6
 8007518:	bfb8      	it	lt
 800751a:	3101      	addlt	r1, #1
 800751c:	f7ff ff09 	bl	8007332 <_Balloc>
 8007520:	f100 0514 	add.w	r5, r0, #20
 8007524:	462b      	mov	r3, r5
 8007526:	2200      	movs	r2, #0
 8007528:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800752c:	4573      	cmp	r3, lr
 800752e:	d316      	bcc.n	800755e <__multiply+0x72>
 8007530:	f104 0214 	add.w	r2, r4, #20
 8007534:	f108 0114 	add.w	r1, r8, #20
 8007538:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800753c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	9201      	str	r2, [sp, #4]
 8007546:	4293      	cmp	r3, r2
 8007548:	d80c      	bhi.n	8007564 <__multiply+0x78>
 800754a:	2e00      	cmp	r6, #0
 800754c:	dd03      	ble.n	8007556 <__multiply+0x6a>
 800754e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007552:	2b00      	cmp	r3, #0
 8007554:	d05d      	beq.n	8007612 <__multiply+0x126>
 8007556:	6106      	str	r6, [r0, #16]
 8007558:	b003      	add	sp, #12
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	f843 2b04 	str.w	r2, [r3], #4
 8007562:	e7e3      	b.n	800752c <__multiply+0x40>
 8007564:	f8b2 b000 	ldrh.w	fp, [r2]
 8007568:	f1bb 0f00 	cmp.w	fp, #0
 800756c:	d023      	beq.n	80075b6 <__multiply+0xca>
 800756e:	4689      	mov	r9, r1
 8007570:	46ac      	mov	ip, r5
 8007572:	f04f 0800 	mov.w	r8, #0
 8007576:	f859 4b04 	ldr.w	r4, [r9], #4
 800757a:	f8dc a000 	ldr.w	sl, [ip]
 800757e:	b2a3      	uxth	r3, r4
 8007580:	fa1f fa8a 	uxth.w	sl, sl
 8007584:	fb0b a303 	mla	r3, fp, r3, sl
 8007588:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800758c:	f8dc 4000 	ldr.w	r4, [ip]
 8007590:	4443      	add	r3, r8
 8007592:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007596:	fb0b 840a 	mla	r4, fp, sl, r8
 800759a:	46e2      	mov	sl, ip
 800759c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075a6:	454f      	cmp	r7, r9
 80075a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80075ac:	f84a 3b04 	str.w	r3, [sl], #4
 80075b0:	d82b      	bhi.n	800760a <__multiply+0x11e>
 80075b2:	f8cc 8004 	str.w	r8, [ip, #4]
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	3204      	adds	r2, #4
 80075ba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80075be:	f1ba 0f00 	cmp.w	sl, #0
 80075c2:	d020      	beq.n	8007606 <__multiply+0x11a>
 80075c4:	4689      	mov	r9, r1
 80075c6:	46a8      	mov	r8, r5
 80075c8:	f04f 0b00 	mov.w	fp, #0
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	f8b9 c000 	ldrh.w	ip, [r9]
 80075d2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	fb0a 440c 	mla	r4, sl, ip, r4
 80075dc:	46c4      	mov	ip, r8
 80075de:	445c      	add	r4, fp
 80075e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80075e4:	f84c 3b04 	str.w	r3, [ip], #4
 80075e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80075ec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	fb0a b303 	mla	r3, sl, r3, fp
 80075f6:	454f      	cmp	r7, r9
 80075f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80075fc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007600:	d805      	bhi.n	800760e <__multiply+0x122>
 8007602:	f8c8 3004 	str.w	r3, [r8, #4]
 8007606:	3504      	adds	r5, #4
 8007608:	e79b      	b.n	8007542 <__multiply+0x56>
 800760a:	46d4      	mov	ip, sl
 800760c:	e7b3      	b.n	8007576 <__multiply+0x8a>
 800760e:	46e0      	mov	r8, ip
 8007610:	e7dd      	b.n	80075ce <__multiply+0xe2>
 8007612:	3e01      	subs	r6, #1
 8007614:	e799      	b.n	800754a <__multiply+0x5e>
	...

08007618 <__pow5mult>:
 8007618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800761c:	4615      	mov	r5, r2
 800761e:	f012 0203 	ands.w	r2, r2, #3
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	d007      	beq.n	8007638 <__pow5mult+0x20>
 8007628:	4c21      	ldr	r4, [pc, #132]	; (80076b0 <__pow5mult+0x98>)
 800762a:	3a01      	subs	r2, #1
 800762c:	2300      	movs	r3, #0
 800762e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007632:	f7ff fec9 	bl	80073c8 <__multadd>
 8007636:	4607      	mov	r7, r0
 8007638:	10ad      	asrs	r5, r5, #2
 800763a:	d035      	beq.n	80076a8 <__pow5mult+0x90>
 800763c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800763e:	b93c      	cbnz	r4, 8007650 <__pow5mult+0x38>
 8007640:	2010      	movs	r0, #16
 8007642:	f7ff fe43 	bl	80072cc <malloc>
 8007646:	6270      	str	r0, [r6, #36]	; 0x24
 8007648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800764c:	6004      	str	r4, [r0, #0]
 800764e:	60c4      	str	r4, [r0, #12]
 8007650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007658:	b94c      	cbnz	r4, 800766e <__pow5mult+0x56>
 800765a:	f240 2171 	movw	r1, #625	; 0x271
 800765e:	4630      	mov	r0, r6
 8007660:	f7ff ff3b 	bl	80074da <__i2b>
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	f8c8 0008 	str.w	r0, [r8, #8]
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	07eb      	lsls	r3, r5, #31
 8007674:	d50a      	bpl.n	800768c <__pow5mult+0x74>
 8007676:	4639      	mov	r1, r7
 8007678:	4622      	mov	r2, r4
 800767a:	4630      	mov	r0, r6
 800767c:	f7ff ff36 	bl	80074ec <__multiply>
 8007680:	4681      	mov	r9, r0
 8007682:	4639      	mov	r1, r7
 8007684:	4630      	mov	r0, r6
 8007686:	f7ff fe88 	bl	800739a <_Bfree>
 800768a:	464f      	mov	r7, r9
 800768c:	106d      	asrs	r5, r5, #1
 800768e:	d00b      	beq.n	80076a8 <__pow5mult+0x90>
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	b938      	cbnz	r0, 80076a4 <__pow5mult+0x8c>
 8007694:	4622      	mov	r2, r4
 8007696:	4621      	mov	r1, r4
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff ff27 	bl	80074ec <__multiply>
 800769e:	6020      	str	r0, [r4, #0]
 80076a0:	f8c0 8000 	str.w	r8, [r0]
 80076a4:	4604      	mov	r4, r0
 80076a6:	e7e4      	b.n	8007672 <__pow5mult+0x5a>
 80076a8:	4638      	mov	r0, r7
 80076aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ae:	bf00      	nop
 80076b0:	080096b8 	.word	0x080096b8

080076b4 <__lshift>:
 80076b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	4607      	mov	r7, r0
 80076bc:	4616      	mov	r6, r2
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076c4:	eb0a 0903 	add.w	r9, sl, r3
 80076c8:	6849      	ldr	r1, [r1, #4]
 80076ca:	68a3      	ldr	r3, [r4, #8]
 80076cc:	f109 0501 	add.w	r5, r9, #1
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	db32      	blt.n	800773a <__lshift+0x86>
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff fe2c 	bl	8007332 <_Balloc>
 80076da:	2300      	movs	r3, #0
 80076dc:	4680      	mov	r8, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	f100 0114 	add.w	r1, r0, #20
 80076e4:	4553      	cmp	r3, sl
 80076e6:	db2b      	blt.n	8007740 <__lshift+0x8c>
 80076e8:	6920      	ldr	r0, [r4, #16]
 80076ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076ee:	f104 0314 	add.w	r3, r4, #20
 80076f2:	f016 021f 	ands.w	r2, r6, #31
 80076f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076fe:	d025      	beq.n	800774c <__lshift+0x98>
 8007700:	2000      	movs	r0, #0
 8007702:	f1c2 0e20 	rsb	lr, r2, #32
 8007706:	468a      	mov	sl, r1
 8007708:	681e      	ldr	r6, [r3, #0]
 800770a:	4096      	lsls	r6, r2
 800770c:	4330      	orrs	r0, r6
 800770e:	f84a 0b04 	str.w	r0, [sl], #4
 8007712:	f853 0b04 	ldr.w	r0, [r3], #4
 8007716:	459c      	cmp	ip, r3
 8007718:	fa20 f00e 	lsr.w	r0, r0, lr
 800771c:	d814      	bhi.n	8007748 <__lshift+0x94>
 800771e:	6048      	str	r0, [r1, #4]
 8007720:	b108      	cbz	r0, 8007726 <__lshift+0x72>
 8007722:	f109 0502 	add.w	r5, r9, #2
 8007726:	3d01      	subs	r5, #1
 8007728:	4638      	mov	r0, r7
 800772a:	f8c8 5010 	str.w	r5, [r8, #16]
 800772e:	4621      	mov	r1, r4
 8007730:	f7ff fe33 	bl	800739a <_Bfree>
 8007734:	4640      	mov	r0, r8
 8007736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773a:	3101      	adds	r1, #1
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	e7c7      	b.n	80076d0 <__lshift+0x1c>
 8007740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007744:	3301      	adds	r3, #1
 8007746:	e7cd      	b.n	80076e4 <__lshift+0x30>
 8007748:	4651      	mov	r1, sl
 800774a:	e7dc      	b.n	8007706 <__lshift+0x52>
 800774c:	3904      	subs	r1, #4
 800774e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007752:	459c      	cmp	ip, r3
 8007754:	f841 2f04 	str.w	r2, [r1, #4]!
 8007758:	d8f9      	bhi.n	800774e <__lshift+0x9a>
 800775a:	e7e4      	b.n	8007726 <__lshift+0x72>

0800775c <__mcmp>:
 800775c:	6903      	ldr	r3, [r0, #16]
 800775e:	690a      	ldr	r2, [r1, #16]
 8007760:	b530      	push	{r4, r5, lr}
 8007762:	1a9b      	subs	r3, r3, r2
 8007764:	d10c      	bne.n	8007780 <__mcmp+0x24>
 8007766:	0092      	lsls	r2, r2, #2
 8007768:	3014      	adds	r0, #20
 800776a:	3114      	adds	r1, #20
 800776c:	1884      	adds	r4, r0, r2
 800776e:	4411      	add	r1, r2
 8007770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007778:	4295      	cmp	r5, r2
 800777a:	d003      	beq.n	8007784 <__mcmp+0x28>
 800777c:	d305      	bcc.n	800778a <__mcmp+0x2e>
 800777e:	2301      	movs	r3, #1
 8007780:	4618      	mov	r0, r3
 8007782:	bd30      	pop	{r4, r5, pc}
 8007784:	42a0      	cmp	r0, r4
 8007786:	d3f3      	bcc.n	8007770 <__mcmp+0x14>
 8007788:	e7fa      	b.n	8007780 <__mcmp+0x24>
 800778a:	f04f 33ff 	mov.w	r3, #4294967295
 800778e:	e7f7      	b.n	8007780 <__mcmp+0x24>

08007790 <__mdiff>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	460d      	mov	r5, r1
 8007796:	4607      	mov	r7, r0
 8007798:	4611      	mov	r1, r2
 800779a:	4628      	mov	r0, r5
 800779c:	4614      	mov	r4, r2
 800779e:	f7ff ffdd 	bl	800775c <__mcmp>
 80077a2:	1e06      	subs	r6, r0, #0
 80077a4:	d108      	bne.n	80077b8 <__mdiff+0x28>
 80077a6:	4631      	mov	r1, r6
 80077a8:	4638      	mov	r0, r7
 80077aa:	f7ff fdc2 	bl	8007332 <_Balloc>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	bfa4      	itt	ge
 80077ba:	4623      	movge	r3, r4
 80077bc:	462c      	movge	r4, r5
 80077be:	4638      	mov	r0, r7
 80077c0:	6861      	ldr	r1, [r4, #4]
 80077c2:	bfa6      	itte	ge
 80077c4:	461d      	movge	r5, r3
 80077c6:	2600      	movge	r6, #0
 80077c8:	2601      	movlt	r6, #1
 80077ca:	f7ff fdb2 	bl	8007332 <_Balloc>
 80077ce:	f04f 0e00 	mov.w	lr, #0
 80077d2:	60c6      	str	r6, [r0, #12]
 80077d4:	692b      	ldr	r3, [r5, #16]
 80077d6:	6926      	ldr	r6, [r4, #16]
 80077d8:	f104 0214 	add.w	r2, r4, #20
 80077dc:	f105 0914 	add.w	r9, r5, #20
 80077e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80077e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80077e8:	f100 0114 	add.w	r1, r0, #20
 80077ec:	f852 ab04 	ldr.w	sl, [r2], #4
 80077f0:	f859 5b04 	ldr.w	r5, [r9], #4
 80077f4:	fa1f f38a 	uxth.w	r3, sl
 80077f8:	4473      	add	r3, lr
 80077fa:	b2ac      	uxth	r4, r5
 80077fc:	1b1b      	subs	r3, r3, r4
 80077fe:	0c2c      	lsrs	r4, r5, #16
 8007800:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007804:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800780e:	45c8      	cmp	r8, r9
 8007810:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007814:	4694      	mov	ip, r2
 8007816:	f841 4b04 	str.w	r4, [r1], #4
 800781a:	d8e7      	bhi.n	80077ec <__mdiff+0x5c>
 800781c:	45bc      	cmp	ip, r7
 800781e:	d304      	bcc.n	800782a <__mdiff+0x9a>
 8007820:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007824:	b183      	cbz	r3, 8007848 <__mdiff+0xb8>
 8007826:	6106      	str	r6, [r0, #16]
 8007828:	e7c4      	b.n	80077b4 <__mdiff+0x24>
 800782a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800782e:	b2a2      	uxth	r2, r4
 8007830:	4472      	add	r2, lr
 8007832:	1413      	asrs	r3, r2, #16
 8007834:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007838:	b292      	uxth	r2, r2
 800783a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800783e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007842:	f841 2b04 	str.w	r2, [r1], #4
 8007846:	e7e9      	b.n	800781c <__mdiff+0x8c>
 8007848:	3e01      	subs	r6, #1
 800784a:	e7e9      	b.n	8007820 <__mdiff+0x90>

0800784c <__d2b>:
 800784c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007850:	461c      	mov	r4, r3
 8007852:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007856:	2101      	movs	r1, #1
 8007858:	4690      	mov	r8, r2
 800785a:	f7ff fd6a 	bl	8007332 <_Balloc>
 800785e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007862:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007866:	4607      	mov	r7, r0
 8007868:	bb34      	cbnz	r4, 80078b8 <__d2b+0x6c>
 800786a:	9201      	str	r2, [sp, #4]
 800786c:	f1b8 0200 	subs.w	r2, r8, #0
 8007870:	d027      	beq.n	80078c2 <__d2b+0x76>
 8007872:	a802      	add	r0, sp, #8
 8007874:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007878:	f7ff fe00 	bl	800747c <__lo0bits>
 800787c:	9900      	ldr	r1, [sp, #0]
 800787e:	b1f0      	cbz	r0, 80078be <__d2b+0x72>
 8007880:	9a01      	ldr	r2, [sp, #4]
 8007882:	f1c0 0320 	rsb	r3, r0, #32
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	430b      	orrs	r3, r1
 800788c:	40c2      	lsrs	r2, r0
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	9201      	str	r2, [sp, #4]
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	bf14      	ite	ne
 8007898:	2102      	movne	r1, #2
 800789a:	2101      	moveq	r1, #1
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	6139      	str	r1, [r7, #16]
 80078a0:	b1c4      	cbz	r4, 80078d4 <__d2b+0x88>
 80078a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80078a6:	4404      	add	r4, r0
 80078a8:	6034      	str	r4, [r6, #0]
 80078aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078ae:	6028      	str	r0, [r5, #0]
 80078b0:	4638      	mov	r0, r7
 80078b2:	b002      	add	sp, #8
 80078b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80078bc:	e7d5      	b.n	800786a <__d2b+0x1e>
 80078be:	6179      	str	r1, [r7, #20]
 80078c0:	e7e7      	b.n	8007892 <__d2b+0x46>
 80078c2:	a801      	add	r0, sp, #4
 80078c4:	f7ff fdda 	bl	800747c <__lo0bits>
 80078c8:	2101      	movs	r1, #1
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	6139      	str	r1, [r7, #16]
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	3020      	adds	r0, #32
 80078d2:	e7e5      	b.n	80078a0 <__d2b+0x54>
 80078d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80078dc:	6030      	str	r0, [r6, #0]
 80078de:	6918      	ldr	r0, [r3, #16]
 80078e0:	f7ff fdad 	bl	800743e <__hi0bits>
 80078e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80078e8:	e7e1      	b.n	80078ae <__d2b+0x62>

080078ea <_calloc_r>:
 80078ea:	b538      	push	{r3, r4, r5, lr}
 80078ec:	fb02 f401 	mul.w	r4, r2, r1
 80078f0:	4621      	mov	r1, r4
 80078f2:	f000 f855 	bl	80079a0 <_malloc_r>
 80078f6:	4605      	mov	r5, r0
 80078f8:	b118      	cbz	r0, 8007902 <_calloc_r+0x18>
 80078fa:	4622      	mov	r2, r4
 80078fc:	2100      	movs	r1, #0
 80078fe:	f7fe f977 	bl	8005bf0 <memset>
 8007902:	4628      	mov	r0, r5
 8007904:	bd38      	pop	{r3, r4, r5, pc}
	...

08007908 <_free_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4605      	mov	r5, r0
 800790c:	2900      	cmp	r1, #0
 800790e:	d043      	beq.n	8007998 <_free_r+0x90>
 8007910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007914:	1f0c      	subs	r4, r1, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	bfb8      	it	lt
 800791a:	18e4      	addlt	r4, r4, r3
 800791c:	f000 fa22 	bl	8007d64 <__malloc_lock>
 8007920:	4a1e      	ldr	r2, [pc, #120]	; (800799c <_free_r+0x94>)
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	4610      	mov	r0, r2
 8007926:	b933      	cbnz	r3, 8007936 <_free_r+0x2e>
 8007928:	6063      	str	r3, [r4, #4]
 800792a:	6014      	str	r4, [r2, #0]
 800792c:	4628      	mov	r0, r5
 800792e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007932:	f000 ba18 	b.w	8007d66 <__malloc_unlock>
 8007936:	42a3      	cmp	r3, r4
 8007938:	d90b      	bls.n	8007952 <_free_r+0x4a>
 800793a:	6821      	ldr	r1, [r4, #0]
 800793c:	1862      	adds	r2, r4, r1
 800793e:	4293      	cmp	r3, r2
 8007940:	bf01      	itttt	eq
 8007942:	681a      	ldreq	r2, [r3, #0]
 8007944:	685b      	ldreq	r3, [r3, #4]
 8007946:	1852      	addeq	r2, r2, r1
 8007948:	6022      	streq	r2, [r4, #0]
 800794a:	6063      	str	r3, [r4, #4]
 800794c:	6004      	str	r4, [r0, #0]
 800794e:	e7ed      	b.n	800792c <_free_r+0x24>
 8007950:	4613      	mov	r3, r2
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	b10a      	cbz	r2, 800795a <_free_r+0x52>
 8007956:	42a2      	cmp	r2, r4
 8007958:	d9fa      	bls.n	8007950 <_free_r+0x48>
 800795a:	6819      	ldr	r1, [r3, #0]
 800795c:	1858      	adds	r0, r3, r1
 800795e:	42a0      	cmp	r0, r4
 8007960:	d10b      	bne.n	800797a <_free_r+0x72>
 8007962:	6820      	ldr	r0, [r4, #0]
 8007964:	4401      	add	r1, r0
 8007966:	1858      	adds	r0, r3, r1
 8007968:	4282      	cmp	r2, r0
 800796a:	6019      	str	r1, [r3, #0]
 800796c:	d1de      	bne.n	800792c <_free_r+0x24>
 800796e:	6810      	ldr	r0, [r2, #0]
 8007970:	6852      	ldr	r2, [r2, #4]
 8007972:	4401      	add	r1, r0
 8007974:	6019      	str	r1, [r3, #0]
 8007976:	605a      	str	r2, [r3, #4]
 8007978:	e7d8      	b.n	800792c <_free_r+0x24>
 800797a:	d902      	bls.n	8007982 <_free_r+0x7a>
 800797c:	230c      	movs	r3, #12
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	e7d4      	b.n	800792c <_free_r+0x24>
 8007982:	6820      	ldr	r0, [r4, #0]
 8007984:	1821      	adds	r1, r4, r0
 8007986:	428a      	cmp	r2, r1
 8007988:	bf01      	itttt	eq
 800798a:	6811      	ldreq	r1, [r2, #0]
 800798c:	6852      	ldreq	r2, [r2, #4]
 800798e:	1809      	addeq	r1, r1, r0
 8007990:	6021      	streq	r1, [r4, #0]
 8007992:	6062      	str	r2, [r4, #4]
 8007994:	605c      	str	r4, [r3, #4]
 8007996:	e7c9      	b.n	800792c <_free_r+0x24>
 8007998:	bd38      	pop	{r3, r4, r5, pc}
 800799a:	bf00      	nop
 800799c:	200002f0 	.word	0x200002f0

080079a0 <_malloc_r>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	1ccd      	adds	r5, r1, #3
 80079a4:	f025 0503 	bic.w	r5, r5, #3
 80079a8:	3508      	adds	r5, #8
 80079aa:	2d0c      	cmp	r5, #12
 80079ac:	bf38      	it	cc
 80079ae:	250c      	movcc	r5, #12
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	4606      	mov	r6, r0
 80079b4:	db01      	blt.n	80079ba <_malloc_r+0x1a>
 80079b6:	42a9      	cmp	r1, r5
 80079b8:	d903      	bls.n	80079c2 <_malloc_r+0x22>
 80079ba:	230c      	movs	r3, #12
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	2000      	movs	r0, #0
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	f000 f9cf 	bl	8007d64 <__malloc_lock>
 80079c6:	4a21      	ldr	r2, [pc, #132]	; (8007a4c <_malloc_r+0xac>)
 80079c8:	6814      	ldr	r4, [r2, #0]
 80079ca:	4621      	mov	r1, r4
 80079cc:	b991      	cbnz	r1, 80079f4 <_malloc_r+0x54>
 80079ce:	4c20      	ldr	r4, [pc, #128]	; (8007a50 <_malloc_r+0xb0>)
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	b91b      	cbnz	r3, 80079dc <_malloc_r+0x3c>
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 f98f 	bl	8007cf8 <_sbrk_r>
 80079da:	6020      	str	r0, [r4, #0]
 80079dc:	4629      	mov	r1, r5
 80079de:	4630      	mov	r0, r6
 80079e0:	f000 f98a 	bl	8007cf8 <_sbrk_r>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d124      	bne.n	8007a32 <_malloc_r+0x92>
 80079e8:	230c      	movs	r3, #12
 80079ea:	4630      	mov	r0, r6
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	f000 f9ba 	bl	8007d66 <__malloc_unlock>
 80079f2:	e7e4      	b.n	80079be <_malloc_r+0x1e>
 80079f4:	680b      	ldr	r3, [r1, #0]
 80079f6:	1b5b      	subs	r3, r3, r5
 80079f8:	d418      	bmi.n	8007a2c <_malloc_r+0x8c>
 80079fa:	2b0b      	cmp	r3, #11
 80079fc:	d90f      	bls.n	8007a1e <_malloc_r+0x7e>
 80079fe:	600b      	str	r3, [r1, #0]
 8007a00:	18cc      	adds	r4, r1, r3
 8007a02:	50cd      	str	r5, [r1, r3]
 8007a04:	4630      	mov	r0, r6
 8007a06:	f000 f9ae 	bl	8007d66 <__malloc_unlock>
 8007a0a:	f104 000b 	add.w	r0, r4, #11
 8007a0e:	1d23      	adds	r3, r4, #4
 8007a10:	f020 0007 	bic.w	r0, r0, #7
 8007a14:	1ac3      	subs	r3, r0, r3
 8007a16:	d0d3      	beq.n	80079c0 <_malloc_r+0x20>
 8007a18:	425a      	negs	r2, r3
 8007a1a:	50e2      	str	r2, [r4, r3]
 8007a1c:	e7d0      	b.n	80079c0 <_malloc_r+0x20>
 8007a1e:	684b      	ldr	r3, [r1, #4]
 8007a20:	428c      	cmp	r4, r1
 8007a22:	bf16      	itet	ne
 8007a24:	6063      	strne	r3, [r4, #4]
 8007a26:	6013      	streq	r3, [r2, #0]
 8007a28:	460c      	movne	r4, r1
 8007a2a:	e7eb      	b.n	8007a04 <_malloc_r+0x64>
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	6849      	ldr	r1, [r1, #4]
 8007a30:	e7cc      	b.n	80079cc <_malloc_r+0x2c>
 8007a32:	1cc4      	adds	r4, r0, #3
 8007a34:	f024 0403 	bic.w	r4, r4, #3
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d005      	beq.n	8007a48 <_malloc_r+0xa8>
 8007a3c:	1a21      	subs	r1, r4, r0
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 f95a 	bl	8007cf8 <_sbrk_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d0cf      	beq.n	80079e8 <_malloc_r+0x48>
 8007a48:	6025      	str	r5, [r4, #0]
 8007a4a:	e7db      	b.n	8007a04 <_malloc_r+0x64>
 8007a4c:	200002f0 	.word	0x200002f0
 8007a50:	200002f4 	.word	0x200002f4

08007a54 <__ssputs_r>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	688e      	ldr	r6, [r1, #8]
 8007a5a:	4682      	mov	sl, r0
 8007a5c:	429e      	cmp	r6, r3
 8007a5e:	460c      	mov	r4, r1
 8007a60:	4690      	mov	r8, r2
 8007a62:	4699      	mov	r9, r3
 8007a64:	d837      	bhi.n	8007ad6 <__ssputs_r+0x82>
 8007a66:	898a      	ldrh	r2, [r1, #12]
 8007a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a6c:	d031      	beq.n	8007ad2 <__ssputs_r+0x7e>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	6825      	ldr	r5, [r4, #0]
 8007a72:	6909      	ldr	r1, [r1, #16]
 8007a74:	1a6f      	subs	r7, r5, r1
 8007a76:	6965      	ldr	r5, [r4, #20]
 8007a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a80:	f109 0301 	add.w	r3, r9, #1
 8007a84:	443b      	add	r3, r7
 8007a86:	429d      	cmp	r5, r3
 8007a88:	bf38      	it	cc
 8007a8a:	461d      	movcc	r5, r3
 8007a8c:	0553      	lsls	r3, r2, #21
 8007a8e:	d530      	bpl.n	8007af2 <__ssputs_r+0x9e>
 8007a90:	4629      	mov	r1, r5
 8007a92:	f7ff ff85 	bl	80079a0 <_malloc_r>
 8007a96:	4606      	mov	r6, r0
 8007a98:	b950      	cbnz	r0, 8007ab0 <__ssputs_r+0x5c>
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	f8ca 3000 	str.w	r3, [sl]
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab0:	463a      	mov	r2, r7
 8007ab2:	6921      	ldr	r1, [r4, #16]
 8007ab4:	f7ff fc32 	bl	800731c <memcpy>
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac2:	81a3      	strh	r3, [r4, #12]
 8007ac4:	6126      	str	r6, [r4, #16]
 8007ac6:	443e      	add	r6, r7
 8007ac8:	6026      	str	r6, [r4, #0]
 8007aca:	464e      	mov	r6, r9
 8007acc:	6165      	str	r5, [r4, #20]
 8007ace:	1bed      	subs	r5, r5, r7
 8007ad0:	60a5      	str	r5, [r4, #8]
 8007ad2:	454e      	cmp	r6, r9
 8007ad4:	d900      	bls.n	8007ad8 <__ssputs_r+0x84>
 8007ad6:	464e      	mov	r6, r9
 8007ad8:	4632      	mov	r2, r6
 8007ada:	4641      	mov	r1, r8
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	f000 f928 	bl	8007d32 <memmove>
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	1b9b      	subs	r3, r3, r6
 8007ae8:	60a3      	str	r3, [r4, #8]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	441e      	add	r6, r3
 8007aee:	6026      	str	r6, [r4, #0]
 8007af0:	e7dc      	b.n	8007aac <__ssputs_r+0x58>
 8007af2:	462a      	mov	r2, r5
 8007af4:	f000 f938 	bl	8007d68 <_realloc_r>
 8007af8:	4606      	mov	r6, r0
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d1e2      	bne.n	8007ac4 <__ssputs_r+0x70>
 8007afe:	6921      	ldr	r1, [r4, #16]
 8007b00:	4650      	mov	r0, sl
 8007b02:	f7ff ff01 	bl	8007908 <_free_r>
 8007b06:	e7c8      	b.n	8007a9a <__ssputs_r+0x46>

08007b08 <_svfiprintf_r>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	461d      	mov	r5, r3
 8007b0e:	898b      	ldrh	r3, [r1, #12]
 8007b10:	b09d      	sub	sp, #116	; 0x74
 8007b12:	061f      	lsls	r7, r3, #24
 8007b14:	4680      	mov	r8, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	4616      	mov	r6, r2
 8007b1a:	d50f      	bpl.n	8007b3c <_svfiprintf_r+0x34>
 8007b1c:	690b      	ldr	r3, [r1, #16]
 8007b1e:	b96b      	cbnz	r3, 8007b3c <_svfiprintf_r+0x34>
 8007b20:	2140      	movs	r1, #64	; 0x40
 8007b22:	f7ff ff3d 	bl	80079a0 <_malloc_r>
 8007b26:	6020      	str	r0, [r4, #0]
 8007b28:	6120      	str	r0, [r4, #16]
 8007b2a:	b928      	cbnz	r0, 8007b38 <_svfiprintf_r+0x30>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	f8c8 3000 	str.w	r3, [r8]
 8007b32:	f04f 30ff 	mov.w	r0, #4294967295
 8007b36:	e0c8      	b.n	8007cca <_svfiprintf_r+0x1c2>
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	6163      	str	r3, [r4, #20]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b40:	2320      	movs	r3, #32
 8007b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b46:	2330      	movs	r3, #48	; 0x30
 8007b48:	f04f 0b01 	mov.w	fp, #1
 8007b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b50:	9503      	str	r5, [sp, #12]
 8007b52:	4637      	mov	r7, r6
 8007b54:	463d      	mov	r5, r7
 8007b56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b5a:	b10b      	cbz	r3, 8007b60 <_svfiprintf_r+0x58>
 8007b5c:	2b25      	cmp	r3, #37	; 0x25
 8007b5e:	d13e      	bne.n	8007bde <_svfiprintf_r+0xd6>
 8007b60:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b64:	d00b      	beq.n	8007b7e <_svfiprintf_r+0x76>
 8007b66:	4653      	mov	r3, sl
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	f7ff ff71 	bl	8007a54 <__ssputs_r>
 8007b72:	3001      	adds	r0, #1
 8007b74:	f000 80a4 	beq.w	8007cc0 <_svfiprintf_r+0x1b8>
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	4453      	add	r3, sl
 8007b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7e:	783b      	ldrb	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 809d 	beq.w	8007cc0 <_svfiprintf_r+0x1b8>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	9307      	str	r3, [sp, #28]
 8007b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b98:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9a:	462f      	mov	r7, r5
 8007b9c:	2205      	movs	r2, #5
 8007b9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ba2:	4850      	ldr	r0, [pc, #320]	; (8007ce4 <_svfiprintf_r+0x1dc>)
 8007ba4:	f7ff fbac 	bl	8007300 <memchr>
 8007ba8:	9b04      	ldr	r3, [sp, #16]
 8007baa:	b9d0      	cbnz	r0, 8007be2 <_svfiprintf_r+0xda>
 8007bac:	06d9      	lsls	r1, r3, #27
 8007bae:	bf44      	itt	mi
 8007bb0:	2220      	movmi	r2, #32
 8007bb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bb6:	071a      	lsls	r2, r3, #28
 8007bb8:	bf44      	itt	mi
 8007bba:	222b      	movmi	r2, #43	; 0x2b
 8007bbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bc0:	782a      	ldrb	r2, [r5, #0]
 8007bc2:	2a2a      	cmp	r2, #42	; 0x2a
 8007bc4:	d015      	beq.n	8007bf2 <_svfiprintf_r+0xea>
 8007bc6:	462f      	mov	r7, r5
 8007bc8:	2000      	movs	r0, #0
 8007bca:	250a      	movs	r5, #10
 8007bcc:	9a07      	ldr	r2, [sp, #28]
 8007bce:	4639      	mov	r1, r7
 8007bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bd4:	3b30      	subs	r3, #48	; 0x30
 8007bd6:	2b09      	cmp	r3, #9
 8007bd8:	d94d      	bls.n	8007c76 <_svfiprintf_r+0x16e>
 8007bda:	b1b8      	cbz	r0, 8007c0c <_svfiprintf_r+0x104>
 8007bdc:	e00f      	b.n	8007bfe <_svfiprintf_r+0xf6>
 8007bde:	462f      	mov	r7, r5
 8007be0:	e7b8      	b.n	8007b54 <_svfiprintf_r+0x4c>
 8007be2:	4a40      	ldr	r2, [pc, #256]	; (8007ce4 <_svfiprintf_r+0x1dc>)
 8007be4:	463d      	mov	r5, r7
 8007be6:	1a80      	subs	r0, r0, r2
 8007be8:	fa0b f000 	lsl.w	r0, fp, r0
 8007bec:	4318      	orrs	r0, r3
 8007bee:	9004      	str	r0, [sp, #16]
 8007bf0:	e7d3      	b.n	8007b9a <_svfiprintf_r+0x92>
 8007bf2:	9a03      	ldr	r2, [sp, #12]
 8007bf4:	1d11      	adds	r1, r2, #4
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	9103      	str	r1, [sp, #12]
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	db01      	blt.n	8007c02 <_svfiprintf_r+0xfa>
 8007bfe:	9207      	str	r2, [sp, #28]
 8007c00:	e004      	b.n	8007c0c <_svfiprintf_r+0x104>
 8007c02:	4252      	negs	r2, r2
 8007c04:	f043 0302 	orr.w	r3, r3, #2
 8007c08:	9207      	str	r2, [sp, #28]
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	783b      	ldrb	r3, [r7, #0]
 8007c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c10:	d10c      	bne.n	8007c2c <_svfiprintf_r+0x124>
 8007c12:	787b      	ldrb	r3, [r7, #1]
 8007c14:	2b2a      	cmp	r3, #42	; 0x2a
 8007c16:	d133      	bne.n	8007c80 <_svfiprintf_r+0x178>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	3702      	adds	r7, #2
 8007c1c:	1d1a      	adds	r2, r3, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	9203      	str	r2, [sp, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfb8      	it	lt
 8007c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	4d2e      	ldr	r5, [pc, #184]	; (8007ce8 <_svfiprintf_r+0x1e0>)
 8007c2e:	2203      	movs	r2, #3
 8007c30:	7839      	ldrb	r1, [r7, #0]
 8007c32:	4628      	mov	r0, r5
 8007c34:	f7ff fb64 	bl	8007300 <memchr>
 8007c38:	b138      	cbz	r0, 8007c4a <_svfiprintf_r+0x142>
 8007c3a:	2340      	movs	r3, #64	; 0x40
 8007c3c:	1b40      	subs	r0, r0, r5
 8007c3e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	3701      	adds	r7, #1
 8007c46:	4303      	orrs	r3, r0
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	7839      	ldrb	r1, [r7, #0]
 8007c4c:	2206      	movs	r2, #6
 8007c4e:	4827      	ldr	r0, [pc, #156]	; (8007cec <_svfiprintf_r+0x1e4>)
 8007c50:	1c7e      	adds	r6, r7, #1
 8007c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c56:	f7ff fb53 	bl	8007300 <memchr>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d038      	beq.n	8007cd0 <_svfiprintf_r+0x1c8>
 8007c5e:	4b24      	ldr	r3, [pc, #144]	; (8007cf0 <_svfiprintf_r+0x1e8>)
 8007c60:	bb13      	cbnz	r3, 8007ca8 <_svfiprintf_r+0x1a0>
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	3307      	adds	r3, #7
 8007c66:	f023 0307 	bic.w	r3, r3, #7
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	9303      	str	r3, [sp, #12]
 8007c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c70:	444b      	add	r3, r9
 8007c72:	9309      	str	r3, [sp, #36]	; 0x24
 8007c74:	e76d      	b.n	8007b52 <_svfiprintf_r+0x4a>
 8007c76:	fb05 3202 	mla	r2, r5, r2, r3
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	e7a6      	b.n	8007bce <_svfiprintf_r+0xc6>
 8007c80:	2300      	movs	r3, #0
 8007c82:	250a      	movs	r5, #10
 8007c84:	4619      	mov	r1, r3
 8007c86:	3701      	adds	r7, #1
 8007c88:	9305      	str	r3, [sp, #20]
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c90:	3a30      	subs	r2, #48	; 0x30
 8007c92:	2a09      	cmp	r2, #9
 8007c94:	d903      	bls.n	8007c9e <_svfiprintf_r+0x196>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0c8      	beq.n	8007c2c <_svfiprintf_r+0x124>
 8007c9a:	9105      	str	r1, [sp, #20]
 8007c9c:	e7c6      	b.n	8007c2c <_svfiprintf_r+0x124>
 8007c9e:	fb05 2101 	mla	r1, r5, r1, r2
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	e7f0      	b.n	8007c8a <_svfiprintf_r+0x182>
 8007ca8:	ab03      	add	r3, sp, #12
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	4622      	mov	r2, r4
 8007cae:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <_svfiprintf_r+0x1ec>)
 8007cb0:	a904      	add	r1, sp, #16
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	f7fe f836 	bl	8005d24 <_printf_float>
 8007cb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	d1d6      	bne.n	8007c6e <_svfiprintf_r+0x166>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	065b      	lsls	r3, r3, #25
 8007cc4:	f53f af35 	bmi.w	8007b32 <_svfiprintf_r+0x2a>
 8007cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cca:	b01d      	add	sp, #116	; 0x74
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	ab03      	add	r3, sp, #12
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <_svfiprintf_r+0x1ec>)
 8007cd8:	a904      	add	r1, sp, #16
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7fe face 	bl	800627c <_printf_i>
 8007ce0:	e7ea      	b.n	8007cb8 <_svfiprintf_r+0x1b0>
 8007ce2:	bf00      	nop
 8007ce4:	080096c4 	.word	0x080096c4
 8007ce8:	080096ca 	.word	0x080096ca
 8007cec:	080096ce 	.word	0x080096ce
 8007cf0:	08005d25 	.word	0x08005d25
 8007cf4:	08007a55 	.word	0x08007a55

08007cf8 <_sbrk_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	4c05      	ldr	r4, [pc, #20]	; (8007d14 <_sbrk_r+0x1c>)
 8007cfe:	4605      	mov	r5, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	f7fb f874 	bl	8002df0 <_sbrk>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_sbrk_r+0x1a>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_sbrk_r+0x1a>
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	20000798 	.word	0x20000798

08007d18 <__ascii_wctomb>:
 8007d18:	b149      	cbz	r1, 8007d2e <__ascii_wctomb+0x16>
 8007d1a:	2aff      	cmp	r2, #255	; 0xff
 8007d1c:	bf8b      	itete	hi
 8007d1e:	238a      	movhi	r3, #138	; 0x8a
 8007d20:	700a      	strbls	r2, [r1, #0]
 8007d22:	6003      	strhi	r3, [r0, #0]
 8007d24:	2001      	movls	r0, #1
 8007d26:	bf88      	it	hi
 8007d28:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d2c:	4770      	bx	lr
 8007d2e:	4608      	mov	r0, r1
 8007d30:	4770      	bx	lr

08007d32 <memmove>:
 8007d32:	4288      	cmp	r0, r1
 8007d34:	b510      	push	{r4, lr}
 8007d36:	eb01 0302 	add.w	r3, r1, r2
 8007d3a:	d807      	bhi.n	8007d4c <memmove+0x1a>
 8007d3c:	1e42      	subs	r2, r0, #1
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	d00a      	beq.n	8007d58 <memmove+0x26>
 8007d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d4a:	e7f8      	b.n	8007d3e <memmove+0xc>
 8007d4c:	4283      	cmp	r3, r0
 8007d4e:	d9f5      	bls.n	8007d3c <memmove+0xa>
 8007d50:	1881      	adds	r1, r0, r2
 8007d52:	1ad2      	subs	r2, r2, r3
 8007d54:	42d3      	cmn	r3, r2
 8007d56:	d100      	bne.n	8007d5a <memmove+0x28>
 8007d58:	bd10      	pop	{r4, pc}
 8007d5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d62:	e7f7      	b.n	8007d54 <memmove+0x22>

08007d64 <__malloc_lock>:
 8007d64:	4770      	bx	lr

08007d66 <__malloc_unlock>:
 8007d66:	4770      	bx	lr

08007d68 <_realloc_r>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	460e      	mov	r6, r1
 8007d70:	b921      	cbnz	r1, 8007d7c <_realloc_r+0x14>
 8007d72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d76:	4611      	mov	r1, r2
 8007d78:	f7ff be12 	b.w	80079a0 <_malloc_r>
 8007d7c:	b922      	cbnz	r2, 8007d88 <_realloc_r+0x20>
 8007d7e:	f7ff fdc3 	bl	8007908 <_free_r>
 8007d82:	4625      	mov	r5, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d88:	f000 f814 	bl	8007db4 <_malloc_usable_size_r>
 8007d8c:	42a0      	cmp	r0, r4
 8007d8e:	d20f      	bcs.n	8007db0 <_realloc_r+0x48>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4638      	mov	r0, r7
 8007d94:	f7ff fe04 	bl	80079a0 <_malloc_r>
 8007d98:	4605      	mov	r5, r0
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d0f2      	beq.n	8007d84 <_realloc_r+0x1c>
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4622      	mov	r2, r4
 8007da2:	f7ff fabb 	bl	800731c <memcpy>
 8007da6:	4631      	mov	r1, r6
 8007da8:	4638      	mov	r0, r7
 8007daa:	f7ff fdad 	bl	8007908 <_free_r>
 8007dae:	e7e9      	b.n	8007d84 <_realloc_r+0x1c>
 8007db0:	4635      	mov	r5, r6
 8007db2:	e7e7      	b.n	8007d84 <_realloc_r+0x1c>

08007db4 <_malloc_usable_size_r>:
 8007db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db8:	1f18      	subs	r0, r3, #4
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bfbc      	itt	lt
 8007dbe:	580b      	ldrlt	r3, [r1, r0]
 8007dc0:	18c0      	addlt	r0, r0, r3
 8007dc2:	4770      	bx	lr

08007dc4 <_init>:
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc6:	bf00      	nop
 8007dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dca:	bc08      	pop	{r3}
 8007dcc:	469e      	mov	lr, r3
 8007dce:	4770      	bx	lr

08007dd0 <_fini>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr
