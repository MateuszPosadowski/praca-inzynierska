
a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a40  08007f68  08007f68  00017f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a8  080099a8  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  080099a8  080099a8  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099a8  080099a8  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080099b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000220  08009bd0  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08009bd0  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff4f  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025b4  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00032750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00033698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019150  00000000  00000000  000344d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb75  00000000  00000000  0004d620  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091a45  00000000  00000000  0005a195  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebbda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af8  00000000  00000000  000ebc58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f4c 	.word	0x08007f4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08007f4c 	.word	0x08007f4c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bfc:	d1ed      	bne.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <sizeofuser>:
uint8_t SecondAdd=0;
int HoursAlarm=0;
int MinutesAlarm=0;

int sizeofuser (userDetails *user)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	int size=0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
	while (user[size].firstname[0] != '\0') size++;
 8001004:	e002      	b.n	800100c <sizeofuser+0x14>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4613      	mov	r3, r2
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f1      	bne.n	8001006 <sizeofuser+0xe>
	return size+1;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <ESP_Init>:
		{  background-color: #dddddd;}</style><table><tr><th>Time</th><th>Date</th></tr>";

/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD, char *STAIP)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b098      	sub	sp, #96	; 0x60
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	char data[80];

	Ringbuf_init();
 800103c:	f000 fe48 	bl	8001cd0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8001040:	4832      	ldr	r0, [pc, #200]	; (800110c <ESP_Init+0xdc>)
 8001042:	f000 ff47 	bl	8001ed4 <Uart_sendstring>
	HAL_Delay(2000);
 8001046:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800104a:	f002 f859 	bl	8003100 <HAL_Delay>

	/********* AT **********/
	//TEST
	Uart_flush();
 800104e:	f000 fff5 	bl	800203c <Uart_flush>
	Uart_sendstring("AT\r\n");
 8001052:	482f      	ldr	r0, [pc, #188]	; (8001110 <ESP_Init+0xe0>)
 8001054:	f000 ff3e 	bl	8001ed4 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8001058:	bf00      	nop
 800105a:	482e      	ldr	r0, [pc, #184]	; (8001114 <ESP_Init+0xe4>)
 800105c:	f001 f8ba 	bl	80021d4 <Wait_for>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <ESP_Init+0x2a>


	/********* AT+CWMODE=1 **********/
	//Tryb Wi-Fi 1->Stacja, 2->AP
	Uart_flush();
 8001066:	f000 ffe9 	bl	800203c <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n");
 800106a:	482b      	ldr	r0, [pc, #172]	; (8001118 <ESP_Init+0xe8>)
 800106c:	f000 ff32 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8001070:	bf00      	nop
 8001072:	4828      	ldr	r0, [pc, #160]	; (8001114 <ESP_Init+0xe4>)
 8001074:	f001 f8ae 	bl	80021d4 <Wait_for>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <ESP_Init+0x42>

	/* Set Static IP Address */
	/********* AT+CWSTAIP=IPADDRESS **********/
	Uart_flush();
 800107e:	f000 ffdd 	bl	800203c <Uart_flush>
	sprintf (data, "AT+CIPSTA=\"%s\"\r\n", STAIP);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4924      	ldr	r1, [pc, #144]	; (800111c <ESP_Init+0xec>)
 800108a:	4618      	mov	r0, r3
 800108c:	f005 facc 	bl	8006628 <siprintf>
	Uart_sendstring(data);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f000 ff1d 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800109a:	bf00      	nop
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <ESP_Init+0xe4>)
 800109e:	f001 f899 	bl	80021d4 <Wait_for>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f9      	beq.n	800109c <ESP_Init+0x6c>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush();
 80010a8:	f000 ffc8 	bl	800203c <Uart_flush>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80010ac:	f107 0010 	add.w	r0, r7, #16
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	491a      	ldr	r1, [pc, #104]	; (8001120 <ESP_Init+0xf0>)
 80010b6:	f005 fab7 	bl	8006628 <siprintf>
	Uart_sendstring(data);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 ff08 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80010c4:	bf00      	nop
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <ESP_Init+0xe4>)
 80010c8:	f001 f884 	bl	80021d4 <Wait_for>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f9      	beq.n	80010c6 <ESP_Init+0x96>

	/********* AT+CIPMUX **********/
	Uart_flush();
 80010d2:	f000 ffb3 	bl	800203c <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n");
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <ESP_Init+0xf4>)
 80010d8:	f000 fefc 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80010dc:	bf00      	nop
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <ESP_Init+0xe4>)
 80010e0:	f001 f878 	bl	80021d4 <Wait_for>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f9      	beq.n	80010de <ESP_Init+0xae>

	/********* AT+CIPSERVER **********/
	Uart_flush();
 80010ea:	f000 ffa7 	bl	800203c <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n");
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <ESP_Init+0xf8>)
 80010f0:	f000 fef0 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80010f4:	bf00      	nop
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <ESP_Init+0xe4>)
 80010f8:	f001 f86c 	bl	80021d4 <Wait_for>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f9      	beq.n	80010f6 <ESP_Init+0xc6>

}
 8001102:	bf00      	nop
 8001104:	3760      	adds	r7, #96	; 0x60
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	080094a8 	.word	0x080094a8
 8001110:	080094b4 	.word	0x080094b4
 8001114:	080094bc 	.word	0x080094bc
 8001118:	080094c4 	.word	0x080094c4
 800111c:	080094d4 	.word	0x080094d4
 8001120:	080094e8 	.word	0x080094e8
 8001124:	08009500 	.word	0x08009500
 8001128:	08009510 	.word	0x08009510

0800112c <Server_Send>:


int Server_Send (char *str, int Link_ID)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b098      	sub	sp, #96	; 0x60
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f814 	bl	8000164 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	Uart_flush();
 8001140:	f000 ff7c 	bl	800203c <Uart_flush>
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8001144:	f107 000c 	add.w	r0, r7, #12
 8001148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4919      	ldr	r1, [pc, #100]	; (80011b4 <Server_Send+0x88>)
 800114e:	f005 fa6b 	bl	8006628 <siprintf>
	Uart_sendstring(data);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4618      	mov	r0, r3
 8001158:	f000 febc 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for(">")));
 800115c:	bf00      	nop
 800115e:	4816      	ldr	r0, [pc, #88]	; (80011b8 <Server_Send+0x8c>)
 8001160:	f001 f838 	bl	80021d4 <Wait_for>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f9      	beq.n	800115e <Server_Send+0x32>
	Uart_sendstring (str);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 feb2 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for("SEND OK")));
 8001170:	bf00      	nop
 8001172:	4812      	ldr	r0, [pc, #72]	; (80011bc <Server_Send+0x90>)
 8001174:	f001 f82e 	bl	80021d4 <Wait_for>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f9      	beq.n	8001172 <Server_Send+0x46>
	Uart_flush();
 800117e:	f000 ff5d 	bl	800203c <Uart_flush>
	sprintf (data, "AT+CIPCLOSE=%d\r\n",Link_ID);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	490d      	ldr	r1, [pc, #52]	; (80011c0 <Server_Send+0x94>)
 800118a:	4618      	mov	r0, r3
 800118c:	f005 fa4c 	bl	8006628 <siprintf>
	Uart_sendstring(data);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fe9d 	bl	8001ed4 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800119a:	bf00      	nop
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <Server_Send+0x98>)
 800119e:	f001 f819 	bl	80021d4 <Wait_for>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f9      	beq.n	800119c <Server_Send+0x70>
	return 1;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3760      	adds	r7, #96	; 0x60
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	08009524 	.word	0x08009524
 80011b8:	08009538 	.word	0x08009538
 80011bc:	0800953c 	.word	0x0800953c
 80011c0:	08009544 	.word	0x08009544
 80011c4:	080094bc 	.word	0x080094bc

080011c8 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	f5ad 5dc1 	sub.w	sp, sp, #6176	; 0x1820
 80011ce:	b085      	sub	sp, #20
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	3b04      	subs	r3, #4
 80011d8:	6018      	str	r0, [r3, #0]
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	3b08      	subs	r3, #8
 80011e0:	6019      	str	r1, [r3, #0]
	char datatosend[4096] = {0};
 80011e2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80011e6:	4618      	mov	r0, r3
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	461a      	mov	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	f004 fdc2 	bl	8005d78 <memset>
	if (!(strcmp (str, "/page1")))
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	3b04      	subs	r3, #4
 80011fa:	49cc      	ldr	r1, [pc, #816]	; (800152c <Server_Handle+0x364>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	f7fe ffa7 	bl	8000150 <strcmp>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d111      	bne.n	800122c <Server_Handle+0x64>
	{

		sprintf(datatosend, page1);
 8001208:	4bc9      	ldr	r3, [pc, #804]	; (8001530 <Server_Handle+0x368>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fa08 	bl	8006628 <siprintf>
		Server_Send(datatosend, Link_ID);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	3b08      	subs	r3, #8
 800121e:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	4610      	mov	r0, r2
 8001226:	f7ff ff81 	bl	800112c <Server_Send>
	{
		sprintf (datatosend, home);
		Server_Send(datatosend, Link_ID);
	}

}
 800122a:	e2d1      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/page2")))
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	3b04      	subs	r3, #4
 8001232:	49c0      	ldr	r1, [pc, #768]	; (8001534 <Server_Handle+0x36c>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f7fe ff8b 	bl	8000150 <strcmp>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8092 	bne.w	8001366 <Server_Handle+0x19e>
		sprintf(datatosend, page2_Top);
 8001242:	4bbd      	ldr	r3, [pc, #756]	; (8001538 <Server_Handle+0x370>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f005 f9eb 	bl	8006628 <siprintf>
		strcat (datatosend, table);
 8001252:	4bba      	ldr	r3, [pc, #744]	; (800153c <Server_Handle+0x374>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f005 fa03 	bl	8006668 <strcat>
		int bufsize = (sizeofuser (user));
 8001262:	48b7      	ldr	r0, [pc, #732]	; (8001540 <Server_Handle+0x378>)
 8001264:	f7ff fec8 	bl	8000ff8 <sizeofuser>
 8001268:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800126c:	f103 0308 	add.w	r3, r3, #8
 8001270:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 8001272:	2300      	movs	r3, #0
 8001274:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001278:	f102 0204 	add.w	r2, r2, #4
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e042      	b.n	8001306 <Server_Handle+0x13e>
			sprintf (localbuf, "<tr><td>%s %s</td>	<td>%s</td></tr>",user[i].firstname,user[i].lastname,user[i].age);
 8001280:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001284:	f103 0304 	add.w	r3, r3, #4
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4613      	mov	r3, r2
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	4aaa      	ldr	r2, [pc, #680]	; (8001540 <Server_Handle+0x378>)
 8001296:	1899      	adds	r1, r3, r2
 8001298:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800129c:	f103 0304 	add.w	r3, r3, #4
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4613      	mov	r3, r2
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3308      	adds	r3, #8
 80012ae:	4aa4      	ldr	r2, [pc, #656]	; (8001540 <Server_Handle+0x378>)
 80012b0:	4413      	add	r3, r2
 80012b2:	1ddc      	adds	r4, r3, #7
 80012b4:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80012b8:	f103 0304 	add.w	r3, r3, #4
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3318      	adds	r3, #24
 80012ca:	4a9d      	ldr	r2, [pc, #628]	; (8001540 <Server_Handle+0x378>)
 80012cc:	4413      	add	r3, r2
 80012ce:	3306      	adds	r3, #6
 80012d0:	f107 0008 	add.w	r0, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4623      	mov	r3, r4
 80012d8:	460a      	mov	r2, r1
 80012da:	499a      	ldr	r1, [pc, #616]	; (8001544 <Server_Handle+0x37c>)
 80012dc:	f005 f9a4 	bl	8006628 <siprintf>
			strcat (datatosend, localbuf);
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 f9bc 	bl	8006668 <strcat>
		for (int i=0; i<bufsize; i++)
 80012f0:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80012f4:	f103 0304 	add.w	r3, r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001300:	f102 0204 	add.w	r2, r2, #4
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800130a:	f103 0304 	add.w	r3, r3, #4
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001314:	f103 0308 	add.w	r3, r3, #8
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbb0      	blt.n	8001280 <Server_Handle+0xb8>
		strcat (datatosend, "</table>");
 800131e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff1e 	bl	8000164 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001330:	4413      	add	r3, r2
 8001332:	4985      	ldr	r1, [pc, #532]	; (8001548 <Server_Handle+0x380>)
 8001334:	461a      	mov	r2, r3
 8001336:	460b      	mov	r3, r1
 8001338:	cb03      	ldmia	r3!, {r0, r1}
 800133a:	6010      	str	r0, [r2, #0]
 800133c:	6051      	str	r1, [r2, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 8001342:	4b82      	ldr	r3, [pc, #520]	; (800154c <Server_Handle+0x384>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f005 f98b 	bl	8006668 <strcat>
		Server_Send(datatosend, Link_ID);
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	3b08      	subs	r3, #8
 8001358:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	4610      	mov	r0, r2
 8001360:	f7ff fee4 	bl	800112c <Server_Send>
}
 8001364:	e234      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/set_time")))
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	3b04      	subs	r3, #4
 800136c:	4978      	ldr	r1, [pc, #480]	; (8001550 <Server_Handle+0x388>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	f7fe feee 	bl	8000150 <strcmp>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d111      	bne.n	800139e <Server_Handle+0x1d6>
		sprintf(datatosend, set_time);
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <Server_Handle+0x38c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f005 f94f 	bl	8006628 <siprintf>
		Server_Send(datatosend, Link_ID);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	3b08      	subs	r3, #8
 8001390:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	4610      	mov	r0, r2
 8001398:	f7ff fec8 	bl	800112c <Server_Send>
}
 800139c:	e218      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/set_alarm")))
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	3b04      	subs	r3, #4
 80013a4:	496c      	ldr	r1, [pc, #432]	; (8001558 <Server_Handle+0x390>)
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	f7fe fed2 	bl	8000150 <strcmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d111      	bne.n	80013d6 <Server_Handle+0x20e>
		sprintf(datatosend, set_time);
 80013b2:	4b68      	ldr	r3, [pc, #416]	; (8001554 <Server_Handle+0x38c>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 f933 	bl	8006628 <siprintf>
		Server_Send(datatosend, Link_ID);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	3b08      	subs	r3, #8
 80013c8:	f607 0208 	addw	r2, r7, #2056	; 0x808
 80013cc:	6819      	ldr	r1, [r3, #0]
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff feac 	bl	800112c <Server_Send>
}
 80013d4:	e1fc      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/time_change")))
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	3b04      	subs	r3, #4
 80013dc:	495f      	ldr	r1, [pc, #380]	; (800155c <Server_Handle+0x394>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f7fe feb6 	bl	8000150 <strcmp>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d111      	bne.n	800140e <Server_Handle+0x246>
		sprintf(datatosend, time_change);
 80013ea:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <Server_Handle+0x398>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 f917 	bl	8006628 <siprintf>
		Server_Send(datatosend, Link_ID);
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	3b08      	subs	r3, #8
 8001400:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8001404:	6819      	ldr	r1, [r3, #0]
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fe90 	bl	800112c <Server_Send>
}
 800140c:	e1e0      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/alarm_change")))
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	3b04      	subs	r3, #4
 8001414:	4953      	ldr	r1, [pc, #332]	; (8001564 <Server_Handle+0x39c>)
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	f7fe fe9a 	bl	8000150 <strcmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d111      	bne.n	8001446 <Server_Handle+0x27e>
		sprintf(datatosend, alarm_change);
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <Server_Handle+0x3a0>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f005 f8fb 	bl	8006628 <siprintf>
		Server_Send(datatosend, Link_ID);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	3b08      	subs	r3, #8
 8001438:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800143c:	6819      	ldr	r1, [r3, #0]
 800143e:	4610      	mov	r0, r2
 8001440:	f7ff fe74 	bl	800112c <Server_Send>
}
 8001444:	e1c4      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/temper")))
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	3b04      	subs	r3, #4
 800144c:	4947      	ldr	r1, [pc, #284]	; (800156c <Server_Handle+0x3a4>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f7fe fe7e 	bl	8000150 <strcmp>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8092 	bne.w	8001580 <Server_Handle+0x3b8>
		sprintf(datatosend, temperature_Top);
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <Server_Handle+0x3a8>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f005 f8de 	bl	8006628 <siprintf>
		strcat (datatosend, table_temp);
 800146c:	4b41      	ldr	r3, [pc, #260]	; (8001574 <Server_Handle+0x3ac>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f005 f8f6 	bl	8006668 <strcat>
		int bufsize = (sizeofuser (user));
 800147c:	4830      	ldr	r0, [pc, #192]	; (8001540 <Server_Handle+0x378>)
 800147e:	f7ff fdbb 	bl	8000ff8 <sizeofuser>
 8001482:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001486:	f103 030c 	add.w	r3, r3, #12
 800148a:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 800148c:	2300      	movs	r3, #0
 800148e:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e01c      	b.n	80014d0 <Server_Handle+0x308>
			sprintf (localbuf, "<tr><td>%f</td><td>°C</td></tr>", temper);
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <Server_Handle+0x3b0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ffce 	bl	800043c <__aeabi_f2d>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	f107 0008 	add.w	r0, r7, #8
 80014a8:	461a      	mov	r2, r3
 80014aa:	4623      	mov	r3, r4
 80014ac:	4933      	ldr	r1, [pc, #204]	; (800157c <Server_Handle+0x3b4>)
 80014ae:	f005 f8bb 	bl	8006628 <siprintf>
			strcat (datatosend, localbuf);
 80014b2:	f107 0208 	add.w	r2, r7, #8
 80014b6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 f8d3 	bl	8006668 <strcat>
		for (int i=0; i<bufsize; i++)
 80014c2:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80014da:	f103 030c 	add.w	r3, r3, #12
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbd8      	blt.n	8001496 <Server_Handle+0x2ce>
		strcat (datatosend, "</table>");
 80014e4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe3b 	bl	8000164 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461a      	mov	r2, r3
 80014f2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80014f6:	4413      	add	r3, r2
 80014f8:	4913      	ldr	r1, [pc, #76]	; (8001548 <Server_Handle+0x380>)
 80014fa:	461a      	mov	r2, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	cb03      	ldmia	r3!, {r0, r1}
 8001500:	6010      	str	r0, [r2, #0]
 8001502:	6051      	str	r1, [r2, #4]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <Server_Handle+0x384>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f005 f8a8 	bl	8006668 <strcat>
		Server_Send(datatosend, Link_ID);
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	3b08      	subs	r3, #8
 800151e:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	4610      	mov	r0, r2
 8001526:	f7ff fe01 	bl	800112c <Server_Send>
}
 800152a:	e151      	b.n	80017d0 <Server_Handle+0x608>
 800152c:	08009558 	.word	0x08009558
 8001530:	2000000c 	.word	0x2000000c
 8001534:	08009560 	.word	0x08009560
 8001538:	2000001c 	.word	0x2000001c
 800153c:	20000034 	.word	0x20000034
 8001540:	20000308 	.word	0x20000308
 8001544:	08009568 	.word	0x08009568
 8001548:	0800958c 	.word	0x0800958c
 800154c:	20000020 	.word	0x20000020
 8001550:	08009598 	.word	0x08009598
 8001554:	20000004 	.word	0x20000004
 8001558:	080095a4 	.word	0x080095a4
 800155c:	080095b0 	.word	0x080095b0
 8001560:	20000010 	.word	0x20000010
 8001564:	080095c0 	.word	0x080095c0
 8001568:	20000008 	.word	0x20000008
 800156c:	080095d0 	.word	0x080095d0
 8001570:	20000028 	.word	0x20000028
 8001574:	20000038 	.word	0x20000038
 8001578:	20000664 	.word	0x20000664
 800157c:	080095d8 	.word	0x080095d8
	else if (!(strcmp (str, "/time")))
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	3b04      	subs	r3, #4
 8001586:	4995      	ldr	r1, [pc, #596]	; (80017dc <Server_Handle+0x614>)
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	f7fe fde1 	bl	8000150 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d16e      	bne.n	8001672 <Server_Handle+0x4aa>
		sprintf(datatosend, time_Top);
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <Server_Handle+0x618>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f842 	bl	8006628 <siprintf>
		strcat (datatosend, table_time);
 80015a4:	4b8f      	ldr	r3, [pc, #572]	; (80017e4 <Server_Handle+0x61c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 f85a 	bl	8006668 <strcat>
		int bufsize = (sizeofuser (user));
 80015b4:	488c      	ldr	r0, [pc, #560]	; (80017e8 <Server_Handle+0x620>)
 80015b6:	f7ff fd1f 	bl	8000ff8 <sizeofuser>
 80015ba:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80015be:	f103 0310 	add.w	r3, r3, #16
 80015c2:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80015ca:	f102 021c 	add.w	r2, r2, #28
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e01f      	b.n	8001612 <Server_Handle+0x44a>
			sprintf (localbuf, "<tr><td>%i:%i:%i</td></tr>",Hours,Minutes,Seconds);
 80015d2:	4b86      	ldr	r3, [pc, #536]	; (80017ec <Server_Handle+0x624>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b86      	ldr	r3, [pc, #536]	; (80017f0 <Server_Handle+0x628>)
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	4b86      	ldr	r3, [pc, #536]	; (80017f4 <Server_Handle+0x62c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	460b      	mov	r3, r1
 80015e6:	4984      	ldr	r1, [pc, #528]	; (80017f8 <Server_Handle+0x630>)
 80015e8:	f005 f81e 	bl	8006628 <siprintf>
			strcat (datatosend, localbuf);
 80015ec:	f107 0208 	add.w	r2, r7, #8
 80015f0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 f836 	bl	8006668 <strcat>
		for (int i=0; i<bufsize; i++)
 80015fc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001600:	f103 031c 	add.w	r3, r3, #28
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 800160c:	f102 021c 	add.w	r2, r2, #28
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001616:	f103 031c 	add.w	r3, r3, #28
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001620:	f103 0310 	add.w	r3, r3, #16
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbd3      	blt.n	80015d2 <Server_Handle+0x40a>
		strcat (datatosend, "</table>");
 800162a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fd98 	bl	8000164 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800163c:	4413      	add	r3, r2
 800163e:	496f      	ldr	r1, [pc, #444]	; (80017fc <Server_Handle+0x634>)
 8001640:	461a      	mov	r2, r3
 8001642:	460b      	mov	r3, r1
 8001644:	cb03      	ldmia	r3!, {r0, r1}
 8001646:	6010      	str	r0, [r2, #0]
 8001648:	6051      	str	r1, [r2, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, time_end);
 800164e:	4b6c      	ldr	r3, [pc, #432]	; (8001800 <Server_Handle+0x638>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f005 f805 	bl	8006668 <strcat>
		Server_Send(datatosend, Link_ID);
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	3b08      	subs	r3, #8
 8001664:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	4610      	mov	r0, r2
 800166c:	f7ff fd5e 	bl	800112c <Server_Send>
}
 8001670:	e0ae      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/lux")))
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	3b04      	subs	r3, #4
 8001678:	4962      	ldr	r1, [pc, #392]	; (8001804 <Server_Handle+0x63c>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	f7fe fd68 	bl	8000150 <strcmp>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d16f      	bne.n	8001766 <Server_Handle+0x59e>
		sprintf(datatosend, lux_Top);
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <Server_Handle+0x640>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f004 ffc9 	bl	8006628 <siprintf>
		strcat (datatosend, table_lux);
 8001696:	4b5d      	ldr	r3, [pc, #372]	; (800180c <Server_Handle+0x644>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 ffe1 	bl	8006668 <strcat>
		int bufsize = (sizeofuser (user));
 80016a6:	4850      	ldr	r0, [pc, #320]	; (80017e8 <Server_Handle+0x620>)
 80016a8:	f7ff fca6 	bl	8000ff8 <sizeofuser>
 80016ac:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80016b0:	f103 0314 	add.w	r3, r3, #20
 80016b4:	6018      	str	r0, [r3, #0]
		for (int i=0; i<bufsize; i++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80016bc:	f102 0218 	add.w	r2, r2, #24
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e020      	b.n	8001706 <Server_Handle+0x53e>
			sprintf (localbuf, "<tr><td>%f</td><td>Lux</td></tr>", Lux);
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <Server_Handle+0x648>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe feb7 	bl	800043c <__aeabi_f2d>
 80016ce:	4603      	mov	r3, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	f107 0008 	add.w	r0, r7, #8
 80016d6:	461a      	mov	r2, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	494e      	ldr	r1, [pc, #312]	; (8001814 <Server_Handle+0x64c>)
 80016dc:	f004 ffa4 	bl	8006628 <siprintf>
			strcat (datatosend, localbuf);
 80016e0:	f107 0208 	add.w	r2, r7, #8
 80016e4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 ffbc 	bl	8006668 <strcat>
		for (int i=0; i<bufsize; i++)
 80016f0:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80016f4:	f103 0318 	add.w	r3, r3, #24
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8001700:	f102 0218 	add.w	r2, r2, #24
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800170a:	f103 0318 	add.w	r3, r3, #24
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001714:	f103 0314 	add.w	r3, r3, #20
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbd2      	blt.n	80016c4 <Server_Handle+0x4fc>
		strcat (datatosend, "</table>");
 800171e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fd1e 	bl	8000164 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001730:	4413      	add	r3, r2
 8001732:	4932      	ldr	r1, [pc, #200]	; (80017fc <Server_Handle+0x634>)
 8001734:	461a      	mov	r2, r3
 8001736:	460b      	mov	r3, r1
 8001738:	cb03      	ldmia	r3!, {r0, r1}
 800173a:	6010      	str	r0, [r2, #0]
 800173c:	6051      	str	r1, [r2, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	7213      	strb	r3, [r2, #8]
		strcat(datatosend, page2_end);
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <Server_Handle+0x650>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f004 ff8b 	bl	8006668 <strcat>
		Server_Send(datatosend, Link_ID);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	3b08      	subs	r3, #8
 8001758:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	4610      	mov	r0, r2
 8001760:	f7ff fce4 	bl	800112c <Server_Send>
}
 8001764:	e034      	b.n	80017d0 <Server_Handle+0x608>
	else if (!(strcmp (str, "/led")))
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	3b04      	subs	r3, #4
 800176c:	492b      	ldr	r1, [pc, #172]	; (800181c <Server_Handle+0x654>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	f7fe fcee 	bl	8000150 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d119      	bne.n	80017ae <Server_Handle+0x5e6>
		sprintf(datatosend, led);
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <Server_Handle+0x658>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f004 ff4f 	bl	8006628 <siprintf>
		strcat(datatosend, page2_end);
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <Server_Handle+0x650>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f004 ff67 	bl	8006668 <strcat>
		Server_Send(datatosend, Link_ID);
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	3b08      	subs	r3, #8
 80017a0:	f607 0208 	addw	r2, r7, #2056	; 0x808
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff fcc0 	bl	800112c <Server_Send>
}
 80017ac:	e010      	b.n	80017d0 <Server_Handle+0x608>
		sprintf (datatosend, home);
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <Server_Handle+0x65c>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 ff35 	bl	8006628 <siprintf>
		Server_Send(datatosend, Link_ID);
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	3b08      	subs	r3, #8
 80017c4:	f607 0208 	addw	r2, r7, #2056	; 0x808
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fcae 	bl	800112c <Server_Send>
}
 80017d0:	bf00      	nop
 80017d2:	f507 57c1 	add.w	r7, r7, #6176	; 0x1820
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	080095fc 	.word	0x080095fc
 80017e0:	20000030 	.word	0x20000030
 80017e4:	20000040 	.word	0x20000040
 80017e8:	20000308 	.word	0x20000308
 80017ec:	2000069c 	.word	0x2000069c
 80017f0:	20000798 	.word	0x20000798
 80017f4:	2000079c 	.word	0x2000079c
 80017f8:	08009604 	.word	0x08009604
 80017fc:	0800958c 	.word	0x0800958c
 8001800:	20000024 	.word	0x20000024
 8001804:	08009620 	.word	0x08009620
 8001808:	2000002c 	.word	0x2000002c
 800180c:	2000003c 	.word	0x2000003c
 8001810:	200002e8 	.word	0x200002e8
 8001814:	08009628 	.word	0x08009628
 8001818:	20000020 	.word	0x20000020
 800181c:	0800964c 	.word	0x0800964c
 8001820:	200005bc 	.word	0x200005bc
 8001824:	20000000 	.word	0x20000000

08001828 <Server_Start>:

void Server_Start (void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0a2      	sub	sp, #136	; 0x88
 800182c:	af00      	add	r7, sp, #0
	char buftostoreheader[128] = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fa9e 	bl	8005d78 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID)));
 800183c:	bf00      	nop
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	461a      	mov	r2, r3
 8001842:	2101      	movs	r1, #1
 8001844:	48b5      	ldr	r0, [pc, #724]	; (8001b1c <Server_Start+0x2f4>)
 8001846:	f000 fc99 	bl	800217c <Get_after>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f6      	beq.n	800183e <Server_Start+0x16>

	Link_ID -= 48;
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	3b30      	subs	r3, #48	; 0x30
 8001854:	b2db      	uxtb	r3, r3
 8001856:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftostoreheader)));
 8001858:	bf00      	nop
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4619      	mov	r1, r3
 8001860:	48af      	ldr	r0, [pc, #700]	; (8001b20 <Server_Start+0x2f8>)
 8001862:	f000 fc17 	bl	8002094 <Copy_upto>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f6      	beq.n	800185a <Server_Start+0x32>

	if (Look_for("/page1", buftostoreheader) == 1)
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	4619      	mov	r1, r3
 8001872:	48ac      	ldr	r0, [pc, #688]	; (8001b24 <Server_Start+0x2fc>)
 8001874:	f000 fa70 	bl	8001d58 <Look_for>
 8001878:	4603      	mov	r3, r0
 800187a:	2b01      	cmp	r3, #1
 800187c:	d146      	bne.n	800190c <Server_Start+0xe4>
	{
		GetDataFromBuffer("fname=", "&", buftostoreheader, user[usernumber].firstname);
 800187e:	4baa      	ldr	r3, [pc, #680]	; (8001b28 <Server_Start+0x300>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4613      	mov	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	4aa7      	ldr	r2, [pc, #668]	; (8001b2c <Server_Start+0x304>)
 800188e:	4413      	add	r3, r2
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	49a6      	ldr	r1, [pc, #664]	; (8001b30 <Server_Start+0x308>)
 8001896:	48a7      	ldr	r0, [pc, #668]	; (8001b34 <Server_Start+0x30c>)
 8001898:	f000 fb30 	bl	8001efc <GetDataFromBuffer>
		GetDataFromBuffer("lname=", "&", buftostoreheader, user[usernumber].lastname);
 800189c:	4ba2      	ldr	r3, [pc, #648]	; (8001b28 <Server_Start+0x300>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4613      	mov	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3308      	adds	r3, #8
 80018ac:	4a9f      	ldr	r2, [pc, #636]	; (8001b2c <Server_Start+0x304>)
 80018ae:	4413      	add	r3, r2
 80018b0:	3307      	adds	r3, #7
 80018b2:	f107 0208 	add.w	r2, r7, #8
 80018b6:	499e      	ldr	r1, [pc, #632]	; (8001b30 <Server_Start+0x308>)
 80018b8:	489f      	ldr	r0, [pc, #636]	; (8001b38 <Server_Start+0x310>)
 80018ba:	f000 fb1f 	bl	8001efc <GetDataFromBuffer>
		GetDataFromBuffer("age=", " HTTP", buftostoreheader, user[usernumber].age);
 80018be:	4b9a      	ldr	r3, [pc, #616]	; (8001b28 <Server_Start+0x300>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	3318      	adds	r3, #24
 80018ce:	4a97      	ldr	r2, [pc, #604]	; (8001b2c <Server_Start+0x304>)
 80018d0:	4413      	add	r3, r2
 80018d2:	3306      	adds	r3, #6
 80018d4:	f107 0208 	add.w	r2, r7, #8
 80018d8:	4998      	ldr	r1, [pc, #608]	; (8001b3c <Server_Start+0x314>)
 80018da:	4899      	ldr	r0, [pc, #612]	; (8001b40 <Server_Start+0x318>)
 80018dc:	f000 fb0e 	bl	8001efc <GetDataFromBuffer>
		usernumber++;
 80018e0:	4b91      	ldr	r3, [pc, #580]	; (8001b28 <Server_Start+0x300>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a90      	ldr	r2, [pc, #576]	; (8001b28 <Server_Start+0x300>)
 80018e8:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 80018ea:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <Server_Start+0x300>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	dd02      	ble.n	80018f8 <Server_Start+0xd0>
 80018f2:	4b8d      	ldr	r3, [pc, #564]	; (8001b28 <Server_Start+0x300>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
		Server_Handle("/page1",Link_ID);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4889      	ldr	r0, [pc, #548]	; (8001b24 <Server_Start+0x2fc>)
 80018fe:	f7ff fc63 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001906:	f001 fbfb 	bl	8003100 <HAL_Delay>
	else
	{
		Server_Handle("/ ", Link_ID);
		HAL_Delay(500);
	}
}
 800190a:	e1c5      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/time_change", buftostoreheader) == 1)
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4619      	mov	r1, r3
 8001912:	488c      	ldr	r0, [pc, #560]	; (8001b44 <Server_Start+0x31c>)
 8001914:	f000 fa20 	bl	8001d58 <Look_for>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d15e      	bne.n	80019dc <Server_Start+0x1b4>
		GetDataFromBuffer("hour=", " HTTP", buftostoreheader, user[usernumber].hour);
 800191e:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <Server_Start+0x300>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3338      	adds	r3, #56	; 0x38
 800192e:	4a7f      	ldr	r2, [pc, #508]	; (8001b2c <Server_Start+0x304>)
 8001930:	4413      	add	r3, r2
 8001932:	3307      	adds	r3, #7
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	4980      	ldr	r1, [pc, #512]	; (8001b3c <Server_Start+0x314>)
 800193a:	4883      	ldr	r0, [pc, #524]	; (8001b48 <Server_Start+0x320>)
 800193c:	f000 fade 	bl	8001efc <GetDataFromBuffer>
		HoursAdd = atoi(user[usernumber].hour);
 8001940:	4b79      	ldr	r3, [pc, #484]	; (8001b28 <Server_Start+0x300>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	3338      	adds	r3, #56	; 0x38
 8001950:	4a76      	ldr	r2, [pc, #472]	; (8001b2c <Server_Start+0x304>)
 8001952:	4413      	add	r3, r2
 8001954:	3307      	adds	r3, #7
 8001956:	4618      	mov	r0, r3
 8001958:	f004 f9e0 	bl	8005d1c <atoi>
 800195c:	4603      	mov	r3, r0
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <Server_Start+0x324>)
 8001962:	701a      	strb	r2, [r3, #0]
		GetDataFromBuffer("minutes=", "HTTP", buftostoreheader, user[usernumber].minutes);
 8001964:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <Server_Start+0x300>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3340      	adds	r3, #64	; 0x40
 8001974:	4a6d      	ldr	r2, [pc, #436]	; (8001b2c <Server_Start+0x304>)
 8001976:	4413      	add	r3, r2
 8001978:	3301      	adds	r3, #1
 800197a:	f107 0208 	add.w	r2, r7, #8
 800197e:	4974      	ldr	r1, [pc, #464]	; (8001b50 <Server_Start+0x328>)
 8001980:	4874      	ldr	r0, [pc, #464]	; (8001b54 <Server_Start+0x32c>)
 8001982:	f000 fabb 	bl	8001efc <GetDataFromBuffer>
		MinutesAdd = atoi(user[usernumber].minutes);
 8001986:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <Server_Start+0x300>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3340      	adds	r3, #64	; 0x40
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <Server_Start+0x304>)
 8001998:	4413      	add	r3, r2
 800199a:	3301      	adds	r3, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f004 f9bd 	bl	8005d1c <atoi>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <Server_Start+0x330>)
 80019a8:	701a      	strb	r2, [r3, #0]
		usernumber++;
 80019aa:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <Server_Start+0x300>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a5d      	ldr	r2, [pc, #372]	; (8001b28 <Server_Start+0x300>)
 80019b2:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 80019b4:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <Server_Start+0x300>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	dd02      	ble.n	80019c2 <Server_Start+0x19a>
 80019bc:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <Server_Start+0x300>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
		init_time = 1;
 80019c2:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <Server_Start+0x334>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
		Server_Handle("/time_change",Link_ID);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4619      	mov	r1, r3
 80019cc:	485d      	ldr	r0, [pc, #372]	; (8001b44 <Server_Start+0x31c>)
 80019ce:	f7ff fbfb 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 80019d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d6:	f001 fb93 	bl	8003100 <HAL_Delay>
}
 80019da:	e15d      	b.n	8001c98 <Server_Start+0x470>
	 else if (Look_for("/alarm_change", buftostoreheader) == 1)
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	4619      	mov	r1, r3
 80019e2:	485f      	ldr	r0, [pc, #380]	; (8001b60 <Server_Start+0x338>)
 80019e4:	f000 f9b8 	bl	8001d58 <Look_for>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d15c      	bne.n	8001aa8 <Server_Start+0x280>
		GetDataFromBuffer("minutes=", " HTTP", buftostoreheader, user[usernumber].minutes);
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <Server_Start+0x300>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4613      	mov	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3340      	adds	r3, #64	; 0x40
 80019fe:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <Server_Start+0x304>)
 8001a00:	4413      	add	r3, r2
 8001a02:	3301      	adds	r3, #1
 8001a04:	f107 0208 	add.w	r2, r7, #8
 8001a08:	494c      	ldr	r1, [pc, #304]	; (8001b3c <Server_Start+0x314>)
 8001a0a:	4852      	ldr	r0, [pc, #328]	; (8001b54 <Server_Start+0x32c>)
 8001a0c:	f000 fa76 	bl	8001efc <GetDataFromBuffer>
		MinutesAlarm = atoi(user[usernumber].minutes);
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <Server_Start+0x300>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3340      	adds	r3, #64	; 0x40
 8001a20:	4a42      	ldr	r2, [pc, #264]	; (8001b2c <Server_Start+0x304>)
 8001a22:	4413      	add	r3, r2
 8001a24:	3301      	adds	r3, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 f978 	bl	8005d1c <atoi>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <Server_Start+0x33c>)
 8001a30:	601a      	str	r2, [r3, #0]
		GetDataFromBuffer("hour=", " HTTP", buftostoreheader, user[usernumber].hour);
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <Server_Start+0x300>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3338      	adds	r3, #56	; 0x38
 8001a42:	4a3a      	ldr	r2, [pc, #232]	; (8001b2c <Server_Start+0x304>)
 8001a44:	4413      	add	r3, r2
 8001a46:	3307      	adds	r3, #7
 8001a48:	f107 0208 	add.w	r2, r7, #8
 8001a4c:	493b      	ldr	r1, [pc, #236]	; (8001b3c <Server_Start+0x314>)
 8001a4e:	483e      	ldr	r0, [pc, #248]	; (8001b48 <Server_Start+0x320>)
 8001a50:	f000 fa54 	bl	8001efc <GetDataFromBuffer>
		HoursAlarm = atoi(user[usernumber].hour);
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <Server_Start+0x300>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3338      	adds	r3, #56	; 0x38
 8001a64:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <Server_Start+0x304>)
 8001a66:	4413      	add	r3, r2
 8001a68:	3307      	adds	r3, #7
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 f956 	bl	8005d1c <atoi>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <Server_Start+0x340>)
 8001a74:	601a      	str	r2, [r3, #0]
		usernumber++;
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <Server_Start+0x300>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <Server_Start+0x300>)
 8001a7e:	6013      	str	r3, [r2, #0]
		if (usernumber >9) usernumber = 0;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <Server_Start+0x300>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	dd02      	ble.n	8001a8e <Server_Start+0x266>
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <Server_Start+0x300>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
		buzz = 1;
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <Server_Start+0x344>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
		Server_Handle("/alarm_change",Link_ID);
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4831      	ldr	r0, [pc, #196]	; (8001b60 <Server_Start+0x338>)
 8001a9a:	f7ff fb95 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001a9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aa2:	f001 fb2d 	bl	8003100 <HAL_Delay>
}
 8001aa6:	e0f7      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/page2", buftostoreheader) == 1)
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	4619      	mov	r1, r3
 8001aae:	4830      	ldr	r0, [pc, #192]	; (8001b70 <Server_Start+0x348>)
 8001ab0:	f000 f952 	bl	8001d58 <Look_for>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d109      	bne.n	8001ace <Server_Start+0x2a6>
		Server_Handle("/page2",Link_ID);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4619      	mov	r1, r3
 8001abe:	482c      	ldr	r0, [pc, #176]	; (8001b70 <Server_Start+0x348>)
 8001ac0:	f7ff fb82 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac8:	f001 fb1a 	bl	8003100 <HAL_Delay>
}
 8001acc:	e0e4      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/temper", buftostoreheader) == 1)
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4827      	ldr	r0, [pc, #156]	; (8001b74 <Server_Start+0x34c>)
 8001ad6:	f000 f93f 	bl	8001d58 <Look_for>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d109      	bne.n	8001af4 <Server_Start+0x2cc>
		Server_Handle("/temper",Link_ID);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4823      	ldr	r0, [pc, #140]	; (8001b74 <Server_Start+0x34c>)
 8001ae6:	f7ff fb6f 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aee:	f001 fb07 	bl	8003100 <HAL_Delay>
}
 8001af2:	e0d1      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/lux", buftostoreheader) == 1)
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	481f      	ldr	r0, [pc, #124]	; (8001b78 <Server_Start+0x350>)
 8001afc:	f000 f92c 	bl	8001d58 <Look_for>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d13a      	bne.n	8001b7c <Server_Start+0x354>
		Server_Handle("/lux",Link_ID);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481b      	ldr	r0, [pc, #108]	; (8001b78 <Server_Start+0x350>)
 8001b0c:	f7ff fb5c 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b14:	f001 faf4 	bl	8003100 <HAL_Delay>
}
 8001b18:	e0be      	b.n	8001c98 <Server_Start+0x470>
 8001b1a:	bf00      	nop
 8001b1c:	08009654 	.word	0x08009654
 8001b20:	0800965c 	.word	0x0800965c
 8001b24:	08009558 	.word	0x08009558
 8001b28:	2000023c 	.word	0x2000023c
 8001b2c:	20000308 	.word	0x20000308
 8001b30:	08009668 	.word	0x08009668
 8001b34:	0800966c 	.word	0x0800966c
 8001b38:	08009674 	.word	0x08009674
 8001b3c:	0800967c 	.word	0x0800967c
 8001b40:	08009684 	.word	0x08009684
 8001b44:	080095b0 	.word	0x080095b0
 8001b48:	0800968c 	.word	0x0800968c
 8001b4c:	20000244 	.word	0x20000244
 8001b50:	08009694 	.word	0x08009694
 8001b54:	0800969c 	.word	0x0800969c
 8001b58:	20000245 	.word	0x20000245
 8001b5c:	200002ec 	.word	0x200002ec
 8001b60:	080095c0 	.word	0x080095c0
 8001b64:	2000024c 	.word	0x2000024c
 8001b68:	20000248 	.word	0x20000248
 8001b6c:	20000240 	.word	0x20000240
 8001b70:	08009560 	.word	0x08009560
 8001b74:	080095d0 	.word	0x080095d0
 8001b78:	08009620 	.word	0x08009620
	else if (Look_for("/time", buftostoreheader) == 1)
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4619      	mov	r1, r3
 8001b82:	4847      	ldr	r0, [pc, #284]	; (8001ca0 <Server_Start+0x478>)
 8001b84:	f000 f8e8 	bl	8001d58 <Look_for>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d109      	bne.n	8001ba2 <Server_Start+0x37a>
		Server_Handle("/time",Link_ID);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4619      	mov	r1, r3
 8001b92:	4843      	ldr	r0, [pc, #268]	; (8001ca0 <Server_Start+0x478>)
 8001b94:	f7ff fb18 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9c:	f001 fab0 	bl	8003100 <HAL_Delay>
}
 8001ba0:	e07a      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/led", buftostoreheader) == 1)
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	483e      	ldr	r0, [pc, #248]	; (8001ca4 <Server_Start+0x47c>)
 8001baa:	f000 f8d5 	bl	8001d58 <Look_for>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d126      	bne.n	8001c02 <Server_Start+0x3da>
			if(check == 1)
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <Server_Start+0x480>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10c      	bne.n	8001bd6 <Server_Start+0x3ae>
				{led=led_on;
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <Server_Start+0x484>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a3b      	ldr	r2, [pc, #236]	; (8001cb0 <Server_Start+0x488>)
 8001bc2:	6013      	str	r3, [r2, #0]
				check = 0;
 8001bc4:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <Server_Start+0x480>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2120      	movs	r1, #32
 8001bce:	4839      	ldr	r0, [pc, #228]	; (8001cb4 <Server_Start+0x48c>)
 8001bd0:	f002 f973 	bl	8003eba <HAL_GPIO_WritePin>
 8001bd4:	e00b      	b.n	8001bee <Server_Start+0x3c6>
				{led=led_off;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <Server_Start+0x490>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a35      	ldr	r2, [pc, #212]	; (8001cb0 <Server_Start+0x488>)
 8001bdc:	6013      	str	r3, [r2, #0]
				check = 1;
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <Server_Start+0x480>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2120      	movs	r1, #32
 8001be8:	4832      	ldr	r0, [pc, #200]	; (8001cb4 <Server_Start+0x48c>)
 8001bea:	f002 f966 	bl	8003eba <HAL_GPIO_WritePin>
			Server_Handle("/led",Link_ID);
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	482c      	ldr	r0, [pc, #176]	; (8001ca4 <Server_Start+0x47c>)
 8001bf4:	f7ff fae8 	bl	80011c8 <Server_Handle>
			HAL_Delay(500);
 8001bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bfc:	f001 fa80 	bl	8003100 <HAL_Delay>
}
 8001c00:	e04a      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/set_time", buftostoreheader) == 1)
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	4619      	mov	r1, r3
 8001c08:	482c      	ldr	r0, [pc, #176]	; (8001cbc <Server_Start+0x494>)
 8001c0a:	f000 f8a5 	bl	8001d58 <Look_for>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d109      	bne.n	8001c28 <Server_Start+0x400>
		Server_Handle("/set_time",Link_ID);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4828      	ldr	r0, [pc, #160]	; (8001cbc <Server_Start+0x494>)
 8001c1a:	f7ff fad5 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c22:	f001 fa6d 	bl	8003100 <HAL_Delay>
}
 8001c26:	e037      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/set_alarm", buftostoreheader) == 1)
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <Server_Start+0x498>)
 8001c30:	f000 f892 	bl	8001d58 <Look_for>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d109      	bne.n	8001c4e <Server_Start+0x426>
		Server_Handle("/set_alarm",Link_ID);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4820      	ldr	r0, [pc, #128]	; (8001cc0 <Server_Start+0x498>)
 8001c40:	f7ff fac2 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c48:	f001 fa5a 	bl	8003100 <HAL_Delay>
}
 8001c4c:	e024      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/home", buftostoreheader) == 1)
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	4619      	mov	r1, r3
 8001c54:	481b      	ldr	r0, [pc, #108]	; (8001cc4 <Server_Start+0x49c>)
 8001c56:	f000 f87f 	bl	8001d58 <Look_for>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d109      	bne.n	8001c74 <Server_Start+0x44c>
		Server_Handle("/home",Link_ID);
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <Server_Start+0x49c>)
 8001c66:	f7ff faaf 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001c6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c6e:	f001 fa47 	bl	8003100 <HAL_Delay>
}
 8001c72:	e011      	b.n	8001c98 <Server_Start+0x470>
	else if (Look_for("/favicon.ico", buftostoreheader) == 1);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <Server_Start+0x4a0>)
 8001c7c:	f000 f86c 	bl	8001d58 <Look_for>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d008      	beq.n	8001c98 <Server_Start+0x470>
		Server_Handle("/ ", Link_ID);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4810      	ldr	r0, [pc, #64]	; (8001ccc <Server_Start+0x4a4>)
 8001c8c:	f7ff fa9c 	bl	80011c8 <Server_Handle>
		HAL_Delay(500);
 8001c90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c94:	f001 fa34 	bl	8003100 <HAL_Delay>
}
 8001c98:	bf00      	nop
 8001c9a:	3788      	adds	r7, #136	; 0x88
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	080095fc 	.word	0x080095fc
 8001ca4:	0800964c 	.word	0x0800964c
 8001ca8:	200002e0 	.word	0x200002e0
 8001cac:	20000014 	.word	0x20000014
 8001cb0:	200005bc 	.word	0x200005bc
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	20000018 	.word	0x20000018
 8001cbc:	08009598 	.word	0x08009598
 8001cc0:	080095a4 	.word	0x080095a4
 8001cc4:	080096a8 	.word	0x080096a8
 8001cc8:	080096b0 	.word	0x080096b0
 8001ccc:	080096c0 	.word	0x080096c0

08001cd0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <Ringbuf_init+0x38>)
 8001cd6:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <Ringbuf_init+0x3c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <Ringbuf_init+0x40>)
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <Ringbuf_init+0x44>)
 8001cde:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <Ringbuf_init+0x48>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <Ringbuf_init+0x48>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <Ringbuf_init+0x48>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <Ringbuf_init+0x48>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	60da      	str	r2, [r3, #12]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000618 	.word	0x20000618
 8001d0c:	20000250 	.word	0x20000250
 8001d10:	20000614 	.word	0x20000614
 8001d14:	20000298 	.word	0x20000298
 8001d18:	200005d4 	.word	0x200005d4

08001d1c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d32:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d007      	beq.n	8001d4e <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	79f9      	ldrb	r1, [r7, #7]
 8001d46:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <Look_for>:

int Look_for (char *str, char *buffertolookinto)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe f9fe 	bl	8000164 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8001d6c:	6838      	ldr	r0, [r7, #0]
 8001d6e:	f7fe f9f9 	bl	8000164 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8001d7e:	e002      	b.n	8001d86 <Look_for+0x2e>
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	3301      	adds	r3, #1
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	440b      	add	r3, r1
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d1f2      	bne.n	8001d80 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx])
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	440b      	add	r3, r1
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d111      	bne.n	8001dd2 <Look_for+0x7a>
	{
		while (str[so_far] == buffertolookinto[indx])
 8001dae:	e005      	b.n	8001dbc <Look_for+0x64>
		{
			so_far++;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
			indx++;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	3301      	adds	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
		while (str[so_far] == buffertolookinto[indx])
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	440b      	add	r3, r1
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d0ef      	beq.n	8001db0 <Look_for+0x58>
 8001dd0:	e008      	b.n	8001de4 <Look_for+0x8c>
		}
	}
	else
	{
		so_far =0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
		if (indx >= bufferlength) return -1;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbcf      	blt.n	8001d7e <Look_for+0x26>
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	e007      	b.n	8001df4 <Look_for+0x9c>
		goto repeat;
	}

	if (so_far == stringlength) return 1;
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d101      	bne.n	8001df0 <Look_for+0x98>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e001      	b.n	8001df4 <Look_for+0x9c>
	else return -1;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <Uart_read>:

int Uart_read(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <Uart_read+0x48>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <Uart_read+0x48>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d102      	bne.n	8001e18 <Uart_read+0x1c>
  {
    return -1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	e010      	b.n	8001e3a <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <Uart_read+0x48>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <Uart_read+0x48>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <Uart_read+0x48>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <Uart_read+0x48>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8001e38:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000618 	.word	0x20000618

08001e48 <Uart_write>:

void Uart_write(int c)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <Uart_write+0x5c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e62:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8001e64:	bf00      	nop
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <Uart_write+0x5c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d0f9      	beq.n	8001e66 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <Uart_write+0x5c>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <Uart_write+0x5c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	b2c9      	uxtb	r1, r1
 8001e80:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <Uart_write+0x5c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <Uart_write+0x60>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <Uart_write+0x60>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e98:	60da      	str	r2, [r3, #12]
	}
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	20000614 	.word	0x20000614
 8001ea8:	200005d4 	.word	0x200005d4

08001eac <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <IsDataAvailable+0x24>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <IsDataAvailable+0x24>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	20000618 	.word	0x20000618

08001ed4 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001edc:	e006      	b.n	8001eec <Uart_sendstring+0x18>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ffae 	bl	8001e48 <Uart_write>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f4      	bne.n	8001ede <Uart_sendstring+0xa>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <GetDataFromBuffer>:

  while(*s) Uart_write(*s++);
}

void GetDataFromBuffer (char *startString, char *endString, char *buffertocopyfrom, char *buffertocopyinto)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	; 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
	int startStringLength = strlen (startString);
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f7fe f92a 	bl	8000164 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	623b      	str	r3, [r7, #32]
	int endStringLength   = strlen (endString);
 8001f14:	68b8      	ldr	r0, [r7, #8]
 8001f16:	f7fe f925 	bl	8000164 <strlen>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	61fb      	str	r3, [r7, #28]
	int so_far = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indx = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
	int startposition = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
	int endposition = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]

repeat1:
	while (startString[so_far] != buffertocopyfrom[indx]) indx++;
 8001f2e:	e002      	b.n	8001f36 <GetDataFromBuffer+0x3a>
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	3301      	adds	r3, #1
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	440b      	add	r3, r1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d1f2      	bne.n	8001f30 <GetDataFromBuffer+0x34>
	if (startString[so_far] == buffertocopyfrom[indx])
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	440b      	add	r3, r1
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d110      	bne.n	8001f80 <GetDataFromBuffer+0x84>
	{
		while (startString[so_far] == buffertocopyfrom[indx])
 8001f5e:	e005      	b.n	8001f6c <GetDataFromBuffer+0x70>
		{
			so_far++;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	3301      	adds	r3, #1
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	3301      	adds	r3, #1
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
		while (startString[so_far] == buffertocopyfrom[indx])
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	440b      	add	r3, r1
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d0ef      	beq.n	8001f60 <GetDataFromBuffer+0x64>
		}
	}

	if (so_far == startStringLength) startposition = indx;
 8001f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d104      	bne.n	8001f92 <GetDataFromBuffer+0x96>
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	61bb      	str	r3, [r7, #24]
	{
		so_far =0;
		goto repeat1;
	}

	so_far = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f90:	e006      	b.n	8001fa0 <GetDataFromBuffer+0xa4>
		so_far =0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat1;
 8001f96:	e7ca      	b.n	8001f2e <GetDataFromBuffer+0x32>

repeat2:
	while (endString[so_far] != buffertocopyfrom[indx]) indx++;
 8001f98:	e002      	b.n	8001fa0 <GetDataFromBuffer+0xa4>
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	440b      	add	r3, r1
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1f2      	bne.n	8001f9a <GetDataFromBuffer+0x9e>
	if (endString[so_far] == buffertocopyfrom[indx])
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d110      	bne.n	8001fea <GetDataFromBuffer+0xee>
	{
		while (endString[so_far] == buffertocopyfrom[indx])
 8001fc8:	e005      	b.n	8001fd6 <GetDataFromBuffer+0xda>
		{
			so_far++;
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	3301      	adds	r3, #1
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
			indx++;
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
		while (endString[so_far] == buffertocopyfrom[indx])
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	4413      	add	r3, r2
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d0ef      	beq.n	8001fca <GetDataFromBuffer+0xce>
		}
	}

	if (so_far == endStringLength) endposition = indx-endStringLength;
 8001fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d10a      	bne.n	8002008 <GetDataFromBuffer+0x10c>
 8001ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
	{
		so_far =0;
		goto repeat2;
	}

	so_far = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	indx=0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28

	for (int i=startposition; i<endposition; i++)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e010      	b.n	800202a <GetDataFromBuffer+0x12e>
		so_far =0;
 8002008:	2300      	movs	r3, #0
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
		goto repeat2;
 800200c:	e7c4      	b.n	8001f98 <GetDataFromBuffer+0x9c>
	{
		buffertocopyinto[indx] = buffertocopyfrom[i];
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	441a      	add	r2, r3
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	440b      	add	r3, r1
 800201a:	7812      	ldrb	r2, [r2, #0]
 800201c:	701a      	strb	r2, [r3, #0]
		indx++;
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	3301      	adds	r3, #1
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i=startposition; i<endposition; i++)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbed      	blt.n	800200e <GetDataFromBuffer+0x112>
	}
}
 8002032:	bf00      	nop
 8002034:	3730      	adds	r7, #48	; 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <Uart_flush>:

void Uart_flush (void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <Uart_flush+0x20>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2240      	movs	r2, #64	; 0x40
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fe95 	bl	8005d78 <memset>
	_rx_buffer->head = 0;
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <Uart_flush+0x20>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000618 	.word	0x20000618

08002060 <Uart_peek>:

int Uart_peek()
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <Uart_peek+0x30>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <Uart_peek+0x30>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	429a      	cmp	r2, r3
 8002072:	d102      	bne.n	800207a <Uart_peek+0x1a>
  {
    return -1;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	e005      	b.n	8002086 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <Uart_peek+0x30>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <Uart_peek+0x30>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000618 	.word	0x20000618

08002094 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe f85e 	bl	8000164 <strlen>
 80020a8:	4603      	mov	r3, r0
 80020aa:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 80020b0:	bf00      	nop
 80020b2:	f7ff fefb 	bl	8001eac <IsDataAvailable>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0fa      	beq.n	80020b2 <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 80020bc:	e01b      	b.n	80020f6 <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <Copy_upto+0xe4>)
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <Copy_upto+0xe4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	4403      	add	r3, r0
 80020ce:	5c8a      	ldrb	r2, [r1, r2]
 80020d0:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <Copy_upto+0xe4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <Copy_upto+0xe4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	3301      	adds	r3, #1
 80020e8:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80020ea:	bf00      	nop
 80020ec:	f7ff fede 	bl	8001eac <IsDataAvailable>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0fa      	beq.n	80020ec <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 80020f6:	f7ff ffb3 	bl	8002060 <Uart_peek>
 80020fa:	4601      	mov	r1, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4299      	cmp	r1, r3
 8002106:	d1da      	bne.n	80020be <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8002108:	e019      	b.n	800213e <Copy_upto+0xaa>
	{
		so_far++;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002110:	f7ff fe74 	bl	8001dfc <Uart_read>
 8002114:	4601      	mov	r1, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	613a      	str	r2, [r7, #16]
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d101      	bne.n	8002132 <Copy_upto+0x9e>
 800212e:	2301      	movs	r3, #1
 8002130:	e01d      	b.n	800216e <Copy_upto+0xda>
		while (!IsDataAvailable());
 8002132:	bf00      	nop
 8002134:	f7ff feba 	bl	8001eac <IsDataAvailable>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0fa      	beq.n	8002134 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 800213e:	f7ff ff8f 	bl	8002060 <Uart_peek>
 8002142:	4601      	mov	r1, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4299      	cmp	r1, r3
 800214e:	d0dc      	beq.n	800210a <Copy_upto+0x76>
	}

	if (so_far != len)
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d002      	beq.n	800215e <Copy_upto+0xca>
	{
		so_far = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
		goto again;
 800215c:	e7a8      	b.n	80020b0 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d101      	bne.n	800216a <Copy_upto+0xd6>
 8002166:	2301      	movs	r3, #1
 8002168:	e001      	b.n	800216e <Copy_upto+0xda>
	else return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000618 	.word	0x20000618

0800217c <Get_after>:

int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	460b      	mov	r3, r1
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string) != 1);
 800218a:	bf00      	nop
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f821 	bl	80021d4 <Wait_for>
 8002192:	4603      	mov	r3, r0
 8002194:	2b01      	cmp	r3, #1
 8002196:	d1f9      	bne.n	800218c <Get_after+0x10>
	for (int indx=0; indx<numberofchars; indx++)
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e010      	b.n	80021c0 <Get_after+0x44>
	{
		while (!(IsDataAvailable()));
 800219e:	bf00      	nop
 80021a0:	f7ff fe84 	bl	8001eac <IsDataAvailable>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0fa      	beq.n	80021a0 <Get_after+0x24>
		buffertosave[indx] = Uart_read();
 80021aa:	f7ff fe27 	bl	8001dfc <Uart_read>
 80021ae:	4601      	mov	r1, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbea      	blt.n	800219e <Get_after+0x22>
	}
	return 1;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <Wait_for>:


int Wait_for (char *string)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7fd ffbf 	bl	8000164 <strlen>
 80021e6:	4603      	mov	r3, r0
 80021e8:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80021ea:	bf00      	nop
 80021ec:	f7ff fe5e 	bl	8001eac <IsDataAvailable>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0fa      	beq.n	80021ec <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80021f6:	e008      	b.n	800220a <Wait_for+0x36>
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <Wait_for+0xa4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <Wait_for+0xa4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
 800220a:	f7ff ff29 	bl	8002060 <Uart_peek>
 800220e:	4601      	mov	r1, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4299      	cmp	r1, r3
 800221a:	d1ed      	bne.n	80021f8 <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 800221c:	e010      	b.n	8002240 <Wait_for+0x6c>
	{
		so_far++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8002224:	f7ff fdea 	bl	8001dfc <Uart_read>
		if (so_far == len) return 1;
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	d101      	bne.n	8002234 <Wait_for+0x60>
 8002230:	2301      	movs	r3, #1
 8002232:	e01d      	b.n	8002270 <Wait_for+0x9c>
		while (!IsDataAvailable());
 8002234:	bf00      	nop
 8002236:	f7ff fe39 	bl	8001eac <IsDataAvailable>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0fa      	beq.n	8002236 <Wait_for+0x62>
	while (Uart_peek() == string [so_far])
 8002240:	f7ff ff0e 	bl	8002060 <Uart_peek>
 8002244:	4601      	mov	r1, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4299      	cmp	r1, r3
 8002250:	d0e5      	beq.n	800221e <Wait_for+0x4a>
	}

	if (so_far != len)
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d002      	beq.n	8002260 <Wait_for+0x8c>
	{
		so_far = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
		goto again;
 800225e:	e7c4      	b.n	80021ea <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	429a      	cmp	r2, r3
 8002266:	d101      	bne.n	800226c <Wait_for+0x98>
 8002268:	2301      	movs	r3, #1
 800226a:	e001      	b.n	8002270 <Wait_for+0x9c>
	else return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000618 	.word	0x20000618

0800227c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d013      	beq.n	80022c6 <Uart_isr+0x4a>
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <Uart_isr+0xac>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fd2c 	bl	8001d1c <store_char>
        return;
 80022c4:	e02c      	b.n	8002320 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d027      	beq.n	8002320 <Uart_isr+0xa4>
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d022      	beq.n	8002320 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <Uart_isr+0xb0>)
 80022dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <Uart_isr+0xb0>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d108      	bne.n	80022f8 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80022f6:	e013      	b.n	8002320 <Uart_isr+0xa4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <Uart_isr+0xb0>)
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <Uart_isr+0xb0>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <Uart_isr+0xb0>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	3301      	adds	r3, #1
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <Uart_isr+0xb0>)
 800230e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	7bba      	ldrb	r2, [r7, #14]
 800231c:	605a      	str	r2, [r3, #4]
    	return;
 800231e:	bf00      	nop
    }
}
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000618 	.word	0x20000618
 800232c:	20000298 	.word	0x20000298

08002330 <get_time>:
/* USER CODE BEGIN 0 */



void get_time(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002336:	463b      	mov	r3, r7
 8002338:	2200      	movs	r2, #0
 800233a:	4619      	mov	r1, r3
 800233c:	481e      	ldr	r0, [pc, #120]	; (80023b8 <get_time+0x88>)
 800233e:	f002 fcbf 	bl	8004cc0 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	2200      	movs	r2, #0
 8002346:	4619      	mov	r1, r3
 8002348:	481b      	ldr	r0, [pc, #108]	; (80023b8 <get_time+0x88>)
 800234a:	f002 fe47 	bl	8004fdc <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800234e:	783b      	ldrb	r3, [r7, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	787b      	ldrb	r3, [r7, #1]
 8002354:	4619      	mov	r1, r3
 8002356:	78bb      	ldrb	r3, [r7, #2]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	460b      	mov	r3, r1
 800235c:	4917      	ldr	r1, [pc, #92]	; (80023bc <get_time+0x8c>)
 800235e:	4818      	ldr	r0, [pc, #96]	; (80023c0 <get_time+0x90>)
 8002360:	f004 f962 	bl	8006628 <siprintf>
  Hours = gTime.Hours;
 8002364:	783b      	ldrb	r3, [r7, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <get_time+0x94>)
 800236a:	601a      	str	r2, [r3, #0]
  Minutes = gTime.Minutes;
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	461a      	mov	r2, r3
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <get_time+0x98>)
 8002372:	601a      	str	r2, [r3, #0]
  Seconds = gTime.Seconds;
 8002374:	78bb      	ldrb	r3, [r7, #2]
 8002376:	461a      	mov	r2, r3
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <get_time+0x9c>)
 800237a:	601a      	str	r2, [r3, #0]
  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	461a      	mov	r2, r3
 8002380:	797b      	ldrb	r3, [r7, #5]
 8002382:	4619      	mov	r1, r3
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	4910      	ldr	r1, [pc, #64]	; (80023d0 <get_time+0xa0>)
 8002390:	4810      	ldr	r0, [pc, #64]	; (80023d4 <get_time+0xa4>)
 8002392:	f004 f949 	bl	8006628 <siprintf>
  Date = gDate.Date;
 8002396:	79bb      	ldrb	r3, [r7, #6]
 8002398:	461a      	mov	r2, r3
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <get_time+0xa8>)
 800239c:	601a      	str	r2, [r3, #0]
  Month = gDate.Month;
 800239e:	797b      	ldrb	r3, [r7, #5]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <get_time+0xac>)
 80023a4:	601a      	str	r2, [r3, #0]
  Year = 2000 + gDate.Year;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80023ac:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <get_time+0xb0>)
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200006dc 	.word	0x200006dc
 80023bc:	080096c4 	.word	0x080096c4
 80023c0:	200006f4 	.word	0x200006f4
 80023c4:	2000069c 	.word	0x2000069c
 80023c8:	20000798 	.word	0x20000798
 80023cc:	2000079c 	.word	0x2000079c
 80023d0:	080096d4 	.word	0x080096d4
 80023d4:	20000710 	.word	0x20000710
 80023d8:	200006a4 	.word	0x200006a4
 80023dc:	20000704 	.word	0x20000704
 80023e0:	20000700 	.word	0x20000700

080023e4 <ADC_Get_Value>:
	  Year = 2000 + gDate.Year;
}
*/

uint16_t ADC_Get_Value (void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
	uint16_t val = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc2);
 80023ee:	480a      	ldr	r0, [pc, #40]	; (8002418 <ADC_Get_Value+0x34>)
 80023f0:	f000 ff80 	bl	80032f4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80023f4:	2164      	movs	r1, #100	; 0x64
 80023f6:	4808      	ldr	r0, [pc, #32]	; (8002418 <ADC_Get_Value+0x34>)
 80023f8:	f001 f856 	bl	80034a8 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc2);
 80023fc:	4806      	ldr	r0, [pc, #24]	; (8002418 <ADC_Get_Value+0x34>)
 80023fe:	f001 f94d 	bl	800369c <HAL_ADC_GetValue>
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc2);
 8002406:	4804      	ldr	r0, [pc, #16]	; (8002418 <ADC_Get_Value+0x34>)
 8002408:	f001 f822 	bl	8003450 <HAL_ADC_Stop>
	return val;
 800240c:	88fb      	ldrh	r3, [r7, #6]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000668 	.word	0x20000668

0800241c <delay>:
uint16_t ADC_Value = 0;
uint8_t count = 0;

uint16_t Value_Buf [4];
void delay (uint16_t time)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <delay+0x2c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim4))<time);
 800242e:	bf00      	nop
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <delay+0x2c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	429a      	cmp	r2, r3
 800243a:	d3f9      	bcc.n	8002430 <delay+0x14>
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2000061c 	.word	0x2000061c

0800244c <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246a:	2301      	movs	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2302      	movs	r3, #2
 8002470:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4619      	mov	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f001 fbad 	bl	8003bd8 <HAL_GPIO_Init>
}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f001 fb90 	bl	8003bd8 <HAL_GPIO_Init>
}
 80024b8:	bf00      	nop
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <DS18B20_Start>:

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start (void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80024ca:	2102      	movs	r1, #2
 80024cc:	4813      	ldr	r0, [pc, #76]	; (800251c <DS18B20_Start+0x5c>)
 80024ce:	f7ff ffbd 	bl	800244c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80024d2:	2200      	movs	r2, #0
 80024d4:	2102      	movs	r1, #2
 80024d6:	4811      	ldr	r0, [pc, #68]	; (800251c <DS18B20_Start+0x5c>)
 80024d8:	f001 fcef 	bl	8003eba <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80024dc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80024e0:	f7ff ff9c 	bl	800241c <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80024e4:	2102      	movs	r1, #2
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <DS18B20_Start+0x5c>)
 80024e8:	f7ff ffcd 	bl	8002486 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 80024ec:	2050      	movs	r0, #80	; 0x50
 80024ee:	f7ff ff95 	bl	800241c <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80024f2:	2102      	movs	r1, #2
 80024f4:	4809      	ldr	r0, [pc, #36]	; (800251c <DS18B20_Start+0x5c>)
 80024f6:	f001 fcc9 	bl	8003e8c <HAL_GPIO_ReadPin>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <DS18B20_Start+0x46>
 8002500:	2301      	movs	r3, #1
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	e001      	b.n	800250a <DS18B20_Start+0x4a>
	else Response = -1;
 8002506:	23ff      	movs	r3, #255	; 0xff
 8002508:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 800250a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800250e:	f7ff ff85 	bl	800241c <delay>

	return Response;
 8002512:	79fb      	ldrb	r3, [r7, #7]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40010800 	.word	0x40010800

08002520 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800252a:	2102      	movs	r1, #2
 800252c:	481d      	ldr	r0, [pc, #116]	; (80025a4 <DS18B20_Write+0x84>)
 800252e:	f7ff ff8d 	bl	800244c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e02e      	b.n	8002596 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8002538:	79fa      	ldrb	r2, [r7, #7]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	fa42 f303 	asr.w	r3, r2, r3
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8002548:	2102      	movs	r1, #2
 800254a:	4816      	ldr	r0, [pc, #88]	; (80025a4 <DS18B20_Write+0x84>)
 800254c:	f7ff ff7e 	bl	800244c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002550:	2200      	movs	r2, #0
 8002552:	2102      	movs	r1, #2
 8002554:	4813      	ldr	r0, [pc, #76]	; (80025a4 <DS18B20_Write+0x84>)
 8002556:	f001 fcb0 	bl	8003eba <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff ff5e 	bl	800241c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8002560:	2102      	movs	r1, #2
 8002562:	4810      	ldr	r0, [pc, #64]	; (80025a4 <DS18B20_Write+0x84>)
 8002564:	f7ff ff8f 	bl	8002486 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8002568:	2032      	movs	r0, #50	; 0x32
 800256a:	f7ff ff57 	bl	800241c <delay>
 800256e:	e00f      	b.n	8002590 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8002570:	2102      	movs	r1, #2
 8002572:	480c      	ldr	r0, [pc, #48]	; (80025a4 <DS18B20_Write+0x84>)
 8002574:	f7ff ff6a 	bl	800244c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002578:	2200      	movs	r2, #0
 800257a:	2102      	movs	r1, #2
 800257c:	4809      	ldr	r0, [pc, #36]	; (80025a4 <DS18B20_Write+0x84>)
 800257e:	f001 fc9c 	bl	8003eba <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8002582:	2032      	movs	r0, #50	; 0x32
 8002584:	f7ff ff4a 	bl	800241c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8002588:	2102      	movs	r1, #2
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <DS18B20_Write+0x84>)
 800258c:	f7ff ff7b 	bl	8002486 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b07      	cmp	r3, #7
 800259a:	ddcd      	ble.n	8002538 <DS18B20_Write+0x18>
		}
	}
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010800 	.word	0x40010800

080025a8 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80025b2:	2102      	movs	r1, #2
 80025b4:	481a      	ldr	r0, [pc, #104]	; (8002620 <DS18B20_Read+0x78>)
 80025b6:	f7ff ff66 	bl	8002486 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	e026      	b.n	800260e <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80025c0:	2102      	movs	r1, #2
 80025c2:	4817      	ldr	r0, [pc, #92]	; (8002620 <DS18B20_Read+0x78>)
 80025c4:	f7ff ff42 	bl	800244c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 80025c8:	2200      	movs	r2, #0
 80025ca:	2102      	movs	r1, #2
 80025cc:	4814      	ldr	r0, [pc, #80]	; (8002620 <DS18B20_Read+0x78>)
 80025ce:	f001 fc74 	bl	8003eba <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7ff ff22 	bl	800241c <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80025d8:	2102      	movs	r1, #2
 80025da:	4811      	ldr	r0, [pc, #68]	; (8002620 <DS18B20_Read+0x78>)
 80025dc:	f7ff ff53 	bl	8002486 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80025e0:	2102      	movs	r1, #2
 80025e2:	480f      	ldr	r0, [pc, #60]	; (8002620 <DS18B20_Read+0x78>)
 80025e4:	f001 fc52 	bl	8003e8c <HAL_GPIO_ReadPin>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80025ee:	2201      	movs	r2, #1
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	b25a      	sxtb	r2, r3
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8002602:	2032      	movs	r0, #50	; 0x32
 8002604:	f7ff ff0a 	bl	800241c <delay>
	for (int i=0;i<8;i++)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b07      	cmp	r3, #7
 8002612:	ddd5      	ble.n	80025c0 <DS18B20_Read+0x18>
	}
	return value;
 8002614:	79fb      	ldrb	r3, [r7, #7]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40010800 	.word	0x40010800
 8002624:	00000000 	.word	0x00000000

08002628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002628:	b598      	push	{r3, r4, r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800262c:	f000 fd06 	bl	800303c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002630:	f000 f8ea 	bl	8002808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002634:	f000 fa92 	bl	8002b5c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002638:	f000 fa66 	bl	8002b08 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800263c:	f000 fa14 	bl	8002a68 <MX_TIM4_Init>
  MX_RTC_Init();
 8002640:	f000 f9be 	bl	80029c0 <MX_RTC_Init>
  MX_ADC1_Init();
 8002644:	f000 f940 	bl	80028c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002648:	f000 f97c 	bl	8002944 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 800264c:	485c      	ldr	r0, [pc, #368]	; (80027c0 <main+0x198>)
 800264e:	f003 f83b 	bl	80056c8 <HAL_TIM_Base_Start>
  ESP_Init("Redmi","a1234567","192.168.43.84");
 8002652:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <main+0x19c>)
 8002654:	495c      	ldr	r1, [pc, #368]	; (80027c8 <main+0x1a0>)
 8002656:	485d      	ldr	r0, [pc, #372]	; (80027cc <main+0x1a4>)
 8002658:	f7fe fcea 	bl	8001030 <ESP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(init_time==1)
 800265c:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <main+0x1a8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d104      	bne.n	800266e <main+0x46>
	  {
		  MX_RTC_Init();
 8002664:	f000 f9ac 	bl	80029c0 <MX_RTC_Init>
		  init_time=0;
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <main+0x1a8>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
	  }
	  	  get_time();
 800266e:	f7ff fe5f 	bl	8002330 <get_time>
	  	  HAL_Delay(500);
 8002672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002676:	f000 fd43 	bl	8003100 <HAL_Delay>




	  Presence = DS18B20_Start ();
 800267a:	f7ff ff21 	bl	80024c0 <DS18B20_Start>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	4b54      	ldr	r3, [pc, #336]	; (80027d4 <main+0x1ac>)
 8002684:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay (1);
 8002686:	2001      	movs	r0, #1
 8002688:	f000 fd3a 	bl	8003100 <HAL_Delay>
	  	  DS18B20_Write (0xCC);  // skip ROM
 800268c:	20cc      	movs	r0, #204	; 0xcc
 800268e:	f7ff ff47 	bl	8002520 <DS18B20_Write>
	  	  DS18B20_Write (0x44);  // convert t
 8002692:	2044      	movs	r0, #68	; 0x44
 8002694:	f7ff ff44 	bl	8002520 <DS18B20_Write>
	  	  HAL_Delay (800);
 8002698:	f44f 7048 	mov.w	r0, #800	; 0x320
 800269c:	f000 fd30 	bl	8003100 <HAL_Delay>

	  	  Presence = DS18B20_Start ();
 80026a0:	f7ff ff0e 	bl	80024c0 <DS18B20_Start>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <main+0x1ac>)
 80026aa:	701a      	strb	r2, [r3, #0]
	        HAL_Delay(1);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f000 fd27 	bl	8003100 <HAL_Delay>
	        DS18B20_Write (0xCC);  // skip ROM
 80026b2:	20cc      	movs	r0, #204	; 0xcc
 80026b4:	f7ff ff34 	bl	8002520 <DS18B20_Write>
	        DS18B20_Write (0xBE);  // Read Scratch-pad
 80026b8:	20be      	movs	r0, #190	; 0xbe
 80026ba:	f7ff ff31 	bl	8002520 <DS18B20_Write>

	        Temp_byte1 = DS18B20_Read();
 80026be:	f7ff ff73 	bl	80025a8 <DS18B20_Read>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <main+0x1b0>)
 80026c8:	701a      	strb	r2, [r3, #0]
	  	  Temp_byte2 = DS18B20_Read();
 80026ca:	f7ff ff6d 	bl	80025a8 <DS18B20_Read>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b42      	ldr	r3, [pc, #264]	; (80027dc <main+0x1b4>)
 80026d4:	701a      	strb	r2, [r3, #0]
	  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <main+0x1b4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	b21a      	sxth	r2, r3
 80026de:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <main+0x1b0>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <main+0x1b8>)
 80026ec:	801a      	strh	r2, [r3, #0]
	  	  Temperature = (float)TEMP/16;
 80026ee:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <main+0x1b8>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fad8 	bl	8000ca8 <__aeabi_ui2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fbde 	bl	8000ec0 <__aeabi_fdiv>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <main+0x1bc>)
 800270a:	601a      	str	r2, [r3, #0]
	  	  temper = Temperature;
 800270c:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <main+0x1bc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a35      	ldr	r2, [pc, #212]	; (80027e8 <main+0x1c0>)
 8002712:	6013      	str	r3, [r2, #0]
	  	  HAL_Delay(1000);
 8002714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002718:	f000 fcf2 	bl	8003100 <HAL_Delay>


		  ADC_Value = ADC_Get_Value();
 800271c:	f7ff fe62 	bl	80023e4 <ADC_Get_Value>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <main+0x1c4>)
 8002726:	801a      	strh	r2, [r3, #0]
		  Lux = ((float) ADC_Value * 5.0 / 1023) * 200;
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <main+0x1c4>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fabb 	bl	8000ca8 <__aeabi_ui2f>
 8002732:	4603      	mov	r3, r0
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fe81 	bl	800043c <__aeabi_f2d>
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <main+0x1c8>)
 8002740:	f7fd fed4 	bl	80004ec <__aeabi_dmul>
 8002744:	4603      	mov	r3, r0
 8002746:	460c      	mov	r4, r1
 8002748:	4618      	mov	r0, r3
 800274a:	4621      	mov	r1, r4
 800274c:	a31a      	add	r3, pc, #104	; (adr r3, 80027b8 <main+0x190>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd fff5 	bl	8000740 <__aeabi_ddiv>
 8002756:	4603      	mov	r3, r0
 8002758:	460c      	mov	r4, r1
 800275a:	4618      	mov	r0, r3
 800275c:	4621      	mov	r1, r4
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <main+0x1cc>)
 8002764:	f7fd fec2 	bl	80004ec <__aeabi_dmul>
 8002768:	4603      	mov	r3, r0
 800276a:	460c      	mov	r4, r1
 800276c:	4618      	mov	r0, r3
 800276e:	4621      	mov	r1, r4
 8002770:	f7fe f994 	bl	8000a9c <__aeabi_d2f>
 8002774:	4602      	mov	r2, r0
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <main+0x1d0>)
 8002778:	601a      	str	r2, [r3, #0]

	  	  while (start=0)
 800277a:	e010      	b.n	800279e <main+0x176>
	  	  {
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {check = 1;}
 800277c:	2120      	movs	r1, #32
 800277e:	481f      	ldr	r0, [pc, #124]	; (80027fc <main+0x1d4>)
 8002780:	f001 fb84 	bl	8003e8c <HAL_GPIO_ReadPin>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d103      	bne.n	8002792 <main+0x16a>
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <main+0x1d8>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e002      	b.n	8002798 <main+0x170>
	  	  else {check = 0;}
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <main+0x1d8>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
	  	  start = 1;
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <main+0x1dc>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]
	  	  while (start=0)
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <main+0x1dc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <main+0x1dc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e7      	bne.n	800277c <main+0x154>
	  	  }

	  	  //if ( buzz != 0) alarm();

		  Server_Start();
 80027ac:	f7ff f83c 	bl	8001828 <Server_Start>
	  if(init_time==1)
 80027b0:	e754      	b.n	800265c <main+0x34>
 80027b2:	bf00      	nop
 80027b4:	f3af 8000 	nop.w
 80027b8:	00000000 	.word	0x00000000
 80027bc:	408ff800 	.word	0x408ff800
 80027c0:	2000061c 	.word	0x2000061c
 80027c4:	080096e4 	.word	0x080096e4
 80027c8:	080096f4 	.word	0x080096f4
 80027cc:	08009700 	.word	0x08009700
 80027d0:	200002ec 	.word	0x200002ec
 80027d4:	200002f8 	.word	0x200002f8
 80027d8:	200006d8 	.word	0x200006d8
 80027dc:	200007a0 	.word	0x200007a0
 80027e0:	200006a2 	.word	0x200006a2
 80027e4:	200002f4 	.word	0x200002f4
 80027e8:	20000664 	.word	0x20000664
 80027ec:	200002f0 	.word	0x200002f0
 80027f0:	40140000 	.word	0x40140000
 80027f4:	40690000 	.word	0x40690000
 80027f8:	200002e8 	.word	0x200002e8
 80027fc:	40010800 	.word	0x40010800
 8002800:	200002e0 	.word	0x200002e0
 8002804:	200002e4 	.word	0x200002e4

08002808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800280e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002812:	2228      	movs	r2, #40	; 0x28
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f003 faae 	bl	8005d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002838:	2309      	movs	r3, #9
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800283c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002842:	2300      	movs	r3, #0
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002846:	2301      	movs	r3, #1
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800284a:	2301      	movs	r3, #1
 800284c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284e:	2302      	movs	r3, #2
 8002850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002858:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fb70 	bl	8003f48 <HAL_RCC_OscConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800286e:	f000 f9ed 	bl	8002c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002872:	230f      	movs	r3, #15
 8002874:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002876:	2302      	movs	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800287e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002882:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2102      	movs	r1, #2
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fdda 	bl	8004448 <HAL_RCC_ClockConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800289a:	f000 f9d7 	bl	8002c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800289e:	2303      	movs	r3, #3
 80028a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 ff65 	bl	8004780 <HAL_RCCEx_PeriphCLKConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80028bc:	f000 f9c6 	bl	8002c4c <Error_Handler>
  }
}
 80028c0:	bf00      	nop
 80028c2:	3750      	adds	r7, #80	; 0x50
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_ADC1_Init+0x74>)
 80028da:	4a19      	ldr	r2, [pc, #100]	; (8002940 <MX_ADC1_Init+0x78>)
 80028dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <MX_ADC1_Init+0x74>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028e4:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_ADC1_Init+0x74>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <MX_ADC1_Init+0x74>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_ADC1_Init+0x74>)
 80028f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80028f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <MX_ADC1_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_ADC1_Init+0x74>)
 8002900:	2201      	movs	r2, #1
 8002902:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <MX_ADC1_Init+0x74>)
 8002906:	f000 fc1d 	bl	8003144 <HAL_ADC_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002910:	f000 f99c 	bl	8002c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002914:	2301      	movs	r3, #1
 8002916:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002918:	2301      	movs	r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_ADC1_Init+0x74>)
 8002926:	f000 fec5 	bl	80036b4 <HAL_ADC_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002930:	f000 f98c 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200006a8 	.word	0x200006a8
 8002940:	40012400 	.word	0x40012400

08002944 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_ADC2_Init+0x74>)
 8002956:	4a19      	ldr	r2, [pc, #100]	; (80029bc <MX_ADC2_Init+0x78>)
 8002958:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <MX_ADC2_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <MX_ADC2_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_ADC2_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_ADC2_Init+0x74>)
 800296e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002972:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <MX_ADC2_Init+0x74>)
 8002976:	2200      	movs	r2, #0
 8002978:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_ADC2_Init+0x74>)
 800297c:	2201      	movs	r2, #1
 800297e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <MX_ADC2_Init+0x74>)
 8002982:	f000 fbdf 	bl	8003144 <HAL_ADC_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800298c:	f000 f95e 	bl	8002c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002990:	2300      	movs	r3, #0
 8002992:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002994:	2301      	movs	r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_ADC2_Init+0x74>)
 80029a2:	f000 fe87 	bl	80036b4 <HAL_ADC_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80029ac:	f000 f94e 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000668 	.word	0x20000668
 80029bc:	40012800 	.word	0x40012800

080029c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2100      	movs	r1, #0
 80029ca:	460a      	mov	r2, r1
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	460a      	mov	r2, r1
 80029d0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <MX_RTC_Init+0x94>)
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <MX_RTC_Init+0x98>)
 80029da:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <MX_RTC_Init+0x94>)
 80029de:	f04f 32ff 	mov.w	r2, #4294967295
 80029e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <MX_RTC_Init+0x94>)
 80029e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ea:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029ec:	4819      	ldr	r0, [pc, #100]	; (8002a54 <MX_RTC_Init+0x94>)
 80029ee:	f002 f839 	bl	8004a64 <HAL_RTC_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80029f8:	f000 f928 	bl	8002c4c <Error_Handler>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */

  sTime.Hours = HoursAdd;
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <MX_RTC_Init+0x9c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MinutesAdd;
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <MX_RTC_Init+0xa0>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SecondAdd;
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <MX_RTC_Init+0xa4>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2201      	movs	r2, #1
 8002a12:	4619      	mov	r1, r3
 8002a14:	480f      	ldr	r0, [pc, #60]	; (8002a54 <MX_RTC_Init+0x94>)
 8002a16:	f002 f8bb 	bl	8004b90 <HAL_RTC_SetTime>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8002a20:	f000 f914 	bl	8002c4c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a24:	2301      	movs	r3, #1
 8002a26:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8002a28:	2311      	movs	r3, #17
 8002a2a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x16;
 8002a2c:	2316      	movs	r3, #22
 8002a2e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 8002a30:	2320      	movs	r3, #32
 8002a32:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002a34:	463b      	mov	r3, r7
 8002a36:	2201      	movs	r2, #1
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4806      	ldr	r0, [pc, #24]	; (8002a54 <MX_RTC_Init+0x94>)
 8002a3c:	f002 fa18 	bl	8004e70 <HAL_RTC_SetDate>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8002a46:	f000 f901 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200006dc 	.word	0x200006dc
 8002a58:	40002800 	.word	0x40002800
 8002a5c:	20000244 	.word	0x20000244
 8002a60:	20000245 	.word	0x20000245
 8002a64:	20000246 	.word	0x20000246

08002a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	60da      	str	r2, [r3, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002a88:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <MX_TIM4_Init+0x9c>)
 8002a8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50-1;
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002a8e:	2231      	movs	r2, #49	; 0x31
 8002a90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002a9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002aac:	4814      	ldr	r0, [pc, #80]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002aae:	f002 fdbb 	bl	8005628 <HAL_TIM_Base_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ab8:	f000 f8c8 	bl	8002c4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480d      	ldr	r0, [pc, #52]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002acc:	f002 fe46 	bl	800575c <HAL_TIM_SlaveConfigSynchro>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002ad6:	f000 f8b9 	bl	8002c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4806      	ldr	r0, [pc, #24]	; (8002b00 <MX_TIM4_Init+0x98>)
 8002ae8:	f002 ffde 	bl	8005aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002af2:	f000 f8ab 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000061c 	.word	0x2000061c
 8002b04:	40000800 	.word	0x40000800

08002b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <MX_USART3_UART_Init+0x50>)
 8002b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <MX_USART3_UART_Init+0x4c>)
 8002b40:	f003 f810 	bl	8005b64 <HAL_UART_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b4a:	f000 f87f 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200005d4 	.word	0x200005d4
 8002b58:	40004800 	.word	0x40004800

08002b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a31      	ldr	r2, [pc, #196]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002b76:	f043 0310 	orr.w	r3, r3, #16
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b88:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a2b      	ldr	r2, [pc, #172]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002b8e:	f043 0320 	orr.w	r3, r3, #32
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba0:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <MX_GPIO_Init+0xe0>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bbe:	4820      	ldr	r0, [pc, #128]	; (8002c40 <MX_GPIO_Init+0xe4>)
 8002bc0:	f001 f97b 	bl	8003eba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	481e      	ldr	r0, [pc, #120]	; (8002c44 <MX_GPIO_Init+0xe8>)
 8002bca:	f001 f976 	bl	8003eba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4619      	mov	r1, r3
 8002be6:	4816      	ldr	r0, [pc, #88]	; (8002c40 <MX_GPIO_Init+0xe4>)
 8002be8:	f000 fff6 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bec:	2320      	movs	r3, #32
 8002bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	4619      	mov	r1, r3
 8002c02:	4810      	ldr	r0, [pc, #64]	; (8002c44 <MX_GPIO_Init+0xe8>)
 8002c04:	f000 ffe8 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <MX_GPIO_Init+0xec>)
 8002c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4809      	ldr	r0, [pc, #36]	; (8002c44 <MX_GPIO_Init+0xe8>)
 8002c1e:	f000 ffdb 	bl	8003bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2028      	movs	r0, #40	; 0x28
 8002c28:	f000 ff9f 	bl	8003b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c2c:	2028      	movs	r0, #40	; 0x28
 8002c2e:	f000 ffb8 	bl	8003ba2 <HAL_NVIC_EnableIRQ>

}
 8002c32:	bf00      	nop
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40011000 	.word	0x40011000
 8002c44:	40010800 	.word	0x40010800
 8002c48:	10110000 	.word	0x10110000

08002c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_MspInit+0x5c>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <HAL_MspInit+0x5c>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6193      	str	r3, [r2, #24]
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_MspInit+0x5c>)
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_MspInit+0x5c>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <HAL_MspInit+0x5c>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c80:	61d3      	str	r3, [r2, #28]
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_MspInit+0x5c>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_MspInit+0x60>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_MspInit+0x60>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40010000 	.word	0x40010000

08002cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0318 	add.w	r3, r7, #24
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_ADC_MspInit+0xbc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d122      	bne.n	8002d22 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	6193      	str	r3, [r2, #24]
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d10:	2303      	movs	r3, #3
 8002d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d14:	f107 0318 	add.w	r3, r7, #24
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4819      	ldr	r0, [pc, #100]	; (8002d80 <HAL_ADC_MspInit+0xc4>)
 8002d1c:	f000 ff5c 	bl	8003bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d20:	e026      	b.n	8002d70 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_ADC_MspInit+0xc8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d121      	bne.n	8002d70 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6193      	str	r3, [r2, #24]
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_ADC_MspInit+0xc0>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d60:	2303      	movs	r3, #3
 8002d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 0318 	add.w	r3, r7, #24
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <HAL_ADC_MspInit+0xc4>)
 8002d6c:	f000 ff34 	bl	8003bd8 <HAL_GPIO_Init>
}
 8002d70:	bf00      	nop
 8002d72:	3728      	adds	r7, #40	; 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40012400 	.word	0x40012400
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010800 	.word	0x40010800
 8002d84:	40012800 	.word	0x40012800

08002d88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <HAL_RTC_MspInit+0x4c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d118      	bne.n	8002dcc <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002d9a:	f001 f8c9 	bl	8003f30 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_RTC_MspInit+0x50>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_RTC_MspInit+0x50>)
 8002da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002da8:	61d3      	str	r3, [r2, #28]
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RTC_MspInit+0x50>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RTC_MspInit+0x54>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2029      	movs	r0, #41	; 0x29
 8002dc2:	f000 fed2 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002dc6:	2029      	movs	r0, #41	; 0x29
 8002dc8:	f000 feeb 	bl	8003ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40002800 	.word	0x40002800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	4242043c 	.word	0x4242043c

08002de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_TIM_Base_MspInit+0x34>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10b      	bne.n	8002e0a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_TIM_Base_MspInit+0x38>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_TIM_Base_MspInit+0x38>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_TIM_Base_MspInit+0x38>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	40000800 	.word	0x40000800
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_UART_MspInit+0xc0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d14b      	bne.n	8002ed4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_UART_MspInit+0xc4>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <HAL_UART_MspInit+0xc4>)
 8002e42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e46:	61d3      	str	r3, [r2, #28]
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_UART_MspInit+0xc4>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <HAL_UART_MspInit+0xc4>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <HAL_UART_MspInit+0xc4>)
 8002e5a:	f043 0310 	orr.w	r3, r3, #16
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <HAL_UART_MspInit+0xc4>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4818      	ldr	r0, [pc, #96]	; (8002ee4 <HAL_UART_MspInit+0xc8>)
 8002e82:	f000 fea9 	bl	8003bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <HAL_UART_MspInit+0xc8>)
 8002e9c:	f000 fe9c 	bl	8003bd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_UART_MspInit+0xcc>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f043 0310 	orr.w	r3, r3, #16
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_UART_MspInit+0xcc>)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2027      	movs	r0, #39	; 0x27
 8002eca:	f000 fe4e 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ece:	2027      	movs	r0, #39	; 0x27
 8002ed0:	f000 fe67 	bl	8003ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ed4:	bf00      	nop
 8002ed6:	3728      	adds	r7, #40	; 0x28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40004800 	.word	0x40004800
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40011000 	.word	0x40011000
 8002ee8:	40010000 	.word	0x40010000

08002eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002efc:	e7fe      	b.n	8002efc <HardFault_Handler+0x4>

08002efe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f02:	e7fe      	b.n	8002f02 <MemManage_Handler+0x4>

08002f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f08:	e7fe      	b.n	8002f08 <BusFault_Handler+0x4>

08002f0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f0e:	e7fe      	b.n	8002f0e <UsageFault_Handler+0x4>

08002f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f38:	f000 f8c6 	bl	80030c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <USART3_IRQHandler+0x10>)
 8002f46:	f7ff f999 	bl	800227c <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200005d4 	.word	0x200005d4

08002f54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002f58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f5c:	f000 ffc6 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <RTC_Alarm_IRQHandler+0x10>)
 8002f6a:	f002 f88b 	bl	8005084 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200006dc 	.word	0x200006dc

08002f78 <_sbrk>:
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <_sbrk+0x5c>)
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <_sbrk+0x60>)
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <_sbrk+0x22>
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <_sbrk+0x64>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <_sbrk+0x68>)
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d207      	bcs.n	8002fb8 <_sbrk+0x40>
 8002fa8:	f002 febc 	bl	8005d24 <__errno>
 8002fac:	4602      	mov	r2, r0
 8002fae:	230c      	movs	r3, #12
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb6:	e009      	b.n	8002fcc <_sbrk+0x54>
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <_sbrk+0x64>)
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20005000 	.word	0x20005000
 8002fd8:	00000400 	.word	0x00000400
 8002fdc:	200002fc 	.word	0x200002fc
 8002fe0:	200007b0 	.word	0x200007b0

08002fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <Reset_Handler>:
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	e003      	b.n	8002ffc <LoopCopyDataInit>

08002ff4 <CopyDataInit>:
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <LoopFillZerobss+0x14>)
 8002ff6:	585b      	ldr	r3, [r3, r1]
 8002ff8:	5043      	str	r3, [r0, r1]
 8002ffa:	3104      	adds	r1, #4

08002ffc <LoopCopyDataInit>:
 8002ffc:	480a      	ldr	r0, [pc, #40]	; (8003028 <LoopFillZerobss+0x18>)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <LoopFillZerobss+0x1c>)
 8003000:	1842      	adds	r2, r0, r1
 8003002:	429a      	cmp	r2, r3
 8003004:	d3f6      	bcc.n	8002ff4 <CopyDataInit>
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <LoopFillZerobss+0x20>)
 8003008:	e002      	b.n	8003010 <LoopFillZerobss>

0800300a <FillZerobss>:
 800300a:	2300      	movs	r3, #0
 800300c:	f842 3b04 	str.w	r3, [r2], #4

08003010 <LoopFillZerobss>:
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <LoopFillZerobss+0x24>)
 8003012:	429a      	cmp	r2, r3
 8003014:	d3f9      	bcc.n	800300a <FillZerobss>
 8003016:	f7ff ffe5 	bl	8002fe4 <SystemInit>
 800301a:	f002 fe89 	bl	8005d30 <__libc_init_array>
 800301e:	f7ff fb03 	bl	8002628 <main>
 8003022:	4770      	bx	lr
 8003024:	080099b0 	.word	0x080099b0
 8003028:	20000000 	.word	0x20000000
 800302c:	20000220 	.word	0x20000220
 8003030:	20000220 	.word	0x20000220
 8003034:	200007ac 	.word	0x200007ac

08003038 <ADC1_2_IRQHandler>:
 8003038:	e7fe      	b.n	8003038 <ADC1_2_IRQHandler>
	...

0800303c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_Init+0x28>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <HAL_Init+0x28>)
 8003046:	f043 0310 	orr.w	r3, r3, #16
 800304a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304c:	2003      	movs	r0, #3
 800304e:	f000 fd81 	bl	8003b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003052:	2000      	movs	r0, #0
 8003054:	f000 f808 	bl	8003068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003058:	f7ff fdfe 	bl	8002c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_InitTick+0x54>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_InitTick+0x58>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd99 	bl	8003bbe <HAL_SYSTICK_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e00e      	b.n	80030b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d80a      	bhi.n	80030b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800309c:	2200      	movs	r2, #0
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f000 fd61 	bl	8003b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a8:	4a06      	ldr	r2, [pc, #24]	; (80030c4 <HAL_InitTick+0x5c>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000044 	.word	0x20000044
 80030c0:	2000004c 	.word	0x2000004c
 80030c4:	20000048 	.word	0x20000048

080030c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_IncTick+0x1c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_IncTick+0x20>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <HAL_IncTick+0x20>)
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	2000004c 	.word	0x2000004c
 80030e8:	200007a4 	.word	0x200007a4

080030ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return uwTick;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <HAL_GetTick+0x10>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	200007a4 	.word	0x200007a4

08003100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff fff0 	bl	80030ec <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d005      	beq.n	8003126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_Delay+0x40>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003126:	bf00      	nop
 8003128:	f7ff ffe0 	bl	80030ec <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	429a      	cmp	r2, r3
 8003136:	d8f7      	bhi.n	8003128 <HAL_Delay+0x28>
  {
  }
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2000004c 	.word	0x2000004c

08003144 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0be      	b.n	80032e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fd9a 	bl	8002cbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fbdd 	bl	8003948 <ADC_ConversionStop_Disable>
 800318e:	4603      	mov	r3, r0
 8003190:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 8099 	bne.w	80032d2 <HAL_ADC_Init+0x18e>
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 8095 	bne.w	80032d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031b0:	f023 0302 	bic.w	r3, r3, #2
 80031b4:	f043 0202 	orr.w	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7b1b      	ldrb	r3, [r3, #12]
 80031ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031dc:	d003      	beq.n	80031e6 <HAL_ADC_Init+0xa2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <HAL_ADC_Init+0xa8>
 80031e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ea:	e000      	b.n	80031ee <HAL_ADC_Init+0xaa>
 80031ec:	2300      	movs	r3, #0
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7d1b      	ldrb	r3, [r3, #20]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d119      	bne.n	8003230 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7b1b      	ldrb	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	3b01      	subs	r3, #1
 800320a:	035a      	lsls	r2, r3, #13
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e00b      	b.n	8003230 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_ADC_Init+0x1a8>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	430b      	orrs	r3, r1
 8003256:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	d003      	beq.n	800326a <HAL_ADC_Init+0x126>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d104      	bne.n	8003274 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	3b01      	subs	r3, #1
 8003270:	051b      	lsls	r3, r3, #20
 8003272:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	430a      	orrs	r2, r1
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_ADC_Init+0x1ac>)
 8003290:	4013      	ands	r3, r2
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	d10b      	bne.n	80032b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032ae:	e018      	b.n	80032e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f023 0312 	bic.w	r3, r3, #18
 80032b8:	f043 0210 	orr.w	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032d0:	e007      	b.n	80032e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	ffe1f7fd 	.word	0xffe1f7fd
 80032f0:	ff1f0efe 	.word	0xff1f0efe

080032f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADC_Start+0x1a>
 800330a:	2302      	movs	r3, #2
 800330c:	e098      	b.n	8003440 <HAL_ADC_Start+0x14c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fac4 	bl	80038a4 <ADC_Enable>
 800331c:	4603      	mov	r3, r0
 800331e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8087 	bne.w	8003436 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <HAL_ADC_Start+0x154>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d105      	bne.n	8003352 <HAL_ADC_Start+0x5e>
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_ADC_Start+0x158>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d115      	bne.n	800337e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d026      	beq.n	80033ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800337c:	e01d      	b.n	80033ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2f      	ldr	r2, [pc, #188]	; (800344c <HAL_ADC_Start+0x158>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_ADC_Start+0xaa>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_ADC_Start+0x154>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10d      	bne.n	80033ba <HAL_ADC_Start+0xc6>
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_ADC_Start+0x158>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f023 0206 	bic.w	r2, r3, #6
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80033d2:	e002      	b.n	80033da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f06f 0202 	mvn.w	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033fa:	d113      	bne.n	8003424 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_ADC_Start+0x154>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d105      	bne.n	8003412 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_ADC_Start+0x158>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	e00c      	b.n	800343e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e003      	b.n	800343e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40012800 	.word	0x40012800
 800344c:	40012400 	.word	0x40012400

08003450 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Stop+0x1a>
 8003466:	2302      	movs	r3, #2
 8003468:	e01a      	b.n	80034a0 <HAL_ADC_Stop+0x50>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa68 	bl	8003948 <ADC_ConversionStop_Disable>
 8003478:	4603      	mov	r3, r0
 800347a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80034be:	f7ff fe15 	bl	80030ec <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0c8      	b.n	800367c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d12a      	bne.n	800354e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003502:	2b00      	cmp	r3, #0
 8003504:	d123      	bne.n	800354e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003506:	e01a      	b.n	800353e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d016      	beq.n	800353e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_ADC_PollForConversion+0x7e>
 8003516:	f7ff fde9 	bl	80030ec <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d20b      	bcs.n	800353e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f043 0204 	orr.w	r2, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e09e      	b.n	800367c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0dd      	beq.n	8003508 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800354c:	e06c      	b.n	8003628 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_ADC_PollForConversion+0x1dc>)
 8003550:	681c      	ldr	r4, [r3, #0]
 8003552:	2002      	movs	r0, #2
 8003554:	f001 f9ca 	bl	80048ec <HAL_RCCEx_GetPeriphCLKFreq>
 8003558:	4603      	mov	r3, r0
 800355a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6919      	ldr	r1, [r3, #16]
 8003564:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_ADC_PollForConversion+0x1e0>)
 8003566:	400b      	ands	r3, r1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d118      	bne.n	800359e <HAL_ADC_PollForConversion+0xf6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68d9      	ldr	r1, [r3, #12]
 8003572:	4b46      	ldr	r3, [pc, #280]	; (800368c <HAL_ADC_PollForConversion+0x1e4>)
 8003574:	400b      	ands	r3, r1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d111      	bne.n	800359e <HAL_ADC_PollForConversion+0xf6>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6919      	ldr	r1, [r3, #16]
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_ADC_PollForConversion+0x1e8>)
 8003582:	400b      	ands	r3, r1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d108      	bne.n	800359a <HAL_ADC_PollForConversion+0xf2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68d9      	ldr	r1, [r3, #12]
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_ADC_PollForConversion+0x1ec>)
 8003590:	400b      	ands	r3, r1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_PollForConversion+0xf2>
 8003596:	2314      	movs	r3, #20
 8003598:	e020      	b.n	80035dc <HAL_ADC_PollForConversion+0x134>
 800359a:	2329      	movs	r3, #41	; 0x29
 800359c:	e01e      	b.n	80035dc <HAL_ADC_PollForConversion+0x134>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6919      	ldr	r1, [r3, #16]
 80035a4:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <HAL_ADC_PollForConversion+0x1e8>)
 80035a6:	400b      	ands	r3, r1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <HAL_ADC_PollForConversion+0x112>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68d9      	ldr	r1, [r3, #12]
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_ADC_PollForConversion+0x1ec>)
 80035b4:	400b      	ands	r3, r1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <HAL_ADC_PollForConversion+0x12e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6919      	ldr	r1, [r3, #16]
 80035c0:	4b35      	ldr	r3, [pc, #212]	; (8003698 <HAL_ADC_PollForConversion+0x1f0>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d108      	bne.n	80035da <HAL_ADC_PollForConversion+0x132>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68d9      	ldr	r1, [r3, #12]
 80035ce:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_ADC_PollForConversion+0x1f0>)
 80035d0:	400b      	ands	r3, r1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_ADC_PollForConversion+0x132>
 80035d6:	2354      	movs	r3, #84	; 0x54
 80035d8:	e000      	b.n	80035dc <HAL_ADC_PollForConversion+0x134>
 80035da:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035e2:	e01d      	b.n	8003620 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d016      	beq.n	800361a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_ADC_PollForConversion+0x15a>
 80035f2:	f7ff fd7b 	bl	80030ec <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d20b      	bcs.n	800361a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e030      	b.n	800367c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3301      	adds	r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d8dd      	bhi.n	80035e4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0212 	mvn.w	r2, #18
 8003630:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003648:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800364c:	d115      	bne.n	800367a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003652:	2b00      	cmp	r3, #0
 8003654:	d111      	bne.n	800367a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}
 8003684:	20000044 	.word	0x20000044
 8003688:	24924924 	.word	0x24924924
 800368c:	00924924 	.word	0x00924924
 8003690:	12492492 	.word	0x12492492
 8003694:	00492492 	.word	0x00492492
 8003698:	00249249 	.word	0x00249249

0800369c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x20>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e0dc      	b.n	800388e <HAL_ADC_ConfigChannel+0x1da>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d81c      	bhi.n	800371e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	3b05      	subs	r3, #5
 80036f6:	221f      	movs	r2, #31
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	4019      	ands	r1, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b05      	subs	r3, #5
 8003710:	fa00 f203 	lsl.w	r2, r0, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	635a      	str	r2, [r3, #52]	; 0x34
 800371c:	e03c      	b.n	8003798 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d81c      	bhi.n	8003760 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3b23      	subs	r3, #35	; 0x23
 8003738:	221f      	movs	r2, #31
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	4019      	ands	r1, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	3b23      	subs	r3, #35	; 0x23
 8003752:	fa00 f203 	lsl.w	r2, r0, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
 800375e:	e01b      	b.n	8003798 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b41      	subs	r3, #65	; 0x41
 8003772:	221f      	movs	r2, #31
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	4019      	ands	r1, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	3b41      	subs	r3, #65	; 0x41
 800378c:	fa00 f203 	lsl.w	r2, r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b09      	cmp	r3, #9
 800379e:	d91c      	bls.n	80037da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68d9      	ldr	r1, [r3, #12]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	3b1e      	subs	r3, #30
 80037b2:	2207      	movs	r2, #7
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4019      	ands	r1, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6898      	ldr	r0, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	fa00 f203 	lsl.w	r2, r0, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e019      	b.n	800380e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6919      	ldr	r1, [r3, #16]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	2207      	movs	r2, #7
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4019      	ands	r1, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6898      	ldr	r0, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	fa00 f203 	lsl.w	r2, r0, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d003      	beq.n	800381e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800381a:	2b11      	cmp	r3, #17
 800381c:	d132      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <HAL_ADC_ConfigChannel+0x1e4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d125      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d126      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003844:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b10      	cmp	r3, #16
 800384c:	d11a      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_ADC_ConfigChannel+0x1e8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	0c9a      	lsrs	r2, r3, #18
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003864:	e002      	b.n	800386c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3b01      	subs	r3, #1
 800386a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f9      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x1b2>
 8003872:	e007      	b.n	8003884 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40012400 	.word	0x40012400
 800389c:	20000044 	.word	0x20000044
 80038a0:	431bde83 	.word	0x431bde83

080038a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d039      	beq.n	8003936 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038d2:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <ADC_Enable+0x9c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <ADC_Enable+0xa0>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	0c9b      	lsrs	r3, r3, #18
 80038de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038e0:	e002      	b.n	80038e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f9      	bne.n	80038e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038ee:	f7ff fbfd 	bl	80030ec <HAL_GetTick>
 80038f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038f4:	e018      	b.n	8003928 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f6:	f7ff fbf9 	bl	80030ec <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d911      	bls.n	8003928 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d1df      	bne.n	80038f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000044 	.word	0x20000044
 8003944:	431bde83 	.word	0x431bde83

08003948 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d127      	bne.n	80039b2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003972:	f7ff fbbb 	bl	80030ec <HAL_GetTick>
 8003976:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003978:	e014      	b.n	80039a4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800397a:	f7ff fbb7 	bl	80030ec <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d90d      	bls.n	80039a4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f043 0210 	orr.w	r2, r3, #16
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	f043 0201 	orr.w	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d0e3      	beq.n	800397a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <__NVIC_SetPriorityGrouping+0x44>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d8:	4013      	ands	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ee:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <__NVIC_SetPriorityGrouping+0x44>)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	60d3      	str	r3, [r2, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <__NVIC_GetPriorityGrouping+0x18>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	f003 0307 	and.w	r3, r3, #7
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	db0b      	blt.n	8003a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4906      	ldr	r1, [pc, #24]	; (8003a54 <__NVIC_EnableIRQ+0x34>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2001      	movs	r0, #1
 8003a42:	fa00 f202 	lsl.w	r2, r0, r2
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	e000e100 	.word	0xe000e100

08003a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	6039      	str	r1, [r7, #0]
 8003a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	db0a      	blt.n	8003a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	490c      	ldr	r1, [pc, #48]	; (8003aa4 <__NVIC_SetPriority+0x4c>)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	0112      	lsls	r2, r2, #4
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a80:	e00a      	b.n	8003a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4908      	ldr	r1, [pc, #32]	; (8003aa8 <__NVIC_SetPriority+0x50>)
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	3b04      	subs	r3, #4
 8003a90:	0112      	lsls	r2, r2, #4
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	440b      	add	r3, r1
 8003a96:	761a      	strb	r2, [r3, #24]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000e100 	.word	0xe000e100
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f1c3 0307 	rsb	r3, r3, #7
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	bf28      	it	cs
 8003aca:	2304      	movcs	r3, #4
 8003acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	2b06      	cmp	r3, #6
 8003ad4:	d902      	bls.n	8003adc <NVIC_EncodePriority+0x30>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3b03      	subs	r3, #3
 8003ada:	e000      	b.n	8003ade <NVIC_EncodePriority+0x32>
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43da      	mvns	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	401a      	ands	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af4:	f04f 31ff 	mov.w	r1, #4294967295
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	43d9      	mvns	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b04:	4313      	orrs	r3, r2
         );
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b20:	d301      	bcc.n	8003b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b22:	2301      	movs	r3, #1
 8003b24:	e00f      	b.n	8003b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <SysTick_Config+0x40>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2e:	210f      	movs	r1, #15
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	f7ff ff90 	bl	8003a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <SysTick_Config+0x40>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <SysTick_Config+0x40>)
 8003b40:	2207      	movs	r2, #7
 8003b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000e010 	.word	0xe000e010

08003b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff2d 	bl	80039bc <__NVIC_SetPriorityGrouping>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	4603      	mov	r3, r0
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b7c:	f7ff ff42 	bl	8003a04 <__NVIC_GetPriorityGrouping>
 8003b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	6978      	ldr	r0, [r7, #20]
 8003b88:	f7ff ff90 	bl	8003aac <NVIC_EncodePriority>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff ff5f 	bl	8003a58 <__NVIC_SetPriority>
}
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff35 	bl	8003a20 <__NVIC_EnableIRQ>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ffa2 	bl	8003b10 <SysTick_Config>
 8003bcc:	4603      	mov	r3, r0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b08b      	sub	sp, #44	; 0x2c
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bea:	e127      	b.n	8003e3c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bec:	2201      	movs	r2, #1
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	f040 8116 	bne.w	8003e36 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b12      	cmp	r3, #18
 8003c10:	d034      	beq.n	8003c7c <HAL_GPIO_Init+0xa4>
 8003c12:	2b12      	cmp	r3, #18
 8003c14:	d80d      	bhi.n	8003c32 <HAL_GPIO_Init+0x5a>
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d02b      	beq.n	8003c72 <HAL_GPIO_Init+0x9a>
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d804      	bhi.n	8003c28 <HAL_GPIO_Init+0x50>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d031      	beq.n	8003c86 <HAL_GPIO_Init+0xae>
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d01c      	beq.n	8003c60 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c26:	e048      	b.n	8003cba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d043      	beq.n	8003cb4 <HAL_GPIO_Init+0xdc>
 8003c2c:	2b11      	cmp	r3, #17
 8003c2e:	d01b      	beq.n	8003c68 <HAL_GPIO_Init+0x90>
          break;
 8003c30:	e043      	b.n	8003cba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c32:	4a89      	ldr	r2, [pc, #548]	; (8003e58 <HAL_GPIO_Init+0x280>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d026      	beq.n	8003c86 <HAL_GPIO_Init+0xae>
 8003c38:	4a87      	ldr	r2, [pc, #540]	; (8003e58 <HAL_GPIO_Init+0x280>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d806      	bhi.n	8003c4c <HAL_GPIO_Init+0x74>
 8003c3e:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_GPIO_Init+0x284>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d020      	beq.n	8003c86 <HAL_GPIO_Init+0xae>
 8003c44:	4a86      	ldr	r2, [pc, #536]	; (8003e60 <HAL_GPIO_Init+0x288>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01d      	beq.n	8003c86 <HAL_GPIO_Init+0xae>
          break;
 8003c4a:	e036      	b.n	8003cba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c4c:	4a85      	ldr	r2, [pc, #532]	; (8003e64 <HAL_GPIO_Init+0x28c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d019      	beq.n	8003c86 <HAL_GPIO_Init+0xae>
 8003c52:	4a85      	ldr	r2, [pc, #532]	; (8003e68 <HAL_GPIO_Init+0x290>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d016      	beq.n	8003c86 <HAL_GPIO_Init+0xae>
 8003c58:	4a84      	ldr	r2, [pc, #528]	; (8003e6c <HAL_GPIO_Init+0x294>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_GPIO_Init+0xae>
          break;
 8003c5e:	e02c      	b.n	8003cba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	623b      	str	r3, [r7, #32]
          break;
 8003c66:	e028      	b.n	8003cba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	623b      	str	r3, [r7, #32]
          break;
 8003c70:	e023      	b.n	8003cba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	3308      	adds	r3, #8
 8003c78:	623b      	str	r3, [r7, #32]
          break;
 8003c7a:	e01e      	b.n	8003cba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	330c      	adds	r3, #12
 8003c82:	623b      	str	r3, [r7, #32]
          break;
 8003c84:	e019      	b.n	8003cba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c8e:	2304      	movs	r3, #4
 8003c90:	623b      	str	r3, [r7, #32]
          break;
 8003c92:	e012      	b.n	8003cba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	611a      	str	r2, [r3, #16]
          break;
 8003ca6:	e008      	b.n	8003cba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ca8:	2308      	movs	r3, #8
 8003caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	615a      	str	r2, [r3, #20]
          break;
 8003cb2:	e002      	b.n	8003cba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	623b      	str	r3, [r7, #32]
          break;
 8003cb8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2bff      	cmp	r3, #255	; 0xff
 8003cbe:	d801      	bhi.n	8003cc4 <HAL_GPIO_Init+0xec>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	e001      	b.n	8003cc8 <HAL_GPIO_Init+0xf0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2bff      	cmp	r3, #255	; 0xff
 8003cce:	d802      	bhi.n	8003cd6 <HAL_GPIO_Init+0xfe>
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x104>
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	3b08      	subs	r3, #8
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	210f      	movs	r1, #15
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	401a      	ands	r2, r3
 8003cee:	6a39      	ldr	r1, [r7, #32]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8096 	beq.w	8003e36 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d0a:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_GPIO_Init+0x298>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	4a58      	ldr	r2, [pc, #352]	; (8003e70 <HAL_GPIO_Init+0x298>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6193      	str	r3, [r2, #24]
 8003d16:	4b56      	ldr	r3, [pc, #344]	; (8003e70 <HAL_GPIO_Init+0x298>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d22:	4a54      	ldr	r2, [pc, #336]	; (8003e74 <HAL_GPIO_Init+0x29c>)
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	220f      	movs	r2, #15
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4013      	ands	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <HAL_GPIO_Init+0x2a0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_GPIO_Init+0x19e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4a      	ldr	r2, [pc, #296]	; (8003e7c <HAL_GPIO_Init+0x2a4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00d      	beq.n	8003d72 <HAL_GPIO_Init+0x19a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a49      	ldr	r2, [pc, #292]	; (8003e80 <HAL_GPIO_Init+0x2a8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <HAL_GPIO_Init+0x196>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a48      	ldr	r2, [pc, #288]	; (8003e84 <HAL_GPIO_Init+0x2ac>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <HAL_GPIO_Init+0x192>
 8003d66:	2303      	movs	r3, #3
 8003d68:	e006      	b.n	8003d78 <HAL_GPIO_Init+0x1a0>
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	e004      	b.n	8003d78 <HAL_GPIO_Init+0x1a0>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e002      	b.n	8003d78 <HAL_GPIO_Init+0x1a0>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_GPIO_Init+0x1a0>
 8003d76:	2300      	movs	r3, #0
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	f002 0203 	and.w	r2, r2, #3
 8003d7e:	0092      	lsls	r2, r2, #2
 8003d80:	4093      	lsls	r3, r2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d88:	493a      	ldr	r1, [pc, #232]	; (8003e74 <HAL_GPIO_Init+0x29c>)
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	3302      	adds	r3, #2
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d006      	beq.n	8003db0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003da2:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4938      	ldr	r1, [pc, #224]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
 8003dae:	e006      	b.n	8003dbe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	4933      	ldr	r1, [pc, #204]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	492e      	ldr	r1, [pc, #184]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
 8003dd6:	e006      	b.n	8003de6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	4929      	ldr	r1, [pc, #164]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003df2:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	4924      	ldr	r1, [pc, #144]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
 8003dfe:	e006      	b.n	8003e0e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	491f      	ldr	r1, [pc, #124]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	491a      	ldr	r1, [pc, #104]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60cb      	str	r3, [r1, #12]
 8003e26:	e006      	b.n	8003e36 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e28:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	4915      	ldr	r1, [pc, #84]	; (8003e88 <HAL_GPIO_Init+0x2b0>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	3301      	adds	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f47f aed0 	bne.w	8003bec <HAL_GPIO_Init+0x14>
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	372c      	adds	r7, #44	; 0x2c
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	10210000 	.word	0x10210000
 8003e5c:	10110000 	.word	0x10110000
 8003e60:	10120000 	.word	0x10120000
 8003e64:	10310000 	.word	0x10310000
 8003e68:	10320000 	.word	0x10320000
 8003e6c:	10220000 	.word	0x10220000
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40010c00 	.word	0x40010c00
 8003e80:	40011000 	.word	0x40011000
 8003e84:	40011400 	.word	0x40011400
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e001      	b.n	8003eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	807b      	strh	r3, [r7, #2]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eca:	787b      	ldrb	r3, [r7, #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ed0:	887a      	ldrh	r2, [r7, #2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ed6:	e003      	b.n	8003ee0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	041a      	lsls	r2, r3, #16
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	611a      	str	r2, [r3, #16]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f806 	bl	8003f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	420e0020 	.word	0x420e0020

08003f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e26c      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8087 	beq.w	8004076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f68:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d00c      	beq.n	8003f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f74:	4b8f      	ldr	r3, [pc, #572]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d112      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x5e>
 8003f80:	4b8c      	ldr	r3, [pc, #560]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8e:	4b89      	ldr	r3, [pc, #548]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d06c      	beq.n	8004074 <HAL_RCC_OscConfig+0x12c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d168      	bne.n	8004074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e246      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x76>
 8003fb0:	4b80      	ldr	r3, [pc, #512]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a7f      	ldr	r2, [pc, #508]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0xd4>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x98>
 8003fc6:	4b7b      	ldr	r3, [pc, #492]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7a      	ldr	r2, [pc, #488]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b78      	ldr	r3, [pc, #480]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a77      	ldr	r2, [pc, #476]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xd4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0xbc>
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a71      	ldr	r2, [pc, #452]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b6f      	ldr	r3, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xd4>
 8004004:	4b6b      	ldr	r3, [pc, #428]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6a      	ldr	r2, [pc, #424]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a67      	ldr	r2, [pc, #412]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7ff f862 	bl	80030ec <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402c:	f7ff f85e 	bl	80030ec <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1fa      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xe4>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7ff f84e 	bl	80030ec <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7ff f84a 	bl	80030ec <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1e6      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x10c>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d063      	beq.n	800414a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004082:	4b4c      	ldr	r3, [pc, #304]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800408e:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x18c>
 800409a:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b43      	ldr	r3, [pc, #268]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x176>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1ba      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4939      	ldr	r1, [pc, #228]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e03a      	b.n	800414a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <HAL_RCC_OscConfig+0x270>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7ff f803 	bl	80030ec <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ea:	f7fe ffff 	bl	80030ec <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e19b      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b2a      	ldr	r3, [pc, #168]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4927      	ldr	r1, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	e015      	b.n	800414a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x270>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe ffe2 	bl	80030ec <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412c:	f7fe ffde 	bl	80030ec <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e17a      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03a      	beq.n	80041cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d019      	beq.n	8004192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415e:	4b17      	ldr	r3, [pc, #92]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe ffc2 	bl	80030ec <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800416c:	f7fe ffbe 	bl	80030ec <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e15a      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <HAL_RCC_OscConfig+0x26c>)
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800418a:	2001      	movs	r0, #1
 800418c:	f000 fada 	bl	8004744 <RCC_Delay>
 8004190:	e01c      	b.n	80041cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004198:	f7fe ffa8 	bl	80030ec <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419e:	e00f      	b.n	80041c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a0:	f7fe ffa4 	bl	80030ec <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d908      	bls.n	80041c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e140      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	42420000 	.word	0x42420000
 80041bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	4b9e      	ldr	r3, [pc, #632]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e9      	bne.n	80041a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80a6 	beq.w	8004326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	4b97      	ldr	r3, [pc, #604]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	4b94      	ldr	r3, [pc, #592]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4a93      	ldr	r2, [pc, #588]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f4:	61d3      	str	r3, [r2, #28]
 80041f6:	4b91      	ldr	r3, [pc, #580]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b8e      	ldr	r3, [pc, #568]	; (8004440 <HAL_RCC_OscConfig+0x4f8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004212:	4b8b      	ldr	r3, [pc, #556]	; (8004440 <HAL_RCC_OscConfig+0x4f8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a8a      	ldr	r2, [pc, #552]	; (8004440 <HAL_RCC_OscConfig+0x4f8>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fe ff65 	bl	80030ec <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fe ff61 	bl	80030ec <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	; 0x64
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0fd      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x4f8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x312>
 800424c:	4b7b      	ldr	r3, [pc, #492]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	4a7a      	ldr	r2, [pc, #488]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6213      	str	r3, [r2, #32]
 8004258:	e02d      	b.n	80042b6 <HAL_RCC_OscConfig+0x36e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x334>
 8004262:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4a75      	ldr	r2, [pc, #468]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	6213      	str	r3, [r2, #32]
 800426e:	4b73      	ldr	r3, [pc, #460]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4a72      	ldr	r2, [pc, #456]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004274:	f023 0304 	bic.w	r3, r3, #4
 8004278:	6213      	str	r3, [r2, #32]
 800427a:	e01c      	b.n	80042b6 <HAL_RCC_OscConfig+0x36e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d10c      	bne.n	800429e <HAL_RCC_OscConfig+0x356>
 8004284:	4b6d      	ldr	r3, [pc, #436]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a6c      	ldr	r2, [pc, #432]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	4b6a      	ldr	r3, [pc, #424]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a69      	ldr	r2, [pc, #420]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6213      	str	r3, [r2, #32]
 800429c:	e00b      	b.n	80042b6 <HAL_RCC_OscConfig+0x36e>
 800429e:	4b67      	ldr	r3, [pc, #412]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a66      	ldr	r2, [pc, #408]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6213      	str	r3, [r2, #32]
 80042aa:	4b64      	ldr	r3, [pc, #400]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a63      	ldr	r2, [pc, #396]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80042b0:	f023 0304 	bic.w	r3, r3, #4
 80042b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d015      	beq.n	80042ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fe ff15 	bl	80030ec <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fe ff11 	bl	80030ec <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0ab      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	4b57      	ldr	r3, [pc, #348]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ee      	beq.n	80042c6 <HAL_RCC_OscConfig+0x37e>
 80042e8:	e014      	b.n	8004314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ea:	f7fe feff 	bl	80030ec <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fe fefb 	bl	80030ec <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e095      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ee      	bne.n	80042f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4b48      	ldr	r3, [pc, #288]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	4a47      	ldr	r2, [pc, #284]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8081 	beq.w	8004432 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d061      	beq.n	8004400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d146      	bne.n	80043d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004344:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <HAL_RCC_OscConfig+0x4fc>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fe fecf 	bl	80030ec <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fe fecb 	bl	80030ec <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e067      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004364:	4b35      	ldr	r3, [pc, #212]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800437a:	4b30      	ldr	r3, [pc, #192]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	492d      	ldr	r1, [pc, #180]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438c:	4b2b      	ldr	r3, [pc, #172]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a19      	ldr	r1, [r3, #32]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	430b      	orrs	r3, r1
 800439e:	4927      	ldr	r1, [pc, #156]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a4:	4b27      	ldr	r3, [pc, #156]	; (8004444 <HAL_RCC_OscConfig+0x4fc>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fe fe9f 	bl	80030ec <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe fe9b 	bl	80030ec <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e037      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x46a>
 80043d0:	e02f      	b.n	8004432 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <HAL_RCC_OscConfig+0x4fc>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fe fe88 	bl	80030ec <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fe fe84 	bl	80030ec <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e020      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x498>
 80043fe:	e018      	b.n	8004432 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e013      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_OscConfig+0x4f4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	429a      	cmp	r2, r3
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	40007000 	.word	0x40007000
 8004444:	42420060 	.word	0x42420060

08004448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0d0      	b.n	80045fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4b6a      	ldr	r3, [pc, #424]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d910      	bls.n	800448c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b67      	ldr	r3, [pc, #412]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 0207 	bic.w	r2, r3, #7
 8004472:	4965      	ldr	r1, [pc, #404]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0b8      	b.n	80045fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a4:	4b59      	ldr	r3, [pc, #356]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a58      	ldr	r2, [pc, #352]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044bc:	4b53      	ldr	r3, [pc, #332]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a52      	ldr	r2, [pc, #328]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c8:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	494d      	ldr	r1, [pc, #308]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d040      	beq.n	8004568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d115      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e07f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4b41      	ldr	r3, [pc, #260]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e073      	b.n	80045fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004516:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06b      	b.n	80045fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4936      	ldr	r1, [pc, #216]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004538:	f7fe fdd8 	bl	80030ec <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	e00a      	b.n	8004556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004540:	f7fe fdd4 	bl	80030ec <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e053      	b.n	80045fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	4b2d      	ldr	r3, [pc, #180]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 020c 	and.w	r2, r3, #12
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	429a      	cmp	r2, r3
 8004566:	d1eb      	bne.n	8004540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004568:	4b27      	ldr	r3, [pc, #156]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d210      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	4922      	ldr	r1, [pc, #136]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e032      	b.n	80045fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4916      	ldr	r1, [pc, #88]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	490e      	ldr	r1, [pc, #56]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045d6:	f000 f821 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80045da:	4601      	mov	r1, r0
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	4a0a      	ldr	r2, [pc, #40]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	5cd3      	ldrb	r3, [r2, r3]
 80045ea:	fa21 f303 	lsr.w	r3, r1, r3
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1cc>)
 80045f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1d0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe fd36 	bl	8003068 <HAL_InitTick>

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40022000 	.word	0x40022000
 800460c:	40021000 	.word	0x40021000
 8004610:	08009730 	.word	0x08009730
 8004614:	20000044 	.word	0x20000044
 8004618:	20000048 	.word	0x20000048

0800461c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800461c:	b490      	push	{r4, r7}
 800461e:	b08a      	sub	sp, #40	; 0x28
 8004620:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004622:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004624:	1d3c      	adds	r4, r7, #4
 8004626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800462c:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004646:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d002      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x40>
 8004656:	2b08      	cmp	r3, #8
 8004658:	d003      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x46>
 800465a:	e02d      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800465e:	623b      	str	r3, [r7, #32]
      break;
 8004660:	e02d      	b.n	80046be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	0c9b      	lsrs	r3, r3, #18
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800466e:	4413      	add	r3, r2
 8004670:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004674:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d013      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004680:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	0c5b      	lsrs	r3, r3, #17
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800468e:	4413      	add	r3, r2
 8004690:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004694:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800469a:	fb02 f203 	mul.w	r2, r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
 80046a6:	e004      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	4a0c      	ldr	r2, [pc, #48]	; (80046dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	623b      	str	r3, [r7, #32]
      break;
 80046b6:	e002      	b.n	80046be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046b8:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046ba:	623b      	str	r3, [r7, #32]
      break;
 80046bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046be:	6a3b      	ldr	r3, [r7, #32]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3728      	adds	r7, #40	; 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc90      	pop	{r4, r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	08009708 	.word	0x08009708
 80046d0:	08009718 	.word	0x08009718
 80046d4:	40021000 	.word	0x40021000
 80046d8:	007a1200 	.word	0x007a1200
 80046dc:	003d0900 	.word	0x003d0900

080046e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e4:	4b02      	ldr	r3, [pc, #8]	; (80046f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	20000044 	.word	0x20000044

080046f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f8:	f7ff fff2 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 80046fc:	4601      	mov	r1, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4a03      	ldr	r2, [pc, #12]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800470a:	5cd3      	ldrb	r3, [r2, r3]
 800470c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	08009740 	.word	0x08009740

0800471c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004720:	f7ff ffde 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004724:	4601      	mov	r1, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	0adb      	lsrs	r3, r3, #11
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4a03      	ldr	r2, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004732:	5cd3      	ldrb	r3, [r2, r3]
 8004734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	08009740 	.word	0x08009740

08004744 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <RCC_Delay+0x34>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <RCC_Delay+0x38>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	0a5b      	lsrs	r3, r3, #9
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004760:	bf00      	nop
  }
  while (Delay --);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1e5a      	subs	r2, r3, #1
 8004766:	60fa      	str	r2, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f9      	bne.n	8004760 <RCC_Delay+0x1c>
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000044 	.word	0x20000044
 800477c:	10624dd3 	.word	0x10624dd3

08004780 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d07d      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800479c:	2300      	movs	r3, #0
 800479e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a0:	4b4f      	ldr	r3, [pc, #316]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10d      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ac:	4b4c      	ldr	r3, [pc, #304]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	4a4b      	ldr	r2, [pc, #300]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b6:	61d3      	str	r3, [r2, #28]
 80047b8:	4b49      	ldr	r3, [pc, #292]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d118      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d4:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a42      	ldr	r2, [pc, #264]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e0:	f7fe fc84 	bl	80030ec <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e6:	e008      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e8:	f7fe fc80 	bl	80030ec <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e06d      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b3a      	ldr	r3, [pc, #232]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004806:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02e      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	429a      	cmp	r2, r3
 8004822:	d027      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004824:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800482e:	4b2e      	ldr	r3, [pc, #184]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004834:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800483a:	4a29      	ldr	r2, [pc, #164]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d014      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fe fc4f 	bl	80030ec <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	e00a      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fe fc4b 	bl	80030ec <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e036      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ee      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4917      	ldr	r1, [pc, #92]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004882:	4313      	orrs	r3, r2
 8004884:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004896:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	490b      	ldr	r1, [pc, #44]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40007000 	.word	0x40007000
 80048e8:	42420440 	.word	0x42420440

080048ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b08d      	sub	sp, #52	; 0x34
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048f4:	4b55      	ldr	r3, [pc, #340]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80048f6:	f107 040c 	add.w	r4, r7, #12
 80048fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	2300      	movs	r3, #0
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490e:	2300      	movs	r3, #0
 8004910:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d07f      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004920:	2b10      	cmp	r3, #16
 8004922:	d002      	beq.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004924:	2b01      	cmp	r3, #1
 8004926:	d048      	beq.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004928:	e08b      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800492a:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004930:	4b48      	ldr	r3, [pc, #288]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d07f      	beq.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	0c9b      	lsrs	r3, r3, #18
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004948:	4413      	add	r3, r2
 800494a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800494e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d018      	beq.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800495a:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	0c5b      	lsrs	r3, r3, #17
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004968:	4413      	add	r3, r2
 800496a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800497a:	4a37      	ldr	r2, [pc, #220]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498a:	e004      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	4a33      	ldr	r2, [pc, #204]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004996:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a2:	d102      	bne.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049a8:	e048      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049b8:	e040      	b.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80049ba:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ca:	d108      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
 80049dc:	e01f      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e8:	d109      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80049f6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fc:	e00f      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a08:	d11a      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d014      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004a16:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a1c:	e010      	b.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004a1e:	e00f      	b.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a20:	f7ff fe7c 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	0b9b      	lsrs	r3, r3, #14
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	3301      	adds	r3, #1
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004a40:	bf00      	nop
    }
  }
  return (frequency);
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3734      	adds	r7, #52	; 0x34
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}
 8004a4c:	0800971c 	.word	0x0800971c
 8004a50:	0800972c 	.word	0x0800972c
 8004a54:	40021000 	.word	0x40021000
 8004a58:	007a1200 	.word	0x007a1200
 8004a5c:	003d0900 	.word	0x003d0900
 8004a60:	aaaaaaab 	.word	0xaaaaaaab

08004a64 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e084      	b.n	8004b84 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7c5b      	ldrb	r3, [r3, #17]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fe f97c 	bl	8002d88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fb25 	bl	80050e6 <HAL_RTC_WaitForSynchro>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e06b      	b.n	8004b84 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fbde 	bl	800526e <RTC_EnterInitMode>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2204      	movs	r2, #4
 8004abc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e060      	b.n	8004b84 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0207 	bic.w	r2, r2, #7
 8004ad0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004ada:	4b2c      	ldr	r3, [pc, #176]	; (8004b8c <HAL_RTC_Init+0x128>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	4a2b      	ldr	r2, [pc, #172]	; (8004b8c <HAL_RTC_Init+0x128>)
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RTC_Init+0x128>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	4926      	ldr	r1, [pc, #152]	; (8004b8c <HAL_RTC_Init+0x128>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d003      	beq.n	8004b0a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e00e      	b.n	8004b28 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f7ff feee 	bl	80048ec <HAL_RCCEx_GetPeriphCLKFreq>
 8004b10:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e030      	b.n	8004b84 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f023 010f 	bic.w	r1, r3, #15
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	0c1a      	lsrs	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	b291      	uxth	r1, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	430b      	orrs	r3, r1
 8004b52:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fbb2 	bl	80052be <RTC_ExitInitMode>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2204      	movs	r2, #4
 8004b64:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00c      	b.n	8004b84 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40006c00 	.word	0x40006c00

08004b90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RTC_SetTime+0x20>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e080      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	7c1b      	ldrb	r3, [r3, #16]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_RTC_SetTime+0x30>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e07a      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d113      	bne.n	8004bfa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004bdc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	4619      	mov	r1, r3
 8004be6:	460b      	mov	r3, r1
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bee:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bf4:	4413      	add	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e01e      	b.n	8004c38 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fba2 	bl	8005348 <RTC_Bcd2ToByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004c0c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fb97 	bl	8005348 <RTC_Bcd2ToByte>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004c26:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	789b      	ldrb	r3, [r3, #2]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fb8b 	bl	8005348 <RTC_Bcd2ToByte>
 8004c32:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004c34:	4423      	add	r3, r4
 8004c36:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c38:	6979      	ldr	r1, [r7, #20]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fab0 	bl	80051a0 <RTC_WriteTimeCounter>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e02f      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0205 	bic.w	r2, r2, #5
 8004c64:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fac1 	bl	80051ee <RTC_ReadAlarmCounter>
 8004c6c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d018      	beq.n	8004ca8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d214      	bcs.n	8004ca8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004c84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c88:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fac7 	bl	8005220 <RTC_WriteAlarmCounter>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e006      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
	...

08004cc0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RTC_GetTime+0x28>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0b5      	b.n	8004e58 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0ac      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fa1e 	bl	8005140 <RTC_ReadTimeCounter>
 8004d04:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4a55      	ldr	r2, [pc, #340]	; (8004e60 <HAL_RTC_GetTime+0x1a0>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0adb      	lsrs	r3, r3, #11
 8004d10:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4b52      	ldr	r3, [pc, #328]	; (8004e60 <HAL_RTC_GetTime+0x1a0>)
 8004d16:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1a:	0adb      	lsrs	r3, r3, #11
 8004d1c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a4f      	ldr	r2, [pc, #316]	; (8004e64 <HAL_RTC_GetTime+0x1a4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4a4a      	ldr	r2, [pc, #296]	; (8004e60 <HAL_RTC_GetTime+0x1a0>)
 8004d38:	fba2 1203 	umull	r1, r2, r2, r3
 8004d3c:	0ad2      	lsrs	r2, r2, #11
 8004d3e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004d42:	fb01 f202 	mul.w	r2, r1, r2
 8004d46:	1a9a      	subs	r2, r3, r2
 8004d48:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_RTC_GetTime+0x1a4>)
 8004d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4e:	0959      	lsrs	r1, r3, #5
 8004d50:	460b      	mov	r3, r1
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a5b      	subs	r3, r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	1ad1      	subs	r1, r2, r3
 8004d5a:	b2ca      	uxtb	r2, r1
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b17      	cmp	r3, #23
 8004d64:	d955      	bls.n	8004e12 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <HAL_RTC_GetTime+0x1a8>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <HAL_RTC_GetTime+0x1a8>)
 8004d76:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7a:	091a      	lsrs	r2, r3, #4
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	1aca      	subs	r2, r1, r3
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fa2e 	bl	80051ee <RTC_ReadAlarmCounter>
 8004d92:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d008      	beq.n	8004dae <HAL_RTC_GetTime+0xee>
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d904      	bls.n	8004dae <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e002      	b.n	8004db4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4a2d      	ldr	r2, [pc, #180]	; (8004e6c <HAL_RTC_GetTime+0x1ac>)
 8004db8:	fb02 f303 	mul.w	r3, r2, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004dc2:	69b9      	ldr	r1, [r7, #24]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f9eb 	bl	80051a0 <RTC_WriteTimeCounter>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e041      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d00c      	beq.n	8004df6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004de4:	69f9      	ldr	r1, [r7, #28]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fa1a 	bl	8005220 <RTC_WriteAlarmCounter>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e030      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fa11 	bl	8005220 <RTC_WriteAlarmCounter>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e027      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fab9 	bl	8005382 <RTC_DateUpdate>
 8004e10:	e003      	b.n	8004e1a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01a      	beq.n	8004e56 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fa72 	bl	800530e <RTC_ByteToBcd2>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa69 	bl	800530e <RTC_ByteToBcd2>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	789b      	ldrb	r3, [r3, #2]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fa60 	bl	800530e <RTC_ByteToBcd2>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	91a2b3c5 	.word	0x91a2b3c5
 8004e64:	88888889 	.word	0x88888889
 8004e68:	aaaaaaab 	.word	0xaaaaaaab
 8004e6c:	00015180 	.word	0x00015180

08004e70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_RTC_SetDate+0x24>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e097      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7c1b      	ldrb	r3, [r3, #16]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RTC_SetDate+0x34>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e091      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2202      	movs	r2, #2
 8004eae:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	78da      	ldrb	r2, [r3, #3]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	785a      	ldrb	r2, [r3, #1]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	789a      	ldrb	r2, [r3, #2]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	739a      	strb	r2, [r3, #14]
 8004ece:	e01a      	b.n	8004f06 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	78db      	ldrb	r3, [r3, #3]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fa37 	bl	8005348 <RTC_Bcd2ToByte>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fa2e 	bl	8005348 <RTC_Bcd2ToByte>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fa25 	bl	8005348 <RTC_Bcd2ToByte>
 8004efe:	4603      	mov	r3, r0
 8004f00:	461a      	mov	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	7bdb      	ldrb	r3, [r3, #15]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	7b59      	ldrb	r1, [r3, #13]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	7b9b      	ldrb	r3, [r3, #14]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f000 fb0f 	bl	8005538 <RTC_WeekDayNum>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	7b1a      	ldrb	r2, [r3, #12]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f908 	bl	8005140 <RTC_ReadTimeCounter>
 8004f30:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <HAL_RTC_SetDate+0x160>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	0adb      	lsrs	r3, r3, #11
 8004f3c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b18      	cmp	r3, #24
 8004f42:	d93a      	bls.n	8004fba <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4a23      	ldr	r2, [pc, #140]	; (8004fd4 <HAL_RTC_SetDate+0x164>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_RTC_SetDate+0x168>)
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f91f 	bl	80051a0 <RTC_WriteTimeCounter>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e027      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f938 	bl	80051ee <RTC_ReadAlarmCounter>
 8004f7e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d018      	beq.n	8004fba <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d214      	bcs.n	8004fba <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004f96:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004f9a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f93e 	bl	8005220 <RTC_WriteAlarmCounter>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2204      	movs	r2, #4
 8004fae:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e006      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	91a2b3c5 	.word	0x91a2b3c5
 8004fd4:	aaaaaaab 	.word	0xaaaaaaab
 8004fd8:	00015180 	.word	0x00015180

08004fdc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	2100      	movs	r1, #0
 8004fee:	460a      	mov	r2, r1
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_RTC_GetDate+0x26>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e03a      	b.n	800507c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	2200      	movs	r2, #0
 800500c:	4619      	mov	r1, r3
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff fe56 	bl	8004cc0 <HAL_RTC_GetTime>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e02e      	b.n	800507c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	7b1a      	ldrb	r2, [r3, #12]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	7bda      	ldrb	r2, [r3, #15]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	7b5a      	ldrb	r2, [r3, #13]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	7b9a      	ldrb	r2, [r3, #14]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01a      	beq.n	800507a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	78db      	ldrb	r3, [r3, #3]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f960 	bl	800530e <RTC_ByteToBcd2>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f957 	bl	800530e <RTC_ByteToBcd2>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	789b      	ldrb	r3, [r3, #2]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f94e 	bl	800530e <RTC_ByteToBcd2>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00e      	beq.n	80050b8 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f813 	bl	80050d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f06f 0202 	mvn.w	r2, #2
 80050b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80050ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050be:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	745a      	strb	r2, [r3, #17]
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40010400 	.word	0x40010400

080050d4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e01d      	b.n	8005138 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0208 	bic.w	r2, r2, #8
 800510a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800510c:	f7fd ffee 	bl	80030ec <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005112:	e009      	b.n	8005128 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005114:	f7fd ffea 	bl	80030ec <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005122:	d901      	bls.n	8005128 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e007      	b.n	8005138 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0ee      	beq.n	8005114 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	827b      	strh	r3, [r7, #18]
 800514c:	2300      	movs	r3, #0
 800514e:	823b      	strh	r3, [r7, #16]
 8005150:	2300      	movs	r3, #0
 8005152:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005170:	8a7a      	ldrh	r2, [r7, #18]
 8005172:	8a3b      	ldrh	r3, [r7, #16]
 8005174:	429a      	cmp	r2, r3
 8005176:	d008      	beq.n	800518a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005178:	8a3b      	ldrh	r3, [r7, #16]
 800517a:	041a      	lsls	r2, r3, #16
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	b29b      	uxth	r3, r3
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e004      	b.n	8005194 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800518a:	8a7b      	ldrh	r3, [r7, #18]
 800518c:	041a      	lsls	r2, r3, #16
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005194:	697b      	ldr	r3, [r7, #20]
}
 8005196:	4618      	mov	r0, r3
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f85d 	bl	800526e <RTC_EnterInitMode>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	e011      	b.n	80051e4 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	0c12      	lsrs	r2, r2, #16
 80051c8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	b292      	uxth	r2, r2
 80051d2:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f872 	bl	80052be <RTC_ExitInitMode>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	81fb      	strh	r3, [r7, #14]
 80051fa:	2300      	movs	r3, #0
 80051fc:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	041a      	lsls	r2, r3, #16
 8005212:	89bb      	ldrh	r3, [r7, #12]
 8005214:	4313      	orrs	r3, r2
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr

08005220 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f81d 	bl	800526e <RTC_EnterInitMode>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
 800523e:	e011      	b.n	8005264 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	0c12      	lsrs	r2, r2, #16
 8005248:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	b292      	uxth	r2, r2
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f832 	bl	80052be <RTC_ExitInitMode>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005264:	7bfb      	ldrb	r3, [r7, #15]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800527a:	f7fd ff37 	bl	80030ec <HAL_GetTick>
 800527e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005280:	e009      	b.n	8005296 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005282:	f7fd ff33 	bl	80030ec <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005290:	d901      	bls.n	8005296 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e00f      	b.n	80052b6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ee      	beq.n	8005282 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0210 	orr.w	r2, r2, #16
 80052b2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0210 	bic.w	r2, r2, #16
 80052d8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80052da:	f7fd ff07 	bl	80030ec <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80052e0:	e009      	b.n	80052f6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80052e2:	f7fd ff03 	bl	80030ec <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f0:	d901      	bls.n	80052f6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e007      	b.n	8005306 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ee      	beq.n	80052e2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	4603      	mov	r3, r0
 8005316:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800531c:	e005      	b.n	800532a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	3b0a      	subs	r3, #10
 8005328:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	2b09      	cmp	r3, #9
 800532e:	d8f6      	bhi.n	800531e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	b2da      	uxtb	r2, r3
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	4313      	orrs	r3, r2
 800533c:	b2db      	uxtb	r3, r3
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	4413      	add	r3, r2
 8005376:	b2db      	uxtb	r3, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	2300      	movs	r3, #0
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7bdb      	ldrb	r3, [r3, #15]
 80053a0:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7b5b      	ldrb	r3, [r3, #13]
 80053a6:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7b9b      	ldrb	r3, [r3, #14]
 80053ac:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	e06f      	b.n	8005494 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d011      	beq.n	80053de <RTC_DateUpdate+0x5c>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d00e      	beq.n	80053de <RTC_DateUpdate+0x5c>
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	d00b      	beq.n	80053de <RTC_DateUpdate+0x5c>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b07      	cmp	r3, #7
 80053ca:	d008      	beq.n	80053de <RTC_DateUpdate+0x5c>
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d005      	beq.n	80053de <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b0a      	cmp	r3, #10
 80053d6:	d002      	beq.n	80053de <RTC_DateUpdate+0x5c>
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d117      	bne.n	800540e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b1e      	cmp	r3, #30
 80053e2:	d803      	bhi.n	80053ec <RTC_DateUpdate+0x6a>
      {
        day++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80053ea:	e050      	b.n	800548e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b0c      	cmp	r3, #12
 80053f0:	d005      	beq.n	80053fe <RTC_DateUpdate+0x7c>
        {
          month++;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3301      	adds	r3, #1
 80053f6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80053f8:	2301      	movs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80053fc:	e047      	b.n	800548e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80053fe:	2301      	movs	r3, #1
 8005400:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005402:	2301      	movs	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
          year++;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	3301      	adds	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800540c:	e03f      	b.n	800548e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d008      	beq.n	8005426 <RTC_DateUpdate+0xa4>
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b06      	cmp	r3, #6
 8005418:	d005      	beq.n	8005426 <RTC_DateUpdate+0xa4>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b09      	cmp	r3, #9
 800541e:	d002      	beq.n	8005426 <RTC_DateUpdate+0xa4>
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b0b      	cmp	r3, #11
 8005424:	d10c      	bne.n	8005440 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b1d      	cmp	r3, #29
 800542a:	d803      	bhi.n	8005434 <RTC_DateUpdate+0xb2>
      {
        day++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005432:	e02c      	b.n	800548e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	3301      	adds	r3, #1
 8005438:	613b      	str	r3, [r7, #16]
        day = 1U;
 800543a:	2301      	movs	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800543e:	e026      	b.n	800548e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d123      	bne.n	800548e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b1b      	cmp	r3, #27
 800544a:	d803      	bhi.n	8005454 <RTC_DateUpdate+0xd2>
      {
        day++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3301      	adds	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e01c      	b.n	800548e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b1c      	cmp	r3, #28
 8005458:	d111      	bne.n	800547e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	b29b      	uxth	r3, r3
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f838 	bl	80054d4 <RTC_IsLeapYear>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <RTC_DateUpdate+0xf0>
        {
          day++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3301      	adds	r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e00d      	b.n	800548e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	3301      	adds	r3, #1
 8005476:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005478:	2301      	movs	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e007      	b.n	800548e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b1d      	cmp	r3, #29
 8005482:	d104      	bne.n	800548e <RTC_DateUpdate+0x10c>
      {
        month++;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	3301      	adds	r3, #1
 8005488:	613b      	str	r3, [r7, #16]
        day = 1U;
 800548a:	2301      	movs	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	3301      	adds	r3, #1
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d38b      	bcc.n	80053b4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	6978      	ldr	r0, [r7, #20]
 80054c0:	f000 f83a 	bl	8005538 <RTC_WeekDayNum>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	731a      	strb	r2, [r3, #12]
}
 80054cc:	bf00      	nop
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e01d      	b.n	800552a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	4a10      	ldr	r2, [pc, #64]	; (8005534 <RTC_IsLeapYear+0x60>)
 80054f2:	fba2 1203 	umull	r1, r2, r2, r3
 80054f6:	0952      	lsrs	r2, r2, #5
 80054f8:	2164      	movs	r1, #100	; 0x64
 80054fa:	fb01 f202 	mul.w	r2, r1, r2
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005506:	2301      	movs	r3, #1
 8005508:	e00f      	b.n	800552a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <RTC_IsLeapYear+0x60>)
 800550e:	fba2 1203 	umull	r1, r2, r2, r3
 8005512:	09d2      	lsrs	r2, r2, #7
 8005514:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005518:	fb01 f202 	mul.w	r2, r1, r2
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005528:	2300      	movs	r3, #0
  }
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	51eb851f 	.word	0x51eb851f

08005538 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
 8005544:	4613      	mov	r3, r2
 8005546:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005556:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d82d      	bhi.n	80055ba <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	4613      	mov	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4413      	add	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	4a2c      	ldr	r2, [pc, #176]	; (800561c <RTC_WeekDayNum+0xe4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	085a      	lsrs	r2, r3, #1
 8005572:	78bb      	ldrb	r3, [r7, #2]
 8005574:	441a      	add	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	441a      	add	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	3b01      	subs	r3, #1
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	3b01      	subs	r3, #1
 8005586:	4926      	ldr	r1, [pc, #152]	; (8005620 <RTC_WeekDayNum+0xe8>)
 8005588:	fba1 1303 	umull	r1, r3, r1, r3
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	3b01      	subs	r3, #1
 8005594:	4922      	ldr	r1, [pc, #136]	; (8005620 <RTC_WeekDayNum+0xe8>)
 8005596:	fba1 1303 	umull	r1, r3, r1, r3
 800559a:	09db      	lsrs	r3, r3, #7
 800559c:	4413      	add	r3, r2
 800559e:	1d1a      	adds	r2, r3, #4
 80055a0:	4b20      	ldr	r3, [pc, #128]	; (8005624 <RTC_WeekDayNum+0xec>)
 80055a2:	fba3 1302 	umull	r1, r3, r3, r2
 80055a6:	1ad1      	subs	r1, r2, r3
 80055a8:	0849      	lsrs	r1, r1, #1
 80055aa:	440b      	add	r3, r1
 80055ac:	0899      	lsrs	r1, r3, #2
 80055ae:	460b      	mov	r3, r1
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	1a5b      	subs	r3, r3, r1
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e029      	b.n	800560e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	4613      	mov	r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <RTC_WeekDayNum+0xe4>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	085a      	lsrs	r2, r3, #1
 80055ce:	78bb      	ldrb	r3, [r7, #2]
 80055d0:	441a      	add	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	441a      	add	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4910      	ldr	r1, [pc, #64]	; (8005620 <RTC_WeekDayNum+0xe8>)
 80055e0:	fba1 1303 	umull	r1, r3, r1, r3
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	490d      	ldr	r1, [pc, #52]	; (8005620 <RTC_WeekDayNum+0xe8>)
 80055ec:	fba1 1303 	umull	r1, r3, r1, r3
 80055f0:	09db      	lsrs	r3, r3, #7
 80055f2:	4413      	add	r3, r2
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <RTC_WeekDayNum+0xec>)
 80055f8:	fba3 1302 	umull	r1, r3, r3, r2
 80055fc:	1ad1      	subs	r1, r2, r3
 80055fe:	0849      	lsrs	r1, r1, #1
 8005600:	440b      	add	r3, r1
 8005602:	0899      	lsrs	r1, r3, #2
 8005604:	460b      	mov	r3, r1
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	1a5b      	subs	r3, r3, r1
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	b2db      	uxtb	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	38e38e39 	.word	0x38e38e39
 8005620:	51eb851f 	.word	0x51eb851f
 8005624:	24924925 	.word	0x24924925

08005628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e041      	b.n	80056be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fd fbc6 	bl	8002de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f000 f8ba 	bl	80057e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d001      	beq.n	80056e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e032      	b.n	8005746 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_TIM_Base_Start+0x88>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00e      	beq.n	8005710 <HAL_TIM_Base_Start+0x48>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d009      	beq.n	8005710 <HAL_TIM_Base_Start+0x48>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a14      	ldr	r2, [pc, #80]	; (8005754 <HAL_TIM_Base_Start+0x8c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_TIM_Base_Start+0x48>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <HAL_TIM_Base_Start+0x90>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d111      	bne.n	8005734 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b06      	cmp	r3, #6
 8005720:	d010      	beq.n	8005744 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	e007      	b.n	8005744 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800

0800575c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005770:	2302      	movs	r3, #2
 8005772:	e031      	b.n	80057d8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f88c 	bl	80058a4 <TIM_SlaveTimer_SetConfig>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e018      	b.n	80057d8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057c4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a29      	ldr	r2, [pc, #164]	; (8005898 <TIM_Base_SetConfig+0xb8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_Base_SetConfig+0x30>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fe:	d007      	beq.n	8005810 <TIM_Base_SetConfig+0x30>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a26      	ldr	r2, [pc, #152]	; (800589c <TIM_Base_SetConfig+0xbc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_Base_SetConfig+0x30>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <TIM_Base_SetConfig+0xc0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d108      	bne.n	8005822 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <TIM_Base_SetConfig+0xb8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00b      	beq.n	8005842 <TIM_Base_SetConfig+0x62>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0x62>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a19      	ldr	r2, [pc, #100]	; (800589c <TIM_Base_SetConfig+0xbc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0x62>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <TIM_Base_SetConfig+0xc0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d108      	bne.n	8005854 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <TIM_Base_SetConfig+0xb8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d103      	bne.n	8005888 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	615a      	str	r2, [r3, #20]
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800

080058a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d05c      	beq.n	80059a4 <TIM_SlaveTimer_SetConfig+0x100>
 80058ea:	2b30      	cmp	r3, #48	; 0x30
 80058ec:	d806      	bhi.n	80058fc <TIM_SlaveTimer_SetConfig+0x58>
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d058      	beq.n	80059a4 <TIM_SlaveTimer_SetConfig+0x100>
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d056      	beq.n	80059a4 <TIM_SlaveTimer_SetConfig+0x100>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d054      	beq.n	80059a4 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80058fa:	e054      	b.n	80059a6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80058fc:	2b50      	cmp	r3, #80	; 0x50
 80058fe:	d03d      	beq.n	800597c <TIM_SlaveTimer_SetConfig+0xd8>
 8005900:	2b50      	cmp	r3, #80	; 0x50
 8005902:	d802      	bhi.n	800590a <TIM_SlaveTimer_SetConfig+0x66>
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d010      	beq.n	800592a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005908:	e04d      	b.n	80059a6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800590a:	2b60      	cmp	r3, #96	; 0x60
 800590c:	d040      	beq.n	8005990 <TIM_SlaveTimer_SetConfig+0xec>
 800590e:	2b70      	cmp	r3, #112	; 0x70
 8005910:	d000      	beq.n	8005914 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005912:	e048      	b.n	80059a6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68d9      	ldr	r1, [r3, #12]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f000 f8a1 	bl	8005a6a <TIM_ETR_SetConfig>
      break;
 8005928:	e03d      	b.n	80059a6 <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b05      	cmp	r3, #5
 8005930:	d101      	bne.n	8005936 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e038      	b.n	80059a8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800595c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
      break;
 800597a:	e014      	b.n	80059a6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	461a      	mov	r2, r3
 800598a:	f000 f811 	bl	80059b0 <TIM_TI1_ConfigInputStage>
      break;
 800598e:	e00a      	b.n	80059a6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6899      	ldr	r1, [r3, #8]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	461a      	mov	r2, r3
 800599e:	f000 f835 	bl	8005a0c <TIM_TI2_ConfigInputStage>
      break;
 80059a2:	e000      	b.n	80059a6 <TIM_SlaveTimer_SetConfig+0x102>
        break;
 80059a4:	bf00      	nop
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f023 0201 	bic.w	r2, r3, #1
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f023 030a 	bic.w	r3, r3, #10
 80059ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f023 0210 	bic.w	r2, r3, #16
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	031b      	lsls	r3, r3, #12
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	621a      	str	r2, [r3, #32]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	021a      	lsls	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	609a      	str	r2, [r3, #8]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e046      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a10      	ldr	r2, [pc, #64]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800

08005b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e03f      	b.n	8005bf6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fd f946 	bl	8002e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2224      	movs	r2, #36	; 0x24
 8005b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f829 	bl	8005c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c3a:	f023 030c 	bic.w	r3, r3, #12
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a2c      	ldr	r2, [pc, #176]	; (8005d14 <UART_SetConfig+0x114>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d103      	bne.n	8005c70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c68:	f7fe fd58 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	e002      	b.n	8005c76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fe fd40 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 8005c74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009a      	lsls	r2, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <UART_SetConfig+0x118>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	0119      	lsls	r1, r3, #4
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009a      	lsls	r2, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cac:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <UART_SetConfig+0x118>)
 8005cae:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	2064      	movs	r0, #100	; 0x64
 8005cb6:	fb00 f303 	mul.w	r3, r0, r3
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	3332      	adds	r3, #50	; 0x32
 8005cc0:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <UART_SetConfig+0x118>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ccc:	4419      	add	r1, r3
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009a      	lsls	r2, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <UART_SetConfig+0x118>)
 8005ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	2064      	movs	r0, #100	; 0x64
 8005cee:	fb00 f303 	mul.w	r3, r0, r3
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	3332      	adds	r3, #50	; 0x32
 8005cf8:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <UART_SetConfig+0x118>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	440a      	add	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40013800 	.word	0x40013800
 8005d18:	51eb851f 	.word	0x51eb851f

08005d1c <atoi>:
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	2100      	movs	r1, #0
 8005d20:	f000 bd2c 	b.w	800677c <strtol>

08005d24 <__errno>:
 8005d24:	4b01      	ldr	r3, [pc, #4]	; (8005d2c <__errno+0x8>)
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000050 	.word	0x20000050

08005d30 <__libc_init_array>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	2500      	movs	r5, #0
 8005d34:	4e0c      	ldr	r6, [pc, #48]	; (8005d68 <__libc_init_array+0x38>)
 8005d36:	4c0d      	ldr	r4, [pc, #52]	; (8005d6c <__libc_init_array+0x3c>)
 8005d38:	1ba4      	subs	r4, r4, r6
 8005d3a:	10a4      	asrs	r4, r4, #2
 8005d3c:	42a5      	cmp	r5, r4
 8005d3e:	d109      	bne.n	8005d54 <__libc_init_array+0x24>
 8005d40:	f002 f904 	bl	8007f4c <_init>
 8005d44:	2500      	movs	r5, #0
 8005d46:	4e0a      	ldr	r6, [pc, #40]	; (8005d70 <__libc_init_array+0x40>)
 8005d48:	4c0a      	ldr	r4, [pc, #40]	; (8005d74 <__libc_init_array+0x44>)
 8005d4a:	1ba4      	subs	r4, r4, r6
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	42a5      	cmp	r5, r4
 8005d50:	d105      	bne.n	8005d5e <__libc_init_array+0x2e>
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d58:	4798      	blx	r3
 8005d5a:	3501      	adds	r5, #1
 8005d5c:	e7ee      	b.n	8005d3c <__libc_init_array+0xc>
 8005d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d62:	4798      	blx	r3
 8005d64:	3501      	adds	r5, #1
 8005d66:	e7f2      	b.n	8005d4e <__libc_init_array+0x1e>
 8005d68:	080099a8 	.word	0x080099a8
 8005d6c:	080099a8 	.word	0x080099a8
 8005d70:	080099a8 	.word	0x080099a8
 8005d74:	080099ac 	.word	0x080099ac

08005d78 <memset>:
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4402      	add	r2, r0
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d100      	bne.n	8005d82 <memset+0xa>
 8005d80:	4770      	bx	lr
 8005d82:	f803 1b01 	strb.w	r1, [r3], #1
 8005d86:	e7f9      	b.n	8005d7c <memset+0x4>

08005d88 <__cvt>:
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8e:	461e      	mov	r6, r3
 8005d90:	bfbb      	ittet	lt
 8005d92:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005d96:	461e      	movlt	r6, r3
 8005d98:	2300      	movge	r3, #0
 8005d9a:	232d      	movlt	r3, #45	; 0x2d
 8005d9c:	b088      	sub	sp, #32
 8005d9e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005da0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005da4:	f027 0720 	bic.w	r7, r7, #32
 8005da8:	2f46      	cmp	r7, #70	; 0x46
 8005daa:	4614      	mov	r4, r2
 8005dac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005dae:	700b      	strb	r3, [r1, #0]
 8005db0:	d004      	beq.n	8005dbc <__cvt+0x34>
 8005db2:	2f45      	cmp	r7, #69	; 0x45
 8005db4:	d100      	bne.n	8005db8 <__cvt+0x30>
 8005db6:	3501      	adds	r5, #1
 8005db8:	2302      	movs	r3, #2
 8005dba:	e000      	b.n	8005dbe <__cvt+0x36>
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	aa07      	add	r2, sp, #28
 8005dc0:	9204      	str	r2, [sp, #16]
 8005dc2:	aa06      	add	r2, sp, #24
 8005dc4:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005dc8:	e9cd 3500 	strd	r3, r5, [sp]
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4633      	mov	r3, r6
 8005dd0:	f000 fd7a 	bl	80068c8 <_dtoa_r>
 8005dd4:	2f47      	cmp	r7, #71	; 0x47
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	d102      	bne.n	8005de0 <__cvt+0x58>
 8005dda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ddc:	07db      	lsls	r3, r3, #31
 8005dde:	d526      	bpl.n	8005e2e <__cvt+0xa6>
 8005de0:	2f46      	cmp	r7, #70	; 0x46
 8005de2:	eb08 0905 	add.w	r9, r8, r5
 8005de6:	d111      	bne.n	8005e0c <__cvt+0x84>
 8005de8:	f898 3000 	ldrb.w	r3, [r8]
 8005dec:	2b30      	cmp	r3, #48	; 0x30
 8005dee:	d10a      	bne.n	8005e06 <__cvt+0x7e>
 8005df0:	2200      	movs	r2, #0
 8005df2:	2300      	movs	r3, #0
 8005df4:	4620      	mov	r0, r4
 8005df6:	4631      	mov	r1, r6
 8005df8:	f7fa fde0 	bl	80009bc <__aeabi_dcmpeq>
 8005dfc:	b918      	cbnz	r0, 8005e06 <__cvt+0x7e>
 8005dfe:	f1c5 0501 	rsb	r5, r5, #1
 8005e02:	f8ca 5000 	str.w	r5, [sl]
 8005e06:	f8da 3000 	ldr.w	r3, [sl]
 8005e0a:	4499      	add	r9, r3
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4620      	mov	r0, r4
 8005e12:	4631      	mov	r1, r6
 8005e14:	f7fa fdd2 	bl	80009bc <__aeabi_dcmpeq>
 8005e18:	b938      	cbnz	r0, 8005e2a <__cvt+0xa2>
 8005e1a:	2230      	movs	r2, #48	; 0x30
 8005e1c:	9b07      	ldr	r3, [sp, #28]
 8005e1e:	454b      	cmp	r3, r9
 8005e20:	d205      	bcs.n	8005e2e <__cvt+0xa6>
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	9107      	str	r1, [sp, #28]
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e7f8      	b.n	8005e1c <__cvt+0x94>
 8005e2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e2e:	4640      	mov	r0, r8
 8005e30:	9b07      	ldr	r3, [sp, #28]
 8005e32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e34:	eba3 0308 	sub.w	r3, r3, r8
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	b008      	add	sp, #32
 8005e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005e40 <__exponent>:
 8005e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e42:	2900      	cmp	r1, #0
 8005e44:	bfb4      	ite	lt
 8005e46:	232d      	movlt	r3, #45	; 0x2d
 8005e48:	232b      	movge	r3, #43	; 0x2b
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	bfb8      	it	lt
 8005e4e:	4249      	neglt	r1, r1
 8005e50:	2909      	cmp	r1, #9
 8005e52:	f804 2b02 	strb.w	r2, [r4], #2
 8005e56:	7043      	strb	r3, [r0, #1]
 8005e58:	dd21      	ble.n	8005e9e <__exponent+0x5e>
 8005e5a:	f10d 0307 	add.w	r3, sp, #7
 8005e5e:	461f      	mov	r7, r3
 8005e60:	260a      	movs	r6, #10
 8005e62:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e66:	fb06 1115 	mls	r1, r6, r5, r1
 8005e6a:	2d09      	cmp	r5, #9
 8005e6c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005e70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e74:	f103 32ff 	add.w	r2, r3, #4294967295
 8005e78:	4629      	mov	r1, r5
 8005e7a:	dc09      	bgt.n	8005e90 <__exponent+0x50>
 8005e7c:	3130      	adds	r1, #48	; 0x30
 8005e7e:	3b02      	subs	r3, #2
 8005e80:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e84:	42bb      	cmp	r3, r7
 8005e86:	4622      	mov	r2, r4
 8005e88:	d304      	bcc.n	8005e94 <__exponent+0x54>
 8005e8a:	1a10      	subs	r0, r2, r0
 8005e8c:	b003      	add	sp, #12
 8005e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e90:	4613      	mov	r3, r2
 8005e92:	e7e6      	b.n	8005e62 <__exponent+0x22>
 8005e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e98:	f804 2b01 	strb.w	r2, [r4], #1
 8005e9c:	e7f2      	b.n	8005e84 <__exponent+0x44>
 8005e9e:	2330      	movs	r3, #48	; 0x30
 8005ea0:	4419      	add	r1, r3
 8005ea2:	7083      	strb	r3, [r0, #2]
 8005ea4:	1d02      	adds	r2, r0, #4
 8005ea6:	70c1      	strb	r1, [r0, #3]
 8005ea8:	e7ef      	b.n	8005e8a <__exponent+0x4a>
	...

08005eac <_printf_float>:
 8005eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb0:	b091      	sub	sp, #68	; 0x44
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005eb6:	4693      	mov	fp, r2
 8005eb8:	461e      	mov	r6, r3
 8005eba:	4605      	mov	r5, r0
 8005ebc:	f001 fabc 	bl	8007438 <_localeconv_r>
 8005ec0:	6803      	ldr	r3, [r0, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec6:	f7fa f94d 	bl	8000164 <strlen>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	900a      	str	r0, [sp, #40]	; 0x28
 8005ed2:	3307      	adds	r3, #7
 8005ed4:	f023 0307 	bic.w	r3, r3, #7
 8005ed8:	f103 0208 	add.w	r2, r3, #8
 8005edc:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005ee0:	f8d4 a000 	ldr.w	sl, [r4]
 8005ee4:	603a      	str	r2, [r7, #0]
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005eee:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005ef2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	4ba6      	ldr	r3, [pc, #664]	; (8006198 <_printf_float+0x2ec>)
 8005efe:	4638      	mov	r0, r7
 8005f00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f02:	f7fa fd8d 	bl	8000a20 <__aeabi_dcmpun>
 8005f06:	bb68      	cbnz	r0, 8005f64 <_printf_float+0xb8>
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	4ba2      	ldr	r3, [pc, #648]	; (8006198 <_printf_float+0x2ec>)
 8005f0e:	4638      	mov	r0, r7
 8005f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f12:	f7fa fd67 	bl	80009e4 <__aeabi_dcmple>
 8005f16:	bb28      	cbnz	r0, 8005f64 <_printf_float+0xb8>
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fd56 	bl	80009d0 <__aeabi_dcmplt>
 8005f24:	b110      	cbz	r0, 8005f2c <_printf_float+0x80>
 8005f26:	232d      	movs	r3, #45	; 0x2d
 8005f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2c:	4f9b      	ldr	r7, [pc, #620]	; (800619c <_printf_float+0x2f0>)
 8005f2e:	4b9c      	ldr	r3, [pc, #624]	; (80061a0 <_printf_float+0x2f4>)
 8005f30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f34:	bf98      	it	ls
 8005f36:	461f      	movls	r7, r3
 8005f38:	2303      	movs	r3, #3
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	f02a 0304 	bic.w	r3, sl, #4
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	9600      	str	r6, [sp, #0]
 8005f48:	465b      	mov	r3, fp
 8005f4a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 f9e2 	bl	8006318 <_printf_common>
 8005f54:	3001      	adds	r0, #1
 8005f56:	f040 8090 	bne.w	800607a <_printf_float+0x1ce>
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	b011      	add	sp, #68	; 0x44
 8005f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f64:	463a      	mov	r2, r7
 8005f66:	464b      	mov	r3, r9
 8005f68:	4638      	mov	r0, r7
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	f7fa fd58 	bl	8000a20 <__aeabi_dcmpun>
 8005f70:	b110      	cbz	r0, 8005f78 <_printf_float+0xcc>
 8005f72:	4f8c      	ldr	r7, [pc, #560]	; (80061a4 <_printf_float+0x2f8>)
 8005f74:	4b8c      	ldr	r3, [pc, #560]	; (80061a8 <_printf_float+0x2fc>)
 8005f76:	e7db      	b.n	8005f30 <_printf_float+0x84>
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005f7e:	1c59      	adds	r1, r3, #1
 8005f80:	a80d      	add	r0, sp, #52	; 0x34
 8005f82:	a90e      	add	r1, sp, #56	; 0x38
 8005f84:	d140      	bne.n	8006008 <_printf_float+0x15c>
 8005f86:	2306      	movs	r3, #6
 8005f88:	6063      	str	r3, [r4, #4]
 8005f8a:	f04f 0c00 	mov.w	ip, #0
 8005f8e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005f92:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	6022      	str	r2, [r4, #0]
 8005f9a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	463a      	mov	r2, r7
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f7ff feed 	bl	8005d88 <__cvt>
 8005fae:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005fb2:	2b47      	cmp	r3, #71	; 0x47
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	d109      	bne.n	8005fcc <_printf_float+0x120>
 8005fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fba:	1cd8      	adds	r0, r3, #3
 8005fbc:	db02      	blt.n	8005fc4 <_printf_float+0x118>
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	dd47      	ble.n	8006054 <_printf_float+0x1a8>
 8005fc4:	f1a8 0802 	sub.w	r8, r8, #2
 8005fc8:	fa5f f888 	uxtb.w	r8, r8
 8005fcc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005fd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fd2:	d824      	bhi.n	800601e <_printf_float+0x172>
 8005fd4:	3901      	subs	r1, #1
 8005fd6:	4642      	mov	r2, r8
 8005fd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fdc:	910d      	str	r1, [sp, #52]	; 0x34
 8005fde:	f7ff ff2f 	bl	8005e40 <__exponent>
 8005fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fe4:	4681      	mov	r9, r0
 8005fe6:	1813      	adds	r3, r2, r0
 8005fe8:	2a01      	cmp	r2, #1
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	dc02      	bgt.n	8005ff4 <_printf_float+0x148>
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	07d1      	lsls	r1, r2, #31
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_float+0x14c>
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	6123      	str	r3, [r4, #16]
 8005ff8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0a2      	beq.n	8005f46 <_printf_float+0x9a>
 8006000:	232d      	movs	r3, #45	; 0x2d
 8006002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006006:	e79e      	b.n	8005f46 <_printf_float+0x9a>
 8006008:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800600c:	f000 816e 	beq.w	80062ec <_printf_float+0x440>
 8006010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006014:	d1b9      	bne.n	8005f8a <_printf_float+0xde>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1b7      	bne.n	8005f8a <_printf_float+0xde>
 800601a:	2301      	movs	r3, #1
 800601c:	e7b4      	b.n	8005f88 <_printf_float+0xdc>
 800601e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006022:	d119      	bne.n	8006058 <_printf_float+0x1ac>
 8006024:	2900      	cmp	r1, #0
 8006026:	6863      	ldr	r3, [r4, #4]
 8006028:	dd0c      	ble.n	8006044 <_printf_float+0x198>
 800602a:	6121      	str	r1, [r4, #16]
 800602c:	b913      	cbnz	r3, 8006034 <_printf_float+0x188>
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	07d2      	lsls	r2, r2, #31
 8006032:	d502      	bpl.n	800603a <_printf_float+0x18e>
 8006034:	3301      	adds	r3, #1
 8006036:	440b      	add	r3, r1
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800603c:	f04f 0900 	mov.w	r9, #0
 8006040:	65a3      	str	r3, [r4, #88]	; 0x58
 8006042:	e7d9      	b.n	8005ff8 <_printf_float+0x14c>
 8006044:	b913      	cbnz	r3, 800604c <_printf_float+0x1a0>
 8006046:	6822      	ldr	r2, [r4, #0]
 8006048:	07d0      	lsls	r0, r2, #31
 800604a:	d501      	bpl.n	8006050 <_printf_float+0x1a4>
 800604c:	3302      	adds	r3, #2
 800604e:	e7f3      	b.n	8006038 <_printf_float+0x18c>
 8006050:	2301      	movs	r3, #1
 8006052:	e7f1      	b.n	8006038 <_printf_float+0x18c>
 8006054:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006058:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800605c:	4293      	cmp	r3, r2
 800605e:	db05      	blt.n	800606c <_printf_float+0x1c0>
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	6123      	str	r3, [r4, #16]
 8006064:	07d1      	lsls	r1, r2, #31
 8006066:	d5e8      	bpl.n	800603a <_printf_float+0x18e>
 8006068:	3301      	adds	r3, #1
 800606a:	e7e5      	b.n	8006038 <_printf_float+0x18c>
 800606c:	2b00      	cmp	r3, #0
 800606e:	bfcc      	ite	gt
 8006070:	2301      	movgt	r3, #1
 8006072:	f1c3 0302 	rsble	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	e7de      	b.n	8006038 <_printf_float+0x18c>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	055a      	lsls	r2, r3, #21
 800607e:	d407      	bmi.n	8006090 <_printf_float+0x1e4>
 8006080:	6923      	ldr	r3, [r4, #16]
 8006082:	463a      	mov	r2, r7
 8006084:	4659      	mov	r1, fp
 8006086:	4628      	mov	r0, r5
 8006088:	47b0      	blx	r6
 800608a:	3001      	adds	r0, #1
 800608c:	d129      	bne.n	80060e2 <_printf_float+0x236>
 800608e:	e764      	b.n	8005f5a <_printf_float+0xae>
 8006090:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006094:	f240 80d7 	bls.w	8006246 <_printf_float+0x39a>
 8006098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	f7fa fc8c 	bl	80009bc <__aeabi_dcmpeq>
 80060a4:	b388      	cbz	r0, 800610a <_printf_float+0x25e>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4a40      	ldr	r2, [pc, #256]	; (80061ac <_printf_float+0x300>)
 80060aa:	4659      	mov	r1, fp
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b0      	blx	r6
 80060b0:	3001      	adds	r0, #1
 80060b2:	f43f af52 	beq.w	8005f5a <_printf_float+0xae>
 80060b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060ba:	429a      	cmp	r2, r3
 80060bc:	db02      	blt.n	80060c4 <_printf_float+0x218>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	07d8      	lsls	r0, r3, #31
 80060c2:	d50e      	bpl.n	80060e2 <_printf_float+0x236>
 80060c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060c8:	4659      	mov	r1, fp
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b0      	blx	r6
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f af43 	beq.w	8005f5a <_printf_float+0xae>
 80060d4:	2700      	movs	r7, #0
 80060d6:	f104 081a 	add.w	r8, r4, #26
 80060da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060dc:	3b01      	subs	r3, #1
 80060de:	42bb      	cmp	r3, r7
 80060e0:	dc09      	bgt.n	80060f6 <_printf_float+0x24a>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	079f      	lsls	r7, r3, #30
 80060e6:	f100 80fd 	bmi.w	80062e4 <_printf_float+0x438>
 80060ea:	68e0      	ldr	r0, [r4, #12]
 80060ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ee:	4298      	cmp	r0, r3
 80060f0:	bfb8      	it	lt
 80060f2:	4618      	movlt	r0, r3
 80060f4:	e733      	b.n	8005f5e <_printf_float+0xb2>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4642      	mov	r2, r8
 80060fa:	4659      	mov	r1, fp
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b0      	blx	r6
 8006100:	3001      	adds	r0, #1
 8006102:	f43f af2a 	beq.w	8005f5a <_printf_float+0xae>
 8006106:	3701      	adds	r7, #1
 8006108:	e7e7      	b.n	80060da <_printf_float+0x22e>
 800610a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc2b      	bgt.n	8006168 <_printf_float+0x2bc>
 8006110:	2301      	movs	r3, #1
 8006112:	4a26      	ldr	r2, [pc, #152]	; (80061ac <_printf_float+0x300>)
 8006114:	4659      	mov	r1, fp
 8006116:	4628      	mov	r0, r5
 8006118:	47b0      	blx	r6
 800611a:	3001      	adds	r0, #1
 800611c:	f43f af1d 	beq.w	8005f5a <_printf_float+0xae>
 8006120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006122:	b923      	cbnz	r3, 800612e <_printf_float+0x282>
 8006124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006126:	b913      	cbnz	r3, 800612e <_printf_float+0x282>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	07d9      	lsls	r1, r3, #31
 800612c:	d5d9      	bpl.n	80060e2 <_printf_float+0x236>
 800612e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006132:	4659      	mov	r1, fp
 8006134:	4628      	mov	r0, r5
 8006136:	47b0      	blx	r6
 8006138:	3001      	adds	r0, #1
 800613a:	f43f af0e 	beq.w	8005f5a <_printf_float+0xae>
 800613e:	f04f 0800 	mov.w	r8, #0
 8006142:	f104 091a 	add.w	r9, r4, #26
 8006146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006148:	425b      	negs	r3, r3
 800614a:	4543      	cmp	r3, r8
 800614c:	dc01      	bgt.n	8006152 <_printf_float+0x2a6>
 800614e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006150:	e797      	b.n	8006082 <_printf_float+0x1d6>
 8006152:	2301      	movs	r3, #1
 8006154:	464a      	mov	r2, r9
 8006156:	4659      	mov	r1, fp
 8006158:	4628      	mov	r0, r5
 800615a:	47b0      	blx	r6
 800615c:	3001      	adds	r0, #1
 800615e:	f43f aefc 	beq.w	8005f5a <_printf_float+0xae>
 8006162:	f108 0801 	add.w	r8, r8, #1
 8006166:	e7ee      	b.n	8006146 <_printf_float+0x29a>
 8006168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800616a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800616c:	429a      	cmp	r2, r3
 800616e:	bfa8      	it	ge
 8006170:	461a      	movge	r2, r3
 8006172:	2a00      	cmp	r2, #0
 8006174:	4690      	mov	r8, r2
 8006176:	dd07      	ble.n	8006188 <_printf_float+0x2dc>
 8006178:	4613      	mov	r3, r2
 800617a:	4659      	mov	r1, fp
 800617c:	463a      	mov	r2, r7
 800617e:	4628      	mov	r0, r5
 8006180:	47b0      	blx	r6
 8006182:	3001      	adds	r0, #1
 8006184:	f43f aee9 	beq.w	8005f5a <_printf_float+0xae>
 8006188:	f104 031a 	add.w	r3, r4, #26
 800618c:	f04f 0a00 	mov.w	sl, #0
 8006190:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006194:	930b      	str	r3, [sp, #44]	; 0x2c
 8006196:	e015      	b.n	80061c4 <_printf_float+0x318>
 8006198:	7fefffff 	.word	0x7fefffff
 800619c:	0800974c 	.word	0x0800974c
 80061a0:	08009748 	.word	0x08009748
 80061a4:	08009754 	.word	0x08009754
 80061a8:	08009750 	.word	0x08009750
 80061ac:	08009758 	.word	0x08009758
 80061b0:	2301      	movs	r3, #1
 80061b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061b4:	4659      	mov	r1, fp
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b0      	blx	r6
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f aecd 	beq.w	8005f5a <_printf_float+0xae>
 80061c0:	f10a 0a01 	add.w	sl, sl, #1
 80061c4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80061c8:	eba9 0308 	sub.w	r3, r9, r8
 80061cc:	4553      	cmp	r3, sl
 80061ce:	dcef      	bgt.n	80061b0 <_printf_float+0x304>
 80061d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061d4:	429a      	cmp	r2, r3
 80061d6:	444f      	add	r7, r9
 80061d8:	db14      	blt.n	8006204 <_printf_float+0x358>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	07da      	lsls	r2, r3, #31
 80061de:	d411      	bmi.n	8006204 <_printf_float+0x358>
 80061e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061e4:	eba3 0209 	sub.w	r2, r3, r9
 80061e8:	eba3 0901 	sub.w	r9, r3, r1
 80061ec:	4591      	cmp	r9, r2
 80061ee:	bfa8      	it	ge
 80061f0:	4691      	movge	r9, r2
 80061f2:	f1b9 0f00 	cmp.w	r9, #0
 80061f6:	dc0d      	bgt.n	8006214 <_printf_float+0x368>
 80061f8:	2700      	movs	r7, #0
 80061fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061fe:	f104 081a 	add.w	r8, r4, #26
 8006202:	e018      	b.n	8006236 <_printf_float+0x38a>
 8006204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006208:	4659      	mov	r1, fp
 800620a:	4628      	mov	r0, r5
 800620c:	47b0      	blx	r6
 800620e:	3001      	adds	r0, #1
 8006210:	d1e6      	bne.n	80061e0 <_printf_float+0x334>
 8006212:	e6a2      	b.n	8005f5a <_printf_float+0xae>
 8006214:	464b      	mov	r3, r9
 8006216:	463a      	mov	r2, r7
 8006218:	4659      	mov	r1, fp
 800621a:	4628      	mov	r0, r5
 800621c:	47b0      	blx	r6
 800621e:	3001      	adds	r0, #1
 8006220:	d1ea      	bne.n	80061f8 <_printf_float+0x34c>
 8006222:	e69a      	b.n	8005f5a <_printf_float+0xae>
 8006224:	2301      	movs	r3, #1
 8006226:	4642      	mov	r2, r8
 8006228:	4659      	mov	r1, fp
 800622a:	4628      	mov	r0, r5
 800622c:	47b0      	blx	r6
 800622e:	3001      	adds	r0, #1
 8006230:	f43f ae93 	beq.w	8005f5a <_printf_float+0xae>
 8006234:	3701      	adds	r7, #1
 8006236:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	eba3 0309 	sub.w	r3, r3, r9
 8006240:	42bb      	cmp	r3, r7
 8006242:	dcef      	bgt.n	8006224 <_printf_float+0x378>
 8006244:	e74d      	b.n	80060e2 <_printf_float+0x236>
 8006246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006248:	2a01      	cmp	r2, #1
 800624a:	dc01      	bgt.n	8006250 <_printf_float+0x3a4>
 800624c:	07db      	lsls	r3, r3, #31
 800624e:	d538      	bpl.n	80062c2 <_printf_float+0x416>
 8006250:	2301      	movs	r3, #1
 8006252:	463a      	mov	r2, r7
 8006254:	4659      	mov	r1, fp
 8006256:	4628      	mov	r0, r5
 8006258:	47b0      	blx	r6
 800625a:	3001      	adds	r0, #1
 800625c:	f43f ae7d 	beq.w	8005f5a <_printf_float+0xae>
 8006260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006264:	4659      	mov	r1, fp
 8006266:	4628      	mov	r0, r5
 8006268:	47b0      	blx	r6
 800626a:	3001      	adds	r0, #1
 800626c:	f107 0701 	add.w	r7, r7, #1
 8006270:	f43f ae73 	beq.w	8005f5a <_printf_float+0xae>
 8006274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627a:	2200      	movs	r2, #0
 800627c:	f103 38ff 	add.w	r8, r3, #4294967295
 8006280:	2300      	movs	r3, #0
 8006282:	f7fa fb9b 	bl	80009bc <__aeabi_dcmpeq>
 8006286:	b9c0      	cbnz	r0, 80062ba <_printf_float+0x40e>
 8006288:	4643      	mov	r3, r8
 800628a:	463a      	mov	r2, r7
 800628c:	4659      	mov	r1, fp
 800628e:	4628      	mov	r0, r5
 8006290:	47b0      	blx	r6
 8006292:	3001      	adds	r0, #1
 8006294:	d10d      	bne.n	80062b2 <_printf_float+0x406>
 8006296:	e660      	b.n	8005f5a <_printf_float+0xae>
 8006298:	2301      	movs	r3, #1
 800629a:	4642      	mov	r2, r8
 800629c:	4659      	mov	r1, fp
 800629e:	4628      	mov	r0, r5
 80062a0:	47b0      	blx	r6
 80062a2:	3001      	adds	r0, #1
 80062a4:	f43f ae59 	beq.w	8005f5a <_printf_float+0xae>
 80062a8:	3701      	adds	r7, #1
 80062aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ac:	3b01      	subs	r3, #1
 80062ae:	42bb      	cmp	r3, r7
 80062b0:	dcf2      	bgt.n	8006298 <_printf_float+0x3ec>
 80062b2:	464b      	mov	r3, r9
 80062b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062b8:	e6e4      	b.n	8006084 <_printf_float+0x1d8>
 80062ba:	2700      	movs	r7, #0
 80062bc:	f104 081a 	add.w	r8, r4, #26
 80062c0:	e7f3      	b.n	80062aa <_printf_float+0x3fe>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7e1      	b.n	800628a <_printf_float+0x3de>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4642      	mov	r2, r8
 80062ca:	4659      	mov	r1, fp
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b0      	blx	r6
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae42 	beq.w	8005f5a <_printf_float+0xae>
 80062d6:	3701      	adds	r7, #1
 80062d8:	68e3      	ldr	r3, [r4, #12]
 80062da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	42bb      	cmp	r3, r7
 80062e0:	dcf1      	bgt.n	80062c6 <_printf_float+0x41a>
 80062e2:	e702      	b.n	80060ea <_printf_float+0x23e>
 80062e4:	2700      	movs	r7, #0
 80062e6:	f104 0819 	add.w	r8, r4, #25
 80062ea:	e7f5      	b.n	80062d8 <_printf_float+0x42c>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f43f ae94 	beq.w	800601a <_printf_float+0x16e>
 80062f2:	f04f 0c00 	mov.w	ip, #0
 80062f6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80062fa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80062fe:	6022      	str	r2, [r4, #0]
 8006300:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006304:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	463a      	mov	r2, r7
 800630c:	464b      	mov	r3, r9
 800630e:	4628      	mov	r0, r5
 8006310:	f7ff fd3a 	bl	8005d88 <__cvt>
 8006314:	4607      	mov	r7, r0
 8006316:	e64f      	b.n	8005fb8 <_printf_float+0x10c>

08006318 <_printf_common>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	4691      	mov	r9, r2
 800631e:	461f      	mov	r7, r3
 8006320:	688a      	ldr	r2, [r1, #8]
 8006322:	690b      	ldr	r3, [r1, #16]
 8006324:	4606      	mov	r6, r0
 8006326:	4293      	cmp	r3, r2
 8006328:	bfb8      	it	lt
 800632a:	4613      	movlt	r3, r2
 800632c:	f8c9 3000 	str.w	r3, [r9]
 8006330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006334:	460c      	mov	r4, r1
 8006336:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800633a:	b112      	cbz	r2, 8006342 <_printf_common+0x2a>
 800633c:	3301      	adds	r3, #1
 800633e:	f8c9 3000 	str.w	r3, [r9]
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	0699      	lsls	r1, r3, #26
 8006346:	bf42      	ittt	mi
 8006348:	f8d9 3000 	ldrmi.w	r3, [r9]
 800634c:	3302      	addmi	r3, #2
 800634e:	f8c9 3000 	strmi.w	r3, [r9]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d107      	bne.n	800636a <_printf_common+0x52>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	f8d9 2000 	ldr.w	r2, [r9]
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	42ab      	cmp	r3, r5
 8006368:	dc29      	bgt.n	80063be <_printf_common+0xa6>
 800636a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	3300      	adds	r3, #0
 8006372:	bf18      	it	ne
 8006374:	2301      	movne	r3, #1
 8006376:	0692      	lsls	r2, r2, #26
 8006378:	d42e      	bmi.n	80063d8 <_printf_common+0xc0>
 800637a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800637e:	4639      	mov	r1, r7
 8006380:	4630      	mov	r0, r6
 8006382:	47c0      	blx	r8
 8006384:	3001      	adds	r0, #1
 8006386:	d021      	beq.n	80063cc <_printf_common+0xb4>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	68e5      	ldr	r5, [r4, #12]
 800638c:	f003 0306 	and.w	r3, r3, #6
 8006390:	2b04      	cmp	r3, #4
 8006392:	bf18      	it	ne
 8006394:	2500      	movne	r5, #0
 8006396:	f8d9 2000 	ldr.w	r2, [r9]
 800639a:	f04f 0900 	mov.w	r9, #0
 800639e:	bf08      	it	eq
 80063a0:	1aad      	subeq	r5, r5, r2
 80063a2:	68a3      	ldr	r3, [r4, #8]
 80063a4:	6922      	ldr	r2, [r4, #16]
 80063a6:	bf08      	it	eq
 80063a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063ac:	4293      	cmp	r3, r2
 80063ae:	bfc4      	itt	gt
 80063b0:	1a9b      	subgt	r3, r3, r2
 80063b2:	18ed      	addgt	r5, r5, r3
 80063b4:	341a      	adds	r4, #26
 80063b6:	454d      	cmp	r5, r9
 80063b8:	d11a      	bne.n	80063f0 <_printf_common+0xd8>
 80063ba:	2000      	movs	r0, #0
 80063bc:	e008      	b.n	80063d0 <_printf_common+0xb8>
 80063be:	2301      	movs	r3, #1
 80063c0:	4652      	mov	r2, sl
 80063c2:	4639      	mov	r1, r7
 80063c4:	4630      	mov	r0, r6
 80063c6:	47c0      	blx	r8
 80063c8:	3001      	adds	r0, #1
 80063ca:	d103      	bne.n	80063d4 <_printf_common+0xbc>
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d4:	3501      	adds	r5, #1
 80063d6:	e7c2      	b.n	800635e <_printf_common+0x46>
 80063d8:	2030      	movs	r0, #48	; 0x30
 80063da:	18e1      	adds	r1, r4, r3
 80063dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e6:	4422      	add	r2, r4
 80063e8:	3302      	adds	r3, #2
 80063ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063ee:	e7c4      	b.n	800637a <_printf_common+0x62>
 80063f0:	2301      	movs	r3, #1
 80063f2:	4622      	mov	r2, r4
 80063f4:	4639      	mov	r1, r7
 80063f6:	4630      	mov	r0, r6
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d0e6      	beq.n	80063cc <_printf_common+0xb4>
 80063fe:	f109 0901 	add.w	r9, r9, #1
 8006402:	e7d8      	b.n	80063b6 <_printf_common+0x9e>

08006404 <_printf_i>:
 8006404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006408:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800640c:	460c      	mov	r4, r1
 800640e:	7e09      	ldrb	r1, [r1, #24]
 8006410:	b085      	sub	sp, #20
 8006412:	296e      	cmp	r1, #110	; 0x6e
 8006414:	4617      	mov	r7, r2
 8006416:	4606      	mov	r6, r0
 8006418:	4698      	mov	r8, r3
 800641a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800641c:	f000 80b3 	beq.w	8006586 <_printf_i+0x182>
 8006420:	d822      	bhi.n	8006468 <_printf_i+0x64>
 8006422:	2963      	cmp	r1, #99	; 0x63
 8006424:	d036      	beq.n	8006494 <_printf_i+0x90>
 8006426:	d80a      	bhi.n	800643e <_printf_i+0x3a>
 8006428:	2900      	cmp	r1, #0
 800642a:	f000 80b9 	beq.w	80065a0 <_printf_i+0x19c>
 800642e:	2958      	cmp	r1, #88	; 0x58
 8006430:	f000 8083 	beq.w	800653a <_printf_i+0x136>
 8006434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006438:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800643c:	e032      	b.n	80064a4 <_printf_i+0xa0>
 800643e:	2964      	cmp	r1, #100	; 0x64
 8006440:	d001      	beq.n	8006446 <_printf_i+0x42>
 8006442:	2969      	cmp	r1, #105	; 0x69
 8006444:	d1f6      	bne.n	8006434 <_printf_i+0x30>
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	6813      	ldr	r3, [r2, #0]
 800644a:	0605      	lsls	r5, r0, #24
 800644c:	f103 0104 	add.w	r1, r3, #4
 8006450:	d52a      	bpl.n	80064a8 <_printf_i+0xa4>
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6011      	str	r1, [r2, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da03      	bge.n	8006462 <_printf_i+0x5e>
 800645a:	222d      	movs	r2, #45	; 0x2d
 800645c:	425b      	negs	r3, r3
 800645e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006462:	486f      	ldr	r0, [pc, #444]	; (8006620 <_printf_i+0x21c>)
 8006464:	220a      	movs	r2, #10
 8006466:	e039      	b.n	80064dc <_printf_i+0xd8>
 8006468:	2973      	cmp	r1, #115	; 0x73
 800646a:	f000 809d 	beq.w	80065a8 <_printf_i+0x1a4>
 800646e:	d808      	bhi.n	8006482 <_printf_i+0x7e>
 8006470:	296f      	cmp	r1, #111	; 0x6f
 8006472:	d020      	beq.n	80064b6 <_printf_i+0xb2>
 8006474:	2970      	cmp	r1, #112	; 0x70
 8006476:	d1dd      	bne.n	8006434 <_printf_i+0x30>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	f043 0320 	orr.w	r3, r3, #32
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	e003      	b.n	800648a <_printf_i+0x86>
 8006482:	2975      	cmp	r1, #117	; 0x75
 8006484:	d017      	beq.n	80064b6 <_printf_i+0xb2>
 8006486:	2978      	cmp	r1, #120	; 0x78
 8006488:	d1d4      	bne.n	8006434 <_printf_i+0x30>
 800648a:	2378      	movs	r3, #120	; 0x78
 800648c:	4865      	ldr	r0, [pc, #404]	; (8006624 <_printf_i+0x220>)
 800648e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006492:	e055      	b.n	8006540 <_printf_i+0x13c>
 8006494:	6813      	ldr	r3, [r2, #0]
 8006496:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800649a:	1d19      	adds	r1, r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6011      	str	r1, [r2, #0]
 80064a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a4:	2301      	movs	r3, #1
 80064a6:	e08c      	b.n	80065c2 <_printf_i+0x1be>
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064ae:	6011      	str	r1, [r2, #0]
 80064b0:	bf18      	it	ne
 80064b2:	b21b      	sxthne	r3, r3
 80064b4:	e7cf      	b.n	8006456 <_printf_i+0x52>
 80064b6:	6813      	ldr	r3, [r2, #0]
 80064b8:	6825      	ldr	r5, [r4, #0]
 80064ba:	1d18      	adds	r0, r3, #4
 80064bc:	6010      	str	r0, [r2, #0]
 80064be:	0628      	lsls	r0, r5, #24
 80064c0:	d501      	bpl.n	80064c6 <_printf_i+0xc2>
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	e002      	b.n	80064cc <_printf_i+0xc8>
 80064c6:	0668      	lsls	r0, r5, #25
 80064c8:	d5fb      	bpl.n	80064c2 <_printf_i+0xbe>
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	296f      	cmp	r1, #111	; 0x6f
 80064ce:	bf14      	ite	ne
 80064d0:	220a      	movne	r2, #10
 80064d2:	2208      	moveq	r2, #8
 80064d4:	4852      	ldr	r0, [pc, #328]	; (8006620 <_printf_i+0x21c>)
 80064d6:	2100      	movs	r1, #0
 80064d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064dc:	6865      	ldr	r5, [r4, #4]
 80064de:	2d00      	cmp	r5, #0
 80064e0:	60a5      	str	r5, [r4, #8]
 80064e2:	f2c0 8095 	blt.w	8006610 <_printf_i+0x20c>
 80064e6:	6821      	ldr	r1, [r4, #0]
 80064e8:	f021 0104 	bic.w	r1, r1, #4
 80064ec:	6021      	str	r1, [r4, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d13d      	bne.n	800656e <_printf_i+0x16a>
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	f040 808e 	bne.w	8006614 <_printf_i+0x210>
 80064f8:	4665      	mov	r5, ip
 80064fa:	2a08      	cmp	r2, #8
 80064fc:	d10b      	bne.n	8006516 <_printf_i+0x112>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	07db      	lsls	r3, r3, #31
 8006502:	d508      	bpl.n	8006516 <_printf_i+0x112>
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	6862      	ldr	r2, [r4, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	bfde      	ittt	le
 800650c:	2330      	movle	r3, #48	; 0x30
 800650e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006512:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006516:	ebac 0305 	sub.w	r3, ip, r5
 800651a:	6123      	str	r3, [r4, #16]
 800651c:	f8cd 8000 	str.w	r8, [sp]
 8006520:	463b      	mov	r3, r7
 8006522:	aa03      	add	r2, sp, #12
 8006524:	4621      	mov	r1, r4
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff fef6 	bl	8006318 <_printf_common>
 800652c:	3001      	adds	r0, #1
 800652e:	d14d      	bne.n	80065cc <_printf_i+0x1c8>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	b005      	add	sp, #20
 8006536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800653a:	4839      	ldr	r0, [pc, #228]	; (8006620 <_printf_i+0x21c>)
 800653c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006540:	6813      	ldr	r3, [r2, #0]
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	1d1d      	adds	r5, r3, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6015      	str	r5, [r2, #0]
 800654a:	060a      	lsls	r2, r1, #24
 800654c:	d50b      	bpl.n	8006566 <_printf_i+0x162>
 800654e:	07ca      	lsls	r2, r1, #31
 8006550:	bf44      	itt	mi
 8006552:	f041 0120 	orrmi.w	r1, r1, #32
 8006556:	6021      	strmi	r1, [r4, #0]
 8006558:	b91b      	cbnz	r3, 8006562 <_printf_i+0x15e>
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	f022 0220 	bic.w	r2, r2, #32
 8006560:	6022      	str	r2, [r4, #0]
 8006562:	2210      	movs	r2, #16
 8006564:	e7b7      	b.n	80064d6 <_printf_i+0xd2>
 8006566:	064d      	lsls	r5, r1, #25
 8006568:	bf48      	it	mi
 800656a:	b29b      	uxthmi	r3, r3
 800656c:	e7ef      	b.n	800654e <_printf_i+0x14a>
 800656e:	4665      	mov	r5, ip
 8006570:	fbb3 f1f2 	udiv	r1, r3, r2
 8006574:	fb02 3311 	mls	r3, r2, r1, r3
 8006578:	5cc3      	ldrb	r3, [r0, r3]
 800657a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800657e:	460b      	mov	r3, r1
 8006580:	2900      	cmp	r1, #0
 8006582:	d1f5      	bne.n	8006570 <_printf_i+0x16c>
 8006584:	e7b9      	b.n	80064fa <_printf_i+0xf6>
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	6825      	ldr	r5, [r4, #0]
 800658a:	1d18      	adds	r0, r3, #4
 800658c:	6961      	ldr	r1, [r4, #20]
 800658e:	6010      	str	r0, [r2, #0]
 8006590:	0628      	lsls	r0, r5, #24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	d501      	bpl.n	800659a <_printf_i+0x196>
 8006596:	6019      	str	r1, [r3, #0]
 8006598:	e002      	b.n	80065a0 <_printf_i+0x19c>
 800659a:	066a      	lsls	r2, r5, #25
 800659c:	d5fb      	bpl.n	8006596 <_printf_i+0x192>
 800659e:	8019      	strh	r1, [r3, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	4665      	mov	r5, ip
 80065a4:	6123      	str	r3, [r4, #16]
 80065a6:	e7b9      	b.n	800651c <_printf_i+0x118>
 80065a8:	6813      	ldr	r3, [r2, #0]
 80065aa:	1d19      	adds	r1, r3, #4
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	681d      	ldr	r5, [r3, #0]
 80065b0:	6862      	ldr	r2, [r4, #4]
 80065b2:	2100      	movs	r1, #0
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 ff67 	bl	8007488 <memchr>
 80065ba:	b108      	cbz	r0, 80065c0 <_printf_i+0x1bc>
 80065bc:	1b40      	subs	r0, r0, r5
 80065be:	6060      	str	r0, [r4, #4]
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	6123      	str	r3, [r4, #16]
 80065c4:	2300      	movs	r3, #0
 80065c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ca:	e7a7      	b.n	800651c <_printf_i+0x118>
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	462a      	mov	r2, r5
 80065d0:	4639      	mov	r1, r7
 80065d2:	4630      	mov	r0, r6
 80065d4:	47c0      	blx	r8
 80065d6:	3001      	adds	r0, #1
 80065d8:	d0aa      	beq.n	8006530 <_printf_i+0x12c>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	079b      	lsls	r3, r3, #30
 80065de:	d413      	bmi.n	8006608 <_printf_i+0x204>
 80065e0:	68e0      	ldr	r0, [r4, #12]
 80065e2:	9b03      	ldr	r3, [sp, #12]
 80065e4:	4298      	cmp	r0, r3
 80065e6:	bfb8      	it	lt
 80065e8:	4618      	movlt	r0, r3
 80065ea:	e7a3      	b.n	8006534 <_printf_i+0x130>
 80065ec:	2301      	movs	r3, #1
 80065ee:	464a      	mov	r2, r9
 80065f0:	4639      	mov	r1, r7
 80065f2:	4630      	mov	r0, r6
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d09a      	beq.n	8006530 <_printf_i+0x12c>
 80065fa:	3501      	adds	r5, #1
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	9a03      	ldr	r2, [sp, #12]
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	42ab      	cmp	r3, r5
 8006604:	dcf2      	bgt.n	80065ec <_printf_i+0x1e8>
 8006606:	e7eb      	b.n	80065e0 <_printf_i+0x1dc>
 8006608:	2500      	movs	r5, #0
 800660a:	f104 0919 	add.w	r9, r4, #25
 800660e:	e7f5      	b.n	80065fc <_printf_i+0x1f8>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ac      	bne.n	800656e <_printf_i+0x16a>
 8006614:	7803      	ldrb	r3, [r0, #0]
 8006616:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800661a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800661e:	e76c      	b.n	80064fa <_printf_i+0xf6>
 8006620:	0800975a 	.word	0x0800975a
 8006624:	0800976b 	.word	0x0800976b

08006628 <siprintf>:
 8006628:	b40e      	push	{r1, r2, r3}
 800662a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800662e:	b500      	push	{lr}
 8006630:	b09c      	sub	sp, #112	; 0x70
 8006632:	ab1d      	add	r3, sp, #116	; 0x74
 8006634:	9002      	str	r0, [sp, #8]
 8006636:	9006      	str	r0, [sp, #24]
 8006638:	9107      	str	r1, [sp, #28]
 800663a:	9104      	str	r1, [sp, #16]
 800663c:	4808      	ldr	r0, [pc, #32]	; (8006660 <siprintf+0x38>)
 800663e:	4909      	ldr	r1, [pc, #36]	; (8006664 <siprintf+0x3c>)
 8006640:	f853 2b04 	ldr.w	r2, [r3], #4
 8006644:	9105      	str	r1, [sp, #20]
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	a902      	add	r1, sp, #8
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	f001 fb20 	bl	8007c90 <_svfiprintf_r>
 8006650:	2200      	movs	r2, #0
 8006652:	9b02      	ldr	r3, [sp, #8]
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	b01c      	add	sp, #112	; 0x70
 8006658:	f85d eb04 	ldr.w	lr, [sp], #4
 800665c:	b003      	add	sp, #12
 800665e:	4770      	bx	lr
 8006660:	20000050 	.word	0x20000050
 8006664:	ffff0208 	.word	0xffff0208

08006668 <strcat>:
 8006668:	4603      	mov	r3, r0
 800666a:	b510      	push	{r4, lr}
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	1c5c      	adds	r4, r3, #1
 8006670:	b93a      	cbnz	r2, 8006682 <strcat+0x1a>
 8006672:	3b01      	subs	r3, #1
 8006674:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006678:	f803 2f01 	strb.w	r2, [r3, #1]!
 800667c:	2a00      	cmp	r2, #0
 800667e:	d1f9      	bne.n	8006674 <strcat+0xc>
 8006680:	bd10      	pop	{r4, pc}
 8006682:	4623      	mov	r3, r4
 8006684:	e7f2      	b.n	800666c <strcat+0x4>

08006686 <_strtol_l.isra.0>:
 8006686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668a:	4680      	mov	r8, r0
 800668c:	4689      	mov	r9, r1
 800668e:	4692      	mov	sl, r2
 8006690:	461e      	mov	r6, r3
 8006692:	460f      	mov	r7, r1
 8006694:	463d      	mov	r5, r7
 8006696:	9808      	ldr	r0, [sp, #32]
 8006698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800669c:	f000 fec8 	bl	8007430 <__locale_ctype_ptr_l>
 80066a0:	4420      	add	r0, r4
 80066a2:	7843      	ldrb	r3, [r0, #1]
 80066a4:	f013 0308 	ands.w	r3, r3, #8
 80066a8:	d132      	bne.n	8006710 <_strtol_l.isra.0+0x8a>
 80066aa:	2c2d      	cmp	r4, #45	; 0x2d
 80066ac:	d132      	bne.n	8006714 <_strtol_l.isra.0+0x8e>
 80066ae:	2201      	movs	r2, #1
 80066b0:	787c      	ldrb	r4, [r7, #1]
 80066b2:	1cbd      	adds	r5, r7, #2
 80066b4:	2e00      	cmp	r6, #0
 80066b6:	d05d      	beq.n	8006774 <_strtol_l.isra.0+0xee>
 80066b8:	2e10      	cmp	r6, #16
 80066ba:	d109      	bne.n	80066d0 <_strtol_l.isra.0+0x4a>
 80066bc:	2c30      	cmp	r4, #48	; 0x30
 80066be:	d107      	bne.n	80066d0 <_strtol_l.isra.0+0x4a>
 80066c0:	782b      	ldrb	r3, [r5, #0]
 80066c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80066c6:	2b58      	cmp	r3, #88	; 0x58
 80066c8:	d14f      	bne.n	800676a <_strtol_l.isra.0+0xe4>
 80066ca:	2610      	movs	r6, #16
 80066cc:	786c      	ldrb	r4, [r5, #1]
 80066ce:	3502      	adds	r5, #2
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	bf14      	ite	ne
 80066d4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80066d8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80066dc:	2700      	movs	r7, #0
 80066de:	fbb1 fcf6 	udiv	ip, r1, r6
 80066e2:	4638      	mov	r0, r7
 80066e4:	fb06 1e1c 	mls	lr, r6, ip, r1
 80066e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	d817      	bhi.n	8006720 <_strtol_l.isra.0+0x9a>
 80066f0:	461c      	mov	r4, r3
 80066f2:	42a6      	cmp	r6, r4
 80066f4:	dd23      	ble.n	800673e <_strtol_l.isra.0+0xb8>
 80066f6:	1c7b      	adds	r3, r7, #1
 80066f8:	d007      	beq.n	800670a <_strtol_l.isra.0+0x84>
 80066fa:	4584      	cmp	ip, r0
 80066fc:	d31c      	bcc.n	8006738 <_strtol_l.isra.0+0xb2>
 80066fe:	d101      	bne.n	8006704 <_strtol_l.isra.0+0x7e>
 8006700:	45a6      	cmp	lr, r4
 8006702:	db19      	blt.n	8006738 <_strtol_l.isra.0+0xb2>
 8006704:	2701      	movs	r7, #1
 8006706:	fb00 4006 	mla	r0, r0, r6, r4
 800670a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800670e:	e7eb      	b.n	80066e8 <_strtol_l.isra.0+0x62>
 8006710:	462f      	mov	r7, r5
 8006712:	e7bf      	b.n	8006694 <_strtol_l.isra.0+0xe>
 8006714:	2c2b      	cmp	r4, #43	; 0x2b
 8006716:	bf04      	itt	eq
 8006718:	1cbd      	addeq	r5, r7, #2
 800671a:	787c      	ldrbeq	r4, [r7, #1]
 800671c:	461a      	mov	r2, r3
 800671e:	e7c9      	b.n	80066b4 <_strtol_l.isra.0+0x2e>
 8006720:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006724:	2b19      	cmp	r3, #25
 8006726:	d801      	bhi.n	800672c <_strtol_l.isra.0+0xa6>
 8006728:	3c37      	subs	r4, #55	; 0x37
 800672a:	e7e2      	b.n	80066f2 <_strtol_l.isra.0+0x6c>
 800672c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006730:	2b19      	cmp	r3, #25
 8006732:	d804      	bhi.n	800673e <_strtol_l.isra.0+0xb8>
 8006734:	3c57      	subs	r4, #87	; 0x57
 8006736:	e7dc      	b.n	80066f2 <_strtol_l.isra.0+0x6c>
 8006738:	f04f 37ff 	mov.w	r7, #4294967295
 800673c:	e7e5      	b.n	800670a <_strtol_l.isra.0+0x84>
 800673e:	1c7b      	adds	r3, r7, #1
 8006740:	d108      	bne.n	8006754 <_strtol_l.isra.0+0xce>
 8006742:	2322      	movs	r3, #34	; 0x22
 8006744:	4608      	mov	r0, r1
 8006746:	f8c8 3000 	str.w	r3, [r8]
 800674a:	f1ba 0f00 	cmp.w	sl, #0
 800674e:	d107      	bne.n	8006760 <_strtol_l.isra.0+0xda>
 8006750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006754:	b102      	cbz	r2, 8006758 <_strtol_l.isra.0+0xd2>
 8006756:	4240      	negs	r0, r0
 8006758:	f1ba 0f00 	cmp.w	sl, #0
 800675c:	d0f8      	beq.n	8006750 <_strtol_l.isra.0+0xca>
 800675e:	b10f      	cbz	r7, 8006764 <_strtol_l.isra.0+0xde>
 8006760:	f105 39ff 	add.w	r9, r5, #4294967295
 8006764:	f8ca 9000 	str.w	r9, [sl]
 8006768:	e7f2      	b.n	8006750 <_strtol_l.isra.0+0xca>
 800676a:	2430      	movs	r4, #48	; 0x30
 800676c:	2e00      	cmp	r6, #0
 800676e:	d1af      	bne.n	80066d0 <_strtol_l.isra.0+0x4a>
 8006770:	2608      	movs	r6, #8
 8006772:	e7ad      	b.n	80066d0 <_strtol_l.isra.0+0x4a>
 8006774:	2c30      	cmp	r4, #48	; 0x30
 8006776:	d0a3      	beq.n	80066c0 <_strtol_l.isra.0+0x3a>
 8006778:	260a      	movs	r6, #10
 800677a:	e7a9      	b.n	80066d0 <_strtol_l.isra.0+0x4a>

0800677c <strtol>:
 800677c:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <strtol+0x24>)
 800677e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006780:	681c      	ldr	r4, [r3, #0]
 8006782:	4d08      	ldr	r5, [pc, #32]	; (80067a4 <strtol+0x28>)
 8006784:	6a23      	ldr	r3, [r4, #32]
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf08      	it	eq
 800678a:	462b      	moveq	r3, r5
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	460a      	mov	r2, r1
 8006792:	4601      	mov	r1, r0
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff ff76 	bl	8006686 <_strtol_l.isra.0>
 800679a:	b003      	add	sp, #12
 800679c:	bd30      	pop	{r4, r5, pc}
 800679e:	bf00      	nop
 80067a0:	20000050 	.word	0x20000050
 80067a4:	200000b4 	.word	0x200000b4

080067a8 <quorem>:
 80067a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	6903      	ldr	r3, [r0, #16]
 80067ae:	690c      	ldr	r4, [r1, #16]
 80067b0:	4680      	mov	r8, r0
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	f2c0 8084 	blt.w	80068c0 <quorem+0x118>
 80067b8:	3c01      	subs	r4, #1
 80067ba:	f101 0714 	add.w	r7, r1, #20
 80067be:	f100 0614 	add.w	r6, r0, #20
 80067c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80067c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80067ca:	3501      	adds	r5, #1
 80067cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80067d0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80067d4:	eb06 030c 	add.w	r3, r6, ip
 80067d8:	eb07 090c 	add.w	r9, r7, ip
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	b39d      	cbz	r5, 8006848 <quorem+0xa0>
 80067e0:	f04f 0a00 	mov.w	sl, #0
 80067e4:	4638      	mov	r0, r7
 80067e6:	46b6      	mov	lr, r6
 80067e8:	46d3      	mov	fp, sl
 80067ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80067ee:	b293      	uxth	r3, r2
 80067f0:	fb05 a303 	mla	r3, r5, r3, sl
 80067f4:	0c12      	lsrs	r2, r2, #16
 80067f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067fa:	fb05 a202 	mla	r2, r5, r2, sl
 80067fe:	b29b      	uxth	r3, r3
 8006800:	ebab 0303 	sub.w	r3, fp, r3
 8006804:	f8de b000 	ldr.w	fp, [lr]
 8006808:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800680c:	fa1f fb8b 	uxth.w	fp, fp
 8006810:	445b      	add	r3, fp
 8006812:	fa1f fb82 	uxth.w	fp, r2
 8006816:	f8de 2000 	ldr.w	r2, [lr]
 800681a:	4581      	cmp	r9, r0
 800681c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006820:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006824:	b29b      	uxth	r3, r3
 8006826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800682a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800682e:	f84e 3b04 	str.w	r3, [lr], #4
 8006832:	d2da      	bcs.n	80067ea <quorem+0x42>
 8006834:	f856 300c 	ldr.w	r3, [r6, ip]
 8006838:	b933      	cbnz	r3, 8006848 <quorem+0xa0>
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	3b04      	subs	r3, #4
 800683e:	429e      	cmp	r6, r3
 8006840:	461a      	mov	r2, r3
 8006842:	d331      	bcc.n	80068a8 <quorem+0x100>
 8006844:	f8c8 4010 	str.w	r4, [r8, #16]
 8006848:	4640      	mov	r0, r8
 800684a:	f001 f84b 	bl	80078e4 <__mcmp>
 800684e:	2800      	cmp	r0, #0
 8006850:	db26      	blt.n	80068a0 <quorem+0xf8>
 8006852:	4630      	mov	r0, r6
 8006854:	f04f 0c00 	mov.w	ip, #0
 8006858:	3501      	adds	r5, #1
 800685a:	f857 1b04 	ldr.w	r1, [r7], #4
 800685e:	f8d0 e000 	ldr.w	lr, [r0]
 8006862:	b28b      	uxth	r3, r1
 8006864:	ebac 0303 	sub.w	r3, ip, r3
 8006868:	fa1f f28e 	uxth.w	r2, lr
 800686c:	4413      	add	r3, r2
 800686e:	0c0a      	lsrs	r2, r1, #16
 8006870:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006878:	b29b      	uxth	r3, r3
 800687a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687e:	45b9      	cmp	r9, r7
 8006880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006884:	f840 3b04 	str.w	r3, [r0], #4
 8006888:	d2e7      	bcs.n	800685a <quorem+0xb2>
 800688a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800688e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006892:	b92a      	cbnz	r2, 80068a0 <quorem+0xf8>
 8006894:	3b04      	subs	r3, #4
 8006896:	429e      	cmp	r6, r3
 8006898:	461a      	mov	r2, r3
 800689a:	d30b      	bcc.n	80068b4 <quorem+0x10c>
 800689c:	f8c8 4010 	str.w	r4, [r8, #16]
 80068a0:	4628      	mov	r0, r5
 80068a2:	b003      	add	sp, #12
 80068a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	3b04      	subs	r3, #4
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	d1c9      	bne.n	8006844 <quorem+0x9c>
 80068b0:	3c01      	subs	r4, #1
 80068b2:	e7c4      	b.n	800683e <quorem+0x96>
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	3b04      	subs	r3, #4
 80068b8:	2a00      	cmp	r2, #0
 80068ba:	d1ef      	bne.n	800689c <quorem+0xf4>
 80068bc:	3c01      	subs	r4, #1
 80068be:	e7ea      	b.n	8006896 <quorem+0xee>
 80068c0:	2000      	movs	r0, #0
 80068c2:	e7ee      	b.n	80068a2 <quorem+0xfa>
 80068c4:	0000      	movs	r0, r0
	...

080068c8 <_dtoa_r>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	4616      	mov	r6, r2
 80068ce:	461f      	mov	r7, r3
 80068d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068d2:	b095      	sub	sp, #84	; 0x54
 80068d4:	4604      	mov	r4, r0
 80068d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80068da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80068de:	b93d      	cbnz	r5, 80068f0 <_dtoa_r+0x28>
 80068e0:	2010      	movs	r0, #16
 80068e2:	f000 fdb7 	bl	8007454 <malloc>
 80068e6:	6260      	str	r0, [r4, #36]	; 0x24
 80068e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068ec:	6005      	str	r5, [r0, #0]
 80068ee:	60c5      	str	r5, [r0, #12]
 80068f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f2:	6819      	ldr	r1, [r3, #0]
 80068f4:	b151      	cbz	r1, 800690c <_dtoa_r+0x44>
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	2301      	movs	r3, #1
 80068fa:	4093      	lsls	r3, r2
 80068fc:	604a      	str	r2, [r1, #4]
 80068fe:	608b      	str	r3, [r1, #8]
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fe0e 	bl	8007522 <_Bfree>
 8006906:	2200      	movs	r2, #0
 8006908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	1e3b      	subs	r3, r7, #0
 800690e:	bfaf      	iteee	ge
 8006910:	2300      	movge	r3, #0
 8006912:	2201      	movlt	r2, #1
 8006914:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006918:	9303      	strlt	r3, [sp, #12]
 800691a:	bfac      	ite	ge
 800691c:	f8c8 3000 	strge.w	r3, [r8]
 8006920:	f8c8 2000 	strlt.w	r2, [r8]
 8006924:	4bae      	ldr	r3, [pc, #696]	; (8006be0 <_dtoa_r+0x318>)
 8006926:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800692a:	ea33 0308 	bics.w	r3, r3, r8
 800692e:	d11b      	bne.n	8006968 <_dtoa_r+0xa0>
 8006930:	f242 730f 	movw	r3, #9999	; 0x270f
 8006934:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	9b02      	ldr	r3, [sp, #8]
 800693a:	b923      	cbnz	r3, 8006946 <_dtoa_r+0x7e>
 800693c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006940:	2800      	cmp	r0, #0
 8006942:	f000 8545 	beq.w	80073d0 <_dtoa_r+0xb08>
 8006946:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006948:	b953      	cbnz	r3, 8006960 <_dtoa_r+0x98>
 800694a:	4ba6      	ldr	r3, [pc, #664]	; (8006be4 <_dtoa_r+0x31c>)
 800694c:	e021      	b.n	8006992 <_dtoa_r+0xca>
 800694e:	4ba6      	ldr	r3, [pc, #664]	; (8006be8 <_dtoa_r+0x320>)
 8006950:	9306      	str	r3, [sp, #24]
 8006952:	3308      	adds	r3, #8
 8006954:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	9806      	ldr	r0, [sp, #24]
 800695a:	b015      	add	sp, #84	; 0x54
 800695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006960:	4ba0      	ldr	r3, [pc, #640]	; (8006be4 <_dtoa_r+0x31c>)
 8006962:	9306      	str	r3, [sp, #24]
 8006964:	3303      	adds	r3, #3
 8006966:	e7f5      	b.n	8006954 <_dtoa_r+0x8c>
 8006968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800696c:	2200      	movs	r2, #0
 800696e:	2300      	movs	r3, #0
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	f7fa f822 	bl	80009bc <__aeabi_dcmpeq>
 8006978:	4682      	mov	sl, r0
 800697a:	b160      	cbz	r0, 8006996 <_dtoa_r+0xce>
 800697c:	2301      	movs	r3, #1
 800697e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8520 	beq.w	80073ca <_dtoa_r+0xb02>
 800698a:	4b98      	ldr	r3, [pc, #608]	; (8006bec <_dtoa_r+0x324>)
 800698c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	3b01      	subs	r3, #1
 8006992:	9306      	str	r3, [sp, #24]
 8006994:	e7e0      	b.n	8006958 <_dtoa_r+0x90>
 8006996:	ab12      	add	r3, sp, #72	; 0x48
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	ab13      	add	r3, sp, #76	; 0x4c
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	4632      	mov	r2, r6
 80069a0:	463b      	mov	r3, r7
 80069a2:	4620      	mov	r0, r4
 80069a4:	f001 f816 	bl	80079d4 <__d2b>
 80069a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80069ac:	4683      	mov	fp, r0
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	d07d      	beq.n	8006aae <_dtoa_r+0x1e6>
 80069b2:	46b0      	mov	r8, r6
 80069b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80069bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80069c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80069c8:	2200      	movs	r2, #0
 80069ca:	4b89      	ldr	r3, [pc, #548]	; (8006bf0 <_dtoa_r+0x328>)
 80069cc:	4640      	mov	r0, r8
 80069ce:	4649      	mov	r1, r9
 80069d0:	f7f9 fbd4 	bl	800017c <__aeabi_dsub>
 80069d4:	a37c      	add	r3, pc, #496	; (adr r3, 8006bc8 <_dtoa_r+0x300>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f7f9 fd87 	bl	80004ec <__aeabi_dmul>
 80069de:	a37c      	add	r3, pc, #496	; (adr r3, 8006bd0 <_dtoa_r+0x308>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f7f9 fbcc 	bl	8000180 <__adddf3>
 80069e8:	4606      	mov	r6, r0
 80069ea:	4628      	mov	r0, r5
 80069ec:	460f      	mov	r7, r1
 80069ee:	f7f9 fd13 	bl	8000418 <__aeabi_i2d>
 80069f2:	a379      	add	r3, pc, #484	; (adr r3, 8006bd8 <_dtoa_r+0x310>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fd78 	bl	80004ec <__aeabi_dmul>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7f9 fbbc 	bl	8000180 <__adddf3>
 8006a08:	4606      	mov	r6, r0
 8006a0a:	460f      	mov	r7, r1
 8006a0c:	f7fa f81e 	bl	8000a4c <__aeabi_d2iz>
 8006a10:	2200      	movs	r2, #0
 8006a12:	4682      	mov	sl, r0
 8006a14:	2300      	movs	r3, #0
 8006a16:	4630      	mov	r0, r6
 8006a18:	4639      	mov	r1, r7
 8006a1a:	f7f9 ffd9 	bl	80009d0 <__aeabi_dcmplt>
 8006a1e:	b148      	cbz	r0, 8006a34 <_dtoa_r+0x16c>
 8006a20:	4650      	mov	r0, sl
 8006a22:	f7f9 fcf9 	bl	8000418 <__aeabi_i2d>
 8006a26:	4632      	mov	r2, r6
 8006a28:	463b      	mov	r3, r7
 8006a2a:	f7f9 ffc7 	bl	80009bc <__aeabi_dcmpeq>
 8006a2e:	b908      	cbnz	r0, 8006a34 <_dtoa_r+0x16c>
 8006a30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a34:	f1ba 0f16 	cmp.w	sl, #22
 8006a38:	d85a      	bhi.n	8006af0 <_dtoa_r+0x228>
 8006a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a3e:	496d      	ldr	r1, [pc, #436]	; (8006bf4 <_dtoa_r+0x32c>)
 8006a40:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a48:	f7f9 ffe0 	bl	8000a0c <__aeabi_dcmpgt>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d051      	beq.n	8006af4 <_dtoa_r+0x22c>
 8006a50:	2300      	movs	r3, #0
 8006a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a56:	930d      	str	r3, [sp, #52]	; 0x34
 8006a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a5a:	1b5d      	subs	r5, r3, r5
 8006a5c:	1e6b      	subs	r3, r5, #1
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	bf43      	ittte	mi
 8006a62:	2300      	movmi	r3, #0
 8006a64:	f1c5 0901 	rsbmi	r9, r5, #1
 8006a68:	9307      	strmi	r3, [sp, #28]
 8006a6a:	f04f 0900 	movpl.w	r9, #0
 8006a6e:	f1ba 0f00 	cmp.w	sl, #0
 8006a72:	db41      	blt.n	8006af8 <_dtoa_r+0x230>
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006a7a:	4453      	add	r3, sl
 8006a7c:	9307      	str	r3, [sp, #28]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9308      	str	r3, [sp, #32]
 8006a82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a84:	2b09      	cmp	r3, #9
 8006a86:	f200 808f 	bhi.w	8006ba8 <_dtoa_r+0x2e0>
 8006a8a:	2b05      	cmp	r3, #5
 8006a8c:	bfc4      	itt	gt
 8006a8e:	3b04      	subgt	r3, #4
 8006a90:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006a92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a94:	bfc8      	it	gt
 8006a96:	2500      	movgt	r5, #0
 8006a98:	f1a3 0302 	sub.w	r3, r3, #2
 8006a9c:	bfd8      	it	le
 8006a9e:	2501      	movle	r5, #1
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	f200 808d 	bhi.w	8006bc0 <_dtoa_r+0x2f8>
 8006aa6:	e8df f003 	tbb	[pc, r3]
 8006aaa:	7d7b      	.short	0x7d7b
 8006aac:	6f2f      	.short	0x6f2f
 8006aae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ab2:	441d      	add	r5, r3
 8006ab4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006ab8:	2820      	cmp	r0, #32
 8006aba:	dd13      	ble.n	8006ae4 <_dtoa_r+0x21c>
 8006abc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006ac0:	9b02      	ldr	r3, [sp, #8]
 8006ac2:	fa08 f800 	lsl.w	r8, r8, r0
 8006ac6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006aca:	fa23 f000 	lsr.w	r0, r3, r0
 8006ace:	ea48 0000 	orr.w	r0, r8, r0
 8006ad2:	f7f9 fc91 	bl	80003f8 <__aeabi_ui2d>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4680      	mov	r8, r0
 8006ada:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006ade:	3d01      	subs	r5, #1
 8006ae0:	9310      	str	r3, [sp, #64]	; 0x40
 8006ae2:	e771      	b.n	80069c8 <_dtoa_r+0x100>
 8006ae4:	9b02      	ldr	r3, [sp, #8]
 8006ae6:	f1c0 0020 	rsb	r0, r0, #32
 8006aea:	fa03 f000 	lsl.w	r0, r3, r0
 8006aee:	e7f0      	b.n	8006ad2 <_dtoa_r+0x20a>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e7b0      	b.n	8006a56 <_dtoa_r+0x18e>
 8006af4:	900d      	str	r0, [sp, #52]	; 0x34
 8006af6:	e7af      	b.n	8006a58 <_dtoa_r+0x190>
 8006af8:	f1ca 0300 	rsb	r3, sl, #0
 8006afc:	9308      	str	r3, [sp, #32]
 8006afe:	2300      	movs	r3, #0
 8006b00:	eba9 090a 	sub.w	r9, r9, sl
 8006b04:	930c      	str	r3, [sp, #48]	; 0x30
 8006b06:	e7bc      	b.n	8006a82 <_dtoa_r+0x1ba>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dd74      	ble.n	8006bfc <_dtoa_r+0x334>
 8006b12:	4698      	mov	r8, r3
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	2200      	movs	r2, #0
 8006b18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b1a:	6072      	str	r2, [r6, #4]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	f102 0014 	add.w	r0, r2, #20
 8006b22:	4298      	cmp	r0, r3
 8006b24:	6871      	ldr	r1, [r6, #4]
 8006b26:	d96e      	bls.n	8006c06 <_dtoa_r+0x33e>
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fcc6 	bl	80074ba <_Balloc>
 8006b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b30:	6030      	str	r0, [r6, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f1b8 0f0e 	cmp.w	r8, #14
 8006b38:	9306      	str	r3, [sp, #24]
 8006b3a:	f200 80ed 	bhi.w	8006d18 <_dtoa_r+0x450>
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	f000 80ea 	beq.w	8006d18 <_dtoa_r+0x450>
 8006b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b48:	f1ba 0f00 	cmp.w	sl, #0
 8006b4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006b50:	dd77      	ble.n	8006c42 <_dtoa_r+0x37a>
 8006b52:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <_dtoa_r+0x32c>)
 8006b54:	f00a 030f 	and.w	r3, sl, #15
 8006b58:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006b5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b60:	06f0      	lsls	r0, r6, #27
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006b6a:	d568      	bpl.n	8006c3e <_dtoa_r+0x376>
 8006b6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b70:	4b21      	ldr	r3, [pc, #132]	; (8006bf8 <_dtoa_r+0x330>)
 8006b72:	2503      	movs	r5, #3
 8006b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b78:	f7f9 fde2 	bl	8000740 <__aeabi_ddiv>
 8006b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b80:	f006 060f 	and.w	r6, r6, #15
 8006b84:	4f1c      	ldr	r7, [pc, #112]	; (8006bf8 <_dtoa_r+0x330>)
 8006b86:	e04f      	b.n	8006c28 <_dtoa_r+0x360>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b8e:	4453      	add	r3, sl
 8006b90:	f103 0801 	add.w	r8, r3, #1
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	4643      	mov	r3, r8
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	bfb8      	it	lt
 8006b9c:	2301      	movlt	r3, #1
 8006b9e:	e7ba      	b.n	8006b16 <_dtoa_r+0x24e>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e7b2      	b.n	8006b0a <_dtoa_r+0x242>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e7f0      	b.n	8006b8a <_dtoa_r+0x2c2>
 8006ba8:	2501      	movs	r5, #1
 8006baa:	2300      	movs	r3, #0
 8006bac:	9509      	str	r5, [sp, #36]	; 0x24
 8006bae:	931e      	str	r3, [sp, #120]	; 0x78
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	9304      	str	r3, [sp, #16]
 8006bb8:	4698      	mov	r8, r3
 8006bba:	2312      	movs	r3, #18
 8006bbc:	921f      	str	r2, [sp, #124]	; 0x7c
 8006bbe:	e7aa      	b.n	8006b16 <_dtoa_r+0x24e>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc4:	e7f4      	b.n	8006bb0 <_dtoa_r+0x2e8>
 8006bc6:	bf00      	nop
 8006bc8:	636f4361 	.word	0x636f4361
 8006bcc:	3fd287a7 	.word	0x3fd287a7
 8006bd0:	8b60c8b3 	.word	0x8b60c8b3
 8006bd4:	3fc68a28 	.word	0x3fc68a28
 8006bd8:	509f79fb 	.word	0x509f79fb
 8006bdc:	3fd34413 	.word	0x3fd34413
 8006be0:	7ff00000 	.word	0x7ff00000
 8006be4:	08009785 	.word	0x08009785
 8006be8:	0800977c 	.word	0x0800977c
 8006bec:	08009759 	.word	0x08009759
 8006bf0:	3ff80000 	.word	0x3ff80000
 8006bf4:	080097c0 	.word	0x080097c0
 8006bf8:	08009798 	.word	0x08009798
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	9304      	str	r3, [sp, #16]
 8006c00:	4698      	mov	r8, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	e7da      	b.n	8006bbc <_dtoa_r+0x2f4>
 8006c06:	3101      	adds	r1, #1
 8006c08:	6071      	str	r1, [r6, #4]
 8006c0a:	0052      	lsls	r2, r2, #1
 8006c0c:	e787      	b.n	8006b1e <_dtoa_r+0x256>
 8006c0e:	07f1      	lsls	r1, r6, #31
 8006c10:	d508      	bpl.n	8006c24 <_dtoa_r+0x35c>
 8006c12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1a:	f7f9 fc67 	bl	80004ec <__aeabi_dmul>
 8006c1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c22:	3501      	adds	r5, #1
 8006c24:	1076      	asrs	r6, r6, #1
 8006c26:	3708      	adds	r7, #8
 8006c28:	2e00      	cmp	r6, #0
 8006c2a:	d1f0      	bne.n	8006c0e <_dtoa_r+0x346>
 8006c2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c34:	f7f9 fd84 	bl	8000740 <__aeabi_ddiv>
 8006c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c3c:	e01b      	b.n	8006c76 <_dtoa_r+0x3ae>
 8006c3e:	2502      	movs	r5, #2
 8006c40:	e7a0      	b.n	8006b84 <_dtoa_r+0x2bc>
 8006c42:	f000 80a4 	beq.w	8006d8e <_dtoa_r+0x4c6>
 8006c46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006c4a:	f1ca 0600 	rsb	r6, sl, #0
 8006c4e:	4ba0      	ldr	r3, [pc, #640]	; (8006ed0 <_dtoa_r+0x608>)
 8006c50:	f006 020f 	and.w	r2, r6, #15
 8006c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fc46 	bl	80004ec <__aeabi_dmul>
 8006c60:	2502      	movs	r5, #2
 8006c62:	2300      	movs	r3, #0
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	4f9a      	ldr	r7, [pc, #616]	; (8006ed4 <_dtoa_r+0x60c>)
 8006c6a:	1136      	asrs	r6, r6, #4
 8006c6c:	2e00      	cmp	r6, #0
 8006c6e:	f040 8083 	bne.w	8006d78 <_dtoa_r+0x4b0>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e0      	bne.n	8006c38 <_dtoa_r+0x370>
 8006c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 808a 	beq.w	8006d92 <_dtoa_r+0x4ca>
 8006c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4b92      	ldr	r3, [pc, #584]	; (8006ed8 <_dtoa_r+0x610>)
 8006c8e:	f7f9 fe9f 	bl	80009d0 <__aeabi_dcmplt>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d07d      	beq.n	8006d92 <_dtoa_r+0x4ca>
 8006c96:	f1b8 0f00 	cmp.w	r8, #0
 8006c9a:	d07a      	beq.n	8006d92 <_dtoa_r+0x4ca>
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dd36      	ble.n	8006d10 <_dtoa_r+0x448>
 8006ca2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4b8c      	ldr	r3, [pc, #560]	; (8006edc <_dtoa_r+0x614>)
 8006caa:	f7f9 fc1f 	bl	80004ec <__aeabi_dmul>
 8006cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb2:	9e04      	ldr	r6, [sp, #16]
 8006cb4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006cb8:	3501      	adds	r5, #1
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7f9 fbac 	bl	8000418 <__aeabi_i2d>
 8006cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cc4:	f7f9 fc12 	bl	80004ec <__aeabi_dmul>
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4b85      	ldr	r3, [pc, #532]	; (8006ee0 <_dtoa_r+0x618>)
 8006ccc:	f7f9 fa58 	bl	8000180 <__adddf3>
 8006cd0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006cd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006cd8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d15c      	bne.n	8006d98 <_dtoa_r+0x4d0>
 8006cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4b7f      	ldr	r3, [pc, #508]	; (8006ee4 <_dtoa_r+0x61c>)
 8006ce6:	f7f9 fa49 	bl	800017c <__aeabi_dsub>
 8006cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cec:	462b      	mov	r3, r5
 8006cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cf2:	f7f9 fe8b 	bl	8000a0c <__aeabi_dcmpgt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f040 8281 	bne.w	80071fe <_dtoa_r+0x936>
 8006cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d02:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d06:	f7f9 fe63 	bl	80009d0 <__aeabi_dcmplt>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f040 8275 	bne.w	80071fa <_dtoa_r+0x932>
 8006d10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f2c0 814b 	blt.w	8006fb6 <_dtoa_r+0x6ee>
 8006d20:	f1ba 0f0e 	cmp.w	sl, #14
 8006d24:	f300 8147 	bgt.w	8006fb6 <_dtoa_r+0x6ee>
 8006d28:	4b69      	ldr	r3, [pc, #420]	; (8006ed0 <_dtoa_r+0x608>)
 8006d2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f280 80d7 	bge.w	8006eec <_dtoa_r+0x624>
 8006d3e:	f1b8 0f00 	cmp.w	r8, #0
 8006d42:	f300 80d3 	bgt.w	8006eec <_dtoa_r+0x624>
 8006d46:	f040 8257 	bne.w	80071f8 <_dtoa_r+0x930>
 8006d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4b64      	ldr	r3, [pc, #400]	; (8006ee4 <_dtoa_r+0x61c>)
 8006d52:	f7f9 fbcb 	bl	80004ec <__aeabi_dmul>
 8006d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d5a:	f7f9 fe4d 	bl	80009f8 <__aeabi_dcmpge>
 8006d5e:	4646      	mov	r6, r8
 8006d60:	4647      	mov	r7, r8
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f040 822d 	bne.w	80071c2 <_dtoa_r+0x8fa>
 8006d68:	9b06      	ldr	r3, [sp, #24]
 8006d6a:	9a06      	ldr	r2, [sp, #24]
 8006d6c:	1c5d      	adds	r5, r3, #1
 8006d6e:	2331      	movs	r3, #49	; 0x31
 8006d70:	f10a 0a01 	add.w	sl, sl, #1
 8006d74:	7013      	strb	r3, [r2, #0]
 8006d76:	e228      	b.n	80071ca <_dtoa_r+0x902>
 8006d78:	07f2      	lsls	r2, r6, #31
 8006d7a:	d505      	bpl.n	8006d88 <_dtoa_r+0x4c0>
 8006d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d80:	f7f9 fbb4 	bl	80004ec <__aeabi_dmul>
 8006d84:	2301      	movs	r3, #1
 8006d86:	3501      	adds	r5, #1
 8006d88:	1076      	asrs	r6, r6, #1
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	e76e      	b.n	8006c6c <_dtoa_r+0x3a4>
 8006d8e:	2502      	movs	r5, #2
 8006d90:	e771      	b.n	8006c76 <_dtoa_r+0x3ae>
 8006d92:	4657      	mov	r7, sl
 8006d94:	4646      	mov	r6, r8
 8006d96:	e790      	b.n	8006cba <_dtoa_r+0x3f2>
 8006d98:	4b4d      	ldr	r3, [pc, #308]	; (8006ed0 <_dtoa_r+0x608>)
 8006d9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d9e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d048      	beq.n	8006e3a <_dtoa_r+0x572>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	2000      	movs	r0, #0
 8006dae:	494e      	ldr	r1, [pc, #312]	; (8006ee8 <_dtoa_r+0x620>)
 8006db0:	f7f9 fcc6 	bl	8000740 <__aeabi_ddiv>
 8006db4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006db8:	f7f9 f9e0 	bl	800017c <__aeabi_dsub>
 8006dbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006dc0:	9d06      	ldr	r5, [sp, #24]
 8006dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dc6:	f7f9 fe41 	bl	8000a4c <__aeabi_d2iz>
 8006dca:	9011      	str	r0, [sp, #68]	; 0x44
 8006dcc:	f7f9 fb24 	bl	8000418 <__aeabi_i2d>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd8:	f7f9 f9d0 	bl	800017c <__aeabi_dsub>
 8006ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de2:	3330      	adds	r3, #48	; 0x30
 8006de4:	f805 3b01 	strb.w	r3, [r5], #1
 8006de8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dec:	f7f9 fdf0 	bl	80009d0 <__aeabi_dcmplt>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d163      	bne.n	8006ebc <_dtoa_r+0x5f4>
 8006df4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006df8:	2000      	movs	r0, #0
 8006dfa:	4937      	ldr	r1, [pc, #220]	; (8006ed8 <_dtoa_r+0x610>)
 8006dfc:	f7f9 f9be 	bl	800017c <__aeabi_dsub>
 8006e00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e04:	f7f9 fde4 	bl	80009d0 <__aeabi_dcmplt>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f040 80b5 	bne.w	8006f78 <_dtoa_r+0x6b0>
 8006e0e:	9b06      	ldr	r3, [sp, #24]
 8006e10:	1aeb      	subs	r3, r5, r3
 8006e12:	429e      	cmp	r6, r3
 8006e14:	f77f af7c 	ble.w	8006d10 <_dtoa_r+0x448>
 8006e18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4b2f      	ldr	r3, [pc, #188]	; (8006edc <_dtoa_r+0x614>)
 8006e20:	f7f9 fb64 	bl	80004ec <__aeabi_dmul>
 8006e24:	2200      	movs	r2, #0
 8006e26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2e:	4b2b      	ldr	r3, [pc, #172]	; (8006edc <_dtoa_r+0x614>)
 8006e30:	f7f9 fb5c 	bl	80004ec <__aeabi_dmul>
 8006e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e38:	e7c3      	b.n	8006dc2 <_dtoa_r+0x4fa>
 8006e3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e3e:	f7f9 fb55 	bl	80004ec <__aeabi_dmul>
 8006e42:	9b06      	ldr	r3, [sp, #24]
 8006e44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e48:	199d      	adds	r5, r3, r6
 8006e4a:	461e      	mov	r6, r3
 8006e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e50:	f7f9 fdfc 	bl	8000a4c <__aeabi_d2iz>
 8006e54:	9011      	str	r0, [sp, #68]	; 0x44
 8006e56:	f7f9 fadf 	bl	8000418 <__aeabi_i2d>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e62:	f7f9 f98b 	bl	800017c <__aeabi_dsub>
 8006e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e6c:	3330      	adds	r3, #48	; 0x30
 8006e6e:	f806 3b01 	strb.w	r3, [r6], #1
 8006e72:	42ae      	cmp	r6, r5
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	d124      	bne.n	8006ec4 <_dtoa_r+0x5fc>
 8006e7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <_dtoa_r+0x620>)
 8006e80:	f7f9 f97e 	bl	8000180 <__adddf3>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e8c:	f7f9 fdbe 	bl	8000a0c <__aeabi_dcmpgt>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d171      	bne.n	8006f78 <_dtoa_r+0x6b0>
 8006e94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e98:	2000      	movs	r0, #0
 8006e9a:	4913      	ldr	r1, [pc, #76]	; (8006ee8 <_dtoa_r+0x620>)
 8006e9c:	f7f9 f96e 	bl	800017c <__aeabi_dsub>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea8:	f7f9 fd92 	bl	80009d0 <__aeabi_dcmplt>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f43f af2f 	beq.w	8006d10 <_dtoa_r+0x448>
 8006eb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006eb6:	1e6a      	subs	r2, r5, #1
 8006eb8:	2b30      	cmp	r3, #48	; 0x30
 8006eba:	d001      	beq.n	8006ec0 <_dtoa_r+0x5f8>
 8006ebc:	46ba      	mov	sl, r7
 8006ebe:	e04a      	b.n	8006f56 <_dtoa_r+0x68e>
 8006ec0:	4615      	mov	r5, r2
 8006ec2:	e7f6      	b.n	8006eb2 <_dtoa_r+0x5ea>
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <_dtoa_r+0x614>)
 8006ec6:	f7f9 fb11 	bl	80004ec <__aeabi_dmul>
 8006eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ece:	e7bd      	b.n	8006e4c <_dtoa_r+0x584>
 8006ed0:	080097c0 	.word	0x080097c0
 8006ed4:	08009798 	.word	0x08009798
 8006ed8:	3ff00000 	.word	0x3ff00000
 8006edc:	40240000 	.word	0x40240000
 8006ee0:	401c0000 	.word	0x401c0000
 8006ee4:	40140000 	.word	0x40140000
 8006ee8:	3fe00000 	.word	0x3fe00000
 8006eec:	9d06      	ldr	r5, [sp, #24]
 8006eee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	f7f9 fc21 	bl	8000740 <__aeabi_ddiv>
 8006efe:	f7f9 fda5 	bl	8000a4c <__aeabi_d2iz>
 8006f02:	4681      	mov	r9, r0
 8006f04:	f7f9 fa88 	bl	8000418 <__aeabi_i2d>
 8006f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f0c:	f7f9 faee 	bl	80004ec <__aeabi_dmul>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4630      	mov	r0, r6
 8006f16:	4639      	mov	r1, r7
 8006f18:	f7f9 f930 	bl	800017c <__aeabi_dsub>
 8006f1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006f20:	f805 6b01 	strb.w	r6, [r5], #1
 8006f24:	9e06      	ldr	r6, [sp, #24]
 8006f26:	4602      	mov	r2, r0
 8006f28:	1bae      	subs	r6, r5, r6
 8006f2a:	45b0      	cmp	r8, r6
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	d135      	bne.n	8006f9c <_dtoa_r+0x6d4>
 8006f30:	f7f9 f926 	bl	8000180 <__adddf3>
 8006f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f38:	4606      	mov	r6, r0
 8006f3a:	460f      	mov	r7, r1
 8006f3c:	f7f9 fd66 	bl	8000a0c <__aeabi_dcmpgt>
 8006f40:	b9c8      	cbnz	r0, 8006f76 <_dtoa_r+0x6ae>
 8006f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fd37 	bl	80009bc <__aeabi_dcmpeq>
 8006f4e:	b110      	cbz	r0, 8006f56 <_dtoa_r+0x68e>
 8006f50:	f019 0f01 	tst.w	r9, #1
 8006f54:	d10f      	bne.n	8006f76 <_dtoa_r+0x6ae>
 8006f56:	4659      	mov	r1, fp
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 fae2 	bl	8007522 <_Bfree>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f62:	702b      	strb	r3, [r5, #0]
 8006f64:	f10a 0301 	add.w	r3, sl, #1
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f43f acf3 	beq.w	8006958 <_dtoa_r+0x90>
 8006f72:	601d      	str	r5, [r3, #0]
 8006f74:	e4f0      	b.n	8006958 <_dtoa_r+0x90>
 8006f76:	4657      	mov	r7, sl
 8006f78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f7c:	1e6b      	subs	r3, r5, #1
 8006f7e:	2a39      	cmp	r2, #57	; 0x39
 8006f80:	d106      	bne.n	8006f90 <_dtoa_r+0x6c8>
 8006f82:	9a06      	ldr	r2, [sp, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d107      	bne.n	8006f98 <_dtoa_r+0x6d0>
 8006f88:	2330      	movs	r3, #48	; 0x30
 8006f8a:	7013      	strb	r3, [r2, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	3701      	adds	r7, #1
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	3201      	adds	r2, #1
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	e791      	b.n	8006ebc <_dtoa_r+0x5f4>
 8006f98:	461d      	mov	r5, r3
 8006f9a:	e7ed      	b.n	8006f78 <_dtoa_r+0x6b0>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4b99      	ldr	r3, [pc, #612]	; (8007204 <_dtoa_r+0x93c>)
 8006fa0:	f7f9 faa4 	bl	80004ec <__aeabi_dmul>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	f7f9 fd06 	bl	80009bc <__aeabi_dcmpeq>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d09e      	beq.n	8006ef2 <_dtoa_r+0x62a>
 8006fb4:	e7cf      	b.n	8006f56 <_dtoa_r+0x68e>
 8006fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fb8:	2a00      	cmp	r2, #0
 8006fba:	f000 8088 	beq.w	80070ce <_dtoa_r+0x806>
 8006fbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fc0:	2a01      	cmp	r2, #1
 8006fc2:	dc6d      	bgt.n	80070a0 <_dtoa_r+0x7d8>
 8006fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d066      	beq.n	8007098 <_dtoa_r+0x7d0>
 8006fca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fce:	464d      	mov	r5, r9
 8006fd0:	9e08      	ldr	r6, [sp, #32]
 8006fd2:	9a07      	ldr	r2, [sp, #28]
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	441a      	add	r2, r3
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4499      	add	r9, r3
 8006fdc:	9207      	str	r2, [sp, #28]
 8006fde:	f000 fb40 	bl	8007662 <__i2b>
 8006fe2:	4607      	mov	r7, r0
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	dd0b      	ble.n	8007000 <_dtoa_r+0x738>
 8006fe8:	9b07      	ldr	r3, [sp, #28]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dd08      	ble.n	8007000 <_dtoa_r+0x738>
 8006fee:	42ab      	cmp	r3, r5
 8006ff0:	bfa8      	it	ge
 8006ff2:	462b      	movge	r3, r5
 8006ff4:	9a07      	ldr	r2, [sp, #28]
 8006ff6:	eba9 0903 	sub.w	r9, r9, r3
 8006ffa:	1aed      	subs	r5, r5, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	9307      	str	r3, [sp, #28]
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	b1eb      	cbz	r3, 8007040 <_dtoa_r+0x778>
 8007004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d065      	beq.n	80070d6 <_dtoa_r+0x80e>
 800700a:	b18e      	cbz	r6, 8007030 <_dtoa_r+0x768>
 800700c:	4639      	mov	r1, r7
 800700e:	4632      	mov	r2, r6
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fbc5 	bl	80077a0 <__pow5mult>
 8007016:	465a      	mov	r2, fp
 8007018:	4601      	mov	r1, r0
 800701a:	4607      	mov	r7, r0
 800701c:	4620      	mov	r0, r4
 800701e:	f000 fb29 	bl	8007674 <__multiply>
 8007022:	4659      	mov	r1, fp
 8007024:	900a      	str	r0, [sp, #40]	; 0x28
 8007026:	4620      	mov	r0, r4
 8007028:	f000 fa7b 	bl	8007522 <_Bfree>
 800702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702e:	469b      	mov	fp, r3
 8007030:	9b08      	ldr	r3, [sp, #32]
 8007032:	1b9a      	subs	r2, r3, r6
 8007034:	d004      	beq.n	8007040 <_dtoa_r+0x778>
 8007036:	4659      	mov	r1, fp
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fbb1 	bl	80077a0 <__pow5mult>
 800703e:	4683      	mov	fp, r0
 8007040:	2101      	movs	r1, #1
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fb0d 	bl	8007662 <__i2b>
 8007048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800704a:	4606      	mov	r6, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 81c6 	beq.w	80073de <_dtoa_r+0xb16>
 8007052:	461a      	mov	r2, r3
 8007054:	4601      	mov	r1, r0
 8007056:	4620      	mov	r0, r4
 8007058:	f000 fba2 	bl	80077a0 <__pow5mult>
 800705c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800705e:	4606      	mov	r6, r0
 8007060:	2b01      	cmp	r3, #1
 8007062:	dc3e      	bgt.n	80070e2 <_dtoa_r+0x81a>
 8007064:	9b02      	ldr	r3, [sp, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d137      	bne.n	80070da <_dtoa_r+0x812>
 800706a:	9b03      	ldr	r3, [sp, #12]
 800706c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007070:	2b00      	cmp	r3, #0
 8007072:	d134      	bne.n	80070de <_dtoa_r+0x816>
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800707a:	0d1b      	lsrs	r3, r3, #20
 800707c:	051b      	lsls	r3, r3, #20
 800707e:	b12b      	cbz	r3, 800708c <_dtoa_r+0x7c4>
 8007080:	9b07      	ldr	r3, [sp, #28]
 8007082:	f109 0901 	add.w	r9, r9, #1
 8007086:	3301      	adds	r3, #1
 8007088:	9307      	str	r3, [sp, #28]
 800708a:	2301      	movs	r3, #1
 800708c:	9308      	str	r3, [sp, #32]
 800708e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d128      	bne.n	80070e6 <_dtoa_r+0x81e>
 8007094:	2001      	movs	r0, #1
 8007096:	e02e      	b.n	80070f6 <_dtoa_r+0x82e>
 8007098:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800709a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800709e:	e796      	b.n	8006fce <_dtoa_r+0x706>
 80070a0:	9b08      	ldr	r3, [sp, #32]
 80070a2:	f108 36ff 	add.w	r6, r8, #4294967295
 80070a6:	42b3      	cmp	r3, r6
 80070a8:	bfb7      	itett	lt
 80070aa:	9b08      	ldrlt	r3, [sp, #32]
 80070ac:	1b9e      	subge	r6, r3, r6
 80070ae:	1af2      	sublt	r2, r6, r3
 80070b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80070b2:	bfbf      	itttt	lt
 80070b4:	9608      	strlt	r6, [sp, #32]
 80070b6:	189b      	addlt	r3, r3, r2
 80070b8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80070ba:	2600      	movlt	r6, #0
 80070bc:	f1b8 0f00 	cmp.w	r8, #0
 80070c0:	bfb9      	ittee	lt
 80070c2:	eba9 0508 	sublt.w	r5, r9, r8
 80070c6:	2300      	movlt	r3, #0
 80070c8:	464d      	movge	r5, r9
 80070ca:	4643      	movge	r3, r8
 80070cc:	e781      	b.n	8006fd2 <_dtoa_r+0x70a>
 80070ce:	9e08      	ldr	r6, [sp, #32]
 80070d0:	464d      	mov	r5, r9
 80070d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80070d4:	e786      	b.n	8006fe4 <_dtoa_r+0x71c>
 80070d6:	9a08      	ldr	r2, [sp, #32]
 80070d8:	e7ad      	b.n	8007036 <_dtoa_r+0x76e>
 80070da:	2300      	movs	r3, #0
 80070dc:	e7d6      	b.n	800708c <_dtoa_r+0x7c4>
 80070de:	9b02      	ldr	r3, [sp, #8]
 80070e0:	e7d4      	b.n	800708c <_dtoa_r+0x7c4>
 80070e2:	2300      	movs	r3, #0
 80070e4:	9308      	str	r3, [sp, #32]
 80070e6:	6933      	ldr	r3, [r6, #16]
 80070e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070ec:	6918      	ldr	r0, [r3, #16]
 80070ee:	f000 fa6a 	bl	80075c6 <__hi0bits>
 80070f2:	f1c0 0020 	rsb	r0, r0, #32
 80070f6:	9b07      	ldr	r3, [sp, #28]
 80070f8:	4418      	add	r0, r3
 80070fa:	f010 001f 	ands.w	r0, r0, #31
 80070fe:	d047      	beq.n	8007190 <_dtoa_r+0x8c8>
 8007100:	f1c0 0320 	rsb	r3, r0, #32
 8007104:	2b04      	cmp	r3, #4
 8007106:	dd3b      	ble.n	8007180 <_dtoa_r+0x8b8>
 8007108:	9b07      	ldr	r3, [sp, #28]
 800710a:	f1c0 001c 	rsb	r0, r0, #28
 800710e:	4481      	add	r9, r0
 8007110:	4405      	add	r5, r0
 8007112:	4403      	add	r3, r0
 8007114:	9307      	str	r3, [sp, #28]
 8007116:	f1b9 0f00 	cmp.w	r9, #0
 800711a:	dd05      	ble.n	8007128 <_dtoa_r+0x860>
 800711c:	4659      	mov	r1, fp
 800711e:	464a      	mov	r2, r9
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fb8b 	bl	800783c <__lshift>
 8007126:	4683      	mov	fp, r0
 8007128:	9b07      	ldr	r3, [sp, #28]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dd05      	ble.n	800713a <_dtoa_r+0x872>
 800712e:	4631      	mov	r1, r6
 8007130:	461a      	mov	r2, r3
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fb82 	bl	800783c <__lshift>
 8007138:	4606      	mov	r6, r0
 800713a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800713c:	b353      	cbz	r3, 8007194 <_dtoa_r+0x8cc>
 800713e:	4631      	mov	r1, r6
 8007140:	4658      	mov	r0, fp
 8007142:	f000 fbcf 	bl	80078e4 <__mcmp>
 8007146:	2800      	cmp	r0, #0
 8007148:	da24      	bge.n	8007194 <_dtoa_r+0x8cc>
 800714a:	2300      	movs	r3, #0
 800714c:	4659      	mov	r1, fp
 800714e:	220a      	movs	r2, #10
 8007150:	4620      	mov	r0, r4
 8007152:	f000 f9fd 	bl	8007550 <__multadd>
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	f10a 3aff 	add.w	sl, sl, #4294967295
 800715c:	4683      	mov	fp, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 8144 	beq.w	80073ec <_dtoa_r+0xb24>
 8007164:	2300      	movs	r3, #0
 8007166:	4639      	mov	r1, r7
 8007168:	220a      	movs	r2, #10
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f9f0 	bl	8007550 <__multadd>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	4607      	mov	r7, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	dc4d      	bgt.n	8007214 <_dtoa_r+0x94c>
 8007178:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800717a:	2b02      	cmp	r3, #2
 800717c:	dd4a      	ble.n	8007214 <_dtoa_r+0x94c>
 800717e:	e011      	b.n	80071a4 <_dtoa_r+0x8dc>
 8007180:	d0c9      	beq.n	8007116 <_dtoa_r+0x84e>
 8007182:	9a07      	ldr	r2, [sp, #28]
 8007184:	331c      	adds	r3, #28
 8007186:	441a      	add	r2, r3
 8007188:	4499      	add	r9, r3
 800718a:	441d      	add	r5, r3
 800718c:	4613      	mov	r3, r2
 800718e:	e7c1      	b.n	8007114 <_dtoa_r+0x84c>
 8007190:	4603      	mov	r3, r0
 8007192:	e7f6      	b.n	8007182 <_dtoa_r+0x8ba>
 8007194:	f1b8 0f00 	cmp.w	r8, #0
 8007198:	dc36      	bgt.n	8007208 <_dtoa_r+0x940>
 800719a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800719c:	2b02      	cmp	r3, #2
 800719e:	dd33      	ble.n	8007208 <_dtoa_r+0x940>
 80071a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	b963      	cbnz	r3, 80071c2 <_dtoa_r+0x8fa>
 80071a8:	4631      	mov	r1, r6
 80071aa:	2205      	movs	r2, #5
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 f9cf 	bl	8007550 <__multadd>
 80071b2:	4601      	mov	r1, r0
 80071b4:	4606      	mov	r6, r0
 80071b6:	4658      	mov	r0, fp
 80071b8:	f000 fb94 	bl	80078e4 <__mcmp>
 80071bc:	2800      	cmp	r0, #0
 80071be:	f73f add3 	bgt.w	8006d68 <_dtoa_r+0x4a0>
 80071c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071c4:	9d06      	ldr	r5, [sp, #24]
 80071c6:	ea6f 0a03 	mvn.w	sl, r3
 80071ca:	f04f 0900 	mov.w	r9, #0
 80071ce:	4631      	mov	r1, r6
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f9a6 	bl	8007522 <_Bfree>
 80071d6:	2f00      	cmp	r7, #0
 80071d8:	f43f aebd 	beq.w	8006f56 <_dtoa_r+0x68e>
 80071dc:	f1b9 0f00 	cmp.w	r9, #0
 80071e0:	d005      	beq.n	80071ee <_dtoa_r+0x926>
 80071e2:	45b9      	cmp	r9, r7
 80071e4:	d003      	beq.n	80071ee <_dtoa_r+0x926>
 80071e6:	4649      	mov	r1, r9
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 f99a 	bl	8007522 <_Bfree>
 80071ee:	4639      	mov	r1, r7
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 f996 	bl	8007522 <_Bfree>
 80071f6:	e6ae      	b.n	8006f56 <_dtoa_r+0x68e>
 80071f8:	2600      	movs	r6, #0
 80071fa:	4637      	mov	r7, r6
 80071fc:	e7e1      	b.n	80071c2 <_dtoa_r+0x8fa>
 80071fe:	46ba      	mov	sl, r7
 8007200:	4637      	mov	r7, r6
 8007202:	e5b1      	b.n	8006d68 <_dtoa_r+0x4a0>
 8007204:	40240000 	.word	0x40240000
 8007208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720a:	f8cd 8010 	str.w	r8, [sp, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80f3 	beq.w	80073fa <_dtoa_r+0xb32>
 8007214:	2d00      	cmp	r5, #0
 8007216:	dd05      	ble.n	8007224 <_dtoa_r+0x95c>
 8007218:	4639      	mov	r1, r7
 800721a:	462a      	mov	r2, r5
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fb0d 	bl	800783c <__lshift>
 8007222:	4607      	mov	r7, r0
 8007224:	9b08      	ldr	r3, [sp, #32]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d04c      	beq.n	80072c4 <_dtoa_r+0x9fc>
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4620      	mov	r0, r4
 800722e:	f000 f944 	bl	80074ba <_Balloc>
 8007232:	4605      	mov	r5, r0
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	f107 010c 	add.w	r1, r7, #12
 800723a:	3202      	adds	r2, #2
 800723c:	0092      	lsls	r2, r2, #2
 800723e:	300c      	adds	r0, #12
 8007240:	f000 f930 	bl	80074a4 <memcpy>
 8007244:	2201      	movs	r2, #1
 8007246:	4629      	mov	r1, r5
 8007248:	4620      	mov	r0, r4
 800724a:	f000 faf7 	bl	800783c <__lshift>
 800724e:	46b9      	mov	r9, r7
 8007250:	4607      	mov	r7, r0
 8007252:	9b06      	ldr	r3, [sp, #24]
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	9b02      	ldr	r3, [sp, #8]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	4631      	mov	r1, r6
 8007260:	4658      	mov	r0, fp
 8007262:	f7ff faa1 	bl	80067a8 <quorem>
 8007266:	4649      	mov	r1, r9
 8007268:	4605      	mov	r5, r0
 800726a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800726e:	4658      	mov	r0, fp
 8007270:	f000 fb38 	bl	80078e4 <__mcmp>
 8007274:	463a      	mov	r2, r7
 8007276:	9002      	str	r0, [sp, #8]
 8007278:	4631      	mov	r1, r6
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fb4c 	bl	8007918 <__mdiff>
 8007280:	68c3      	ldr	r3, [r0, #12]
 8007282:	4602      	mov	r2, r0
 8007284:	bb03      	cbnz	r3, 80072c8 <_dtoa_r+0xa00>
 8007286:	4601      	mov	r1, r0
 8007288:	9009      	str	r0, [sp, #36]	; 0x24
 800728a:	4658      	mov	r0, fp
 800728c:	f000 fb2a 	bl	80078e4 <__mcmp>
 8007290:	4603      	mov	r3, r0
 8007292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007294:	4611      	mov	r1, r2
 8007296:	4620      	mov	r0, r4
 8007298:	9309      	str	r3, [sp, #36]	; 0x24
 800729a:	f000 f942 	bl	8007522 <_Bfree>
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	b9a3      	cbnz	r3, 80072cc <_dtoa_r+0xa04>
 80072a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072a4:	b992      	cbnz	r2, 80072cc <_dtoa_r+0xa04>
 80072a6:	9a08      	ldr	r2, [sp, #32]
 80072a8:	b982      	cbnz	r2, 80072cc <_dtoa_r+0xa04>
 80072aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80072ae:	d029      	beq.n	8007304 <_dtoa_r+0xa3c>
 80072b0:	9b02      	ldr	r3, [sp, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dd01      	ble.n	80072ba <_dtoa_r+0x9f2>
 80072b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80072ba:	9b07      	ldr	r3, [sp, #28]
 80072bc:	1c5d      	adds	r5, r3, #1
 80072be:	f883 8000 	strb.w	r8, [r3]
 80072c2:	e784      	b.n	80071ce <_dtoa_r+0x906>
 80072c4:	4638      	mov	r0, r7
 80072c6:	e7c2      	b.n	800724e <_dtoa_r+0x986>
 80072c8:	2301      	movs	r3, #1
 80072ca:	e7e3      	b.n	8007294 <_dtoa_r+0x9cc>
 80072cc:	9a02      	ldr	r2, [sp, #8]
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	db04      	blt.n	80072dc <_dtoa_r+0xa14>
 80072d2:	d123      	bne.n	800731c <_dtoa_r+0xa54>
 80072d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072d6:	bb0a      	cbnz	r2, 800731c <_dtoa_r+0xa54>
 80072d8:	9a08      	ldr	r2, [sp, #32]
 80072da:	b9fa      	cbnz	r2, 800731c <_dtoa_r+0xa54>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	ddec      	ble.n	80072ba <_dtoa_r+0x9f2>
 80072e0:	4659      	mov	r1, fp
 80072e2:	2201      	movs	r2, #1
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 faa9 	bl	800783c <__lshift>
 80072ea:	4631      	mov	r1, r6
 80072ec:	4683      	mov	fp, r0
 80072ee:	f000 faf9 	bl	80078e4 <__mcmp>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	dc03      	bgt.n	80072fe <_dtoa_r+0xa36>
 80072f6:	d1e0      	bne.n	80072ba <_dtoa_r+0x9f2>
 80072f8:	f018 0f01 	tst.w	r8, #1
 80072fc:	d0dd      	beq.n	80072ba <_dtoa_r+0x9f2>
 80072fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007302:	d1d8      	bne.n	80072b6 <_dtoa_r+0x9ee>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	9a07      	ldr	r2, [sp, #28]
 8007308:	1c5d      	adds	r5, r3, #1
 800730a:	2339      	movs	r3, #57	; 0x39
 800730c:	7013      	strb	r3, [r2, #0]
 800730e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007312:	1e6a      	subs	r2, r5, #1
 8007314:	2b39      	cmp	r3, #57	; 0x39
 8007316:	d04d      	beq.n	80073b4 <_dtoa_r+0xaec>
 8007318:	3301      	adds	r3, #1
 800731a:	e052      	b.n	80073c2 <_dtoa_r+0xafa>
 800731c:	9a07      	ldr	r2, [sp, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f102 0501 	add.w	r5, r2, #1
 8007324:	dd06      	ble.n	8007334 <_dtoa_r+0xa6c>
 8007326:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800732a:	d0eb      	beq.n	8007304 <_dtoa_r+0xa3c>
 800732c:	f108 0801 	add.w	r8, r8, #1
 8007330:	9b07      	ldr	r3, [sp, #28]
 8007332:	e7c4      	b.n	80072be <_dtoa_r+0x9f6>
 8007334:	9b06      	ldr	r3, [sp, #24]
 8007336:	9a04      	ldr	r2, [sp, #16]
 8007338:	1aeb      	subs	r3, r5, r3
 800733a:	4293      	cmp	r3, r2
 800733c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007340:	d021      	beq.n	8007386 <_dtoa_r+0xabe>
 8007342:	4659      	mov	r1, fp
 8007344:	2300      	movs	r3, #0
 8007346:	220a      	movs	r2, #10
 8007348:	4620      	mov	r0, r4
 800734a:	f000 f901 	bl	8007550 <__multadd>
 800734e:	45b9      	cmp	r9, r7
 8007350:	4683      	mov	fp, r0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	f04f 020a 	mov.w	r2, #10
 800735a:	4649      	mov	r1, r9
 800735c:	4620      	mov	r0, r4
 800735e:	d105      	bne.n	800736c <_dtoa_r+0xaa4>
 8007360:	f000 f8f6 	bl	8007550 <__multadd>
 8007364:	4681      	mov	r9, r0
 8007366:	4607      	mov	r7, r0
 8007368:	9507      	str	r5, [sp, #28]
 800736a:	e778      	b.n	800725e <_dtoa_r+0x996>
 800736c:	f000 f8f0 	bl	8007550 <__multadd>
 8007370:	4639      	mov	r1, r7
 8007372:	4681      	mov	r9, r0
 8007374:	2300      	movs	r3, #0
 8007376:	220a      	movs	r2, #10
 8007378:	4620      	mov	r0, r4
 800737a:	f000 f8e9 	bl	8007550 <__multadd>
 800737e:	4607      	mov	r7, r0
 8007380:	e7f2      	b.n	8007368 <_dtoa_r+0xaa0>
 8007382:	f04f 0900 	mov.w	r9, #0
 8007386:	4659      	mov	r1, fp
 8007388:	2201      	movs	r2, #1
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fa56 	bl	800783c <__lshift>
 8007390:	4631      	mov	r1, r6
 8007392:	4683      	mov	fp, r0
 8007394:	f000 faa6 	bl	80078e4 <__mcmp>
 8007398:	2800      	cmp	r0, #0
 800739a:	dcb8      	bgt.n	800730e <_dtoa_r+0xa46>
 800739c:	d102      	bne.n	80073a4 <_dtoa_r+0xadc>
 800739e:	f018 0f01 	tst.w	r8, #1
 80073a2:	d1b4      	bne.n	800730e <_dtoa_r+0xa46>
 80073a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073a8:	1e6a      	subs	r2, r5, #1
 80073aa:	2b30      	cmp	r3, #48	; 0x30
 80073ac:	f47f af0f 	bne.w	80071ce <_dtoa_r+0x906>
 80073b0:	4615      	mov	r5, r2
 80073b2:	e7f7      	b.n	80073a4 <_dtoa_r+0xadc>
 80073b4:	9b06      	ldr	r3, [sp, #24]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d105      	bne.n	80073c6 <_dtoa_r+0xafe>
 80073ba:	2331      	movs	r3, #49	; 0x31
 80073bc:	9a06      	ldr	r2, [sp, #24]
 80073be:	f10a 0a01 	add.w	sl, sl, #1
 80073c2:	7013      	strb	r3, [r2, #0]
 80073c4:	e703      	b.n	80071ce <_dtoa_r+0x906>
 80073c6:	4615      	mov	r5, r2
 80073c8:	e7a1      	b.n	800730e <_dtoa_r+0xa46>
 80073ca:	4b17      	ldr	r3, [pc, #92]	; (8007428 <_dtoa_r+0xb60>)
 80073cc:	f7ff bae1 	b.w	8006992 <_dtoa_r+0xca>
 80073d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f47f aabb 	bne.w	800694e <_dtoa_r+0x86>
 80073d8:	4b14      	ldr	r3, [pc, #80]	; (800742c <_dtoa_r+0xb64>)
 80073da:	f7ff bada 	b.w	8006992 <_dtoa_r+0xca>
 80073de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	f77f ae3f 	ble.w	8007064 <_dtoa_r+0x79c>
 80073e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073e8:	9308      	str	r3, [sp, #32]
 80073ea:	e653      	b.n	8007094 <_dtoa_r+0x7cc>
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	dc03      	bgt.n	80073fa <_dtoa_r+0xb32>
 80073f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	f73f aed5 	bgt.w	80071a4 <_dtoa_r+0x8dc>
 80073fa:	9d06      	ldr	r5, [sp, #24]
 80073fc:	4631      	mov	r1, r6
 80073fe:	4658      	mov	r0, fp
 8007400:	f7ff f9d2 	bl	80067a8 <quorem>
 8007404:	9b06      	ldr	r3, [sp, #24]
 8007406:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800740a:	f805 8b01 	strb.w	r8, [r5], #1
 800740e:	9a04      	ldr	r2, [sp, #16]
 8007410:	1aeb      	subs	r3, r5, r3
 8007412:	429a      	cmp	r2, r3
 8007414:	ddb5      	ble.n	8007382 <_dtoa_r+0xaba>
 8007416:	4659      	mov	r1, fp
 8007418:	2300      	movs	r3, #0
 800741a:	220a      	movs	r2, #10
 800741c:	4620      	mov	r0, r4
 800741e:	f000 f897 	bl	8007550 <__multadd>
 8007422:	4683      	mov	fp, r0
 8007424:	e7ea      	b.n	80073fc <_dtoa_r+0xb34>
 8007426:	bf00      	nop
 8007428:	08009758 	.word	0x08009758
 800742c:	0800977c 	.word	0x0800977c

08007430 <__locale_ctype_ptr_l>:
 8007430:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007434:	4770      	bx	lr
	...

08007438 <_localeconv_r>:
 8007438:	4b04      	ldr	r3, [pc, #16]	; (800744c <_localeconv_r+0x14>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a18      	ldr	r0, [r3, #32]
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <_localeconv_r+0x18>)
 8007440:	2800      	cmp	r0, #0
 8007442:	bf08      	it	eq
 8007444:	4618      	moveq	r0, r3
 8007446:	30f0      	adds	r0, #240	; 0xf0
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	20000050 	.word	0x20000050
 8007450:	200000b4 	.word	0x200000b4

08007454 <malloc>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <malloc+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f000 bb65 	b.w	8007b28 <_malloc_r>
 800745e:	bf00      	nop
 8007460:	20000050 	.word	0x20000050

08007464 <__ascii_mbtowc>:
 8007464:	b082      	sub	sp, #8
 8007466:	b901      	cbnz	r1, 800746a <__ascii_mbtowc+0x6>
 8007468:	a901      	add	r1, sp, #4
 800746a:	b142      	cbz	r2, 800747e <__ascii_mbtowc+0x1a>
 800746c:	b14b      	cbz	r3, 8007482 <__ascii_mbtowc+0x1e>
 800746e:	7813      	ldrb	r3, [r2, #0]
 8007470:	600b      	str	r3, [r1, #0]
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	1c10      	adds	r0, r2, #0
 8007476:	bf18      	it	ne
 8007478:	2001      	movne	r0, #1
 800747a:	b002      	add	sp, #8
 800747c:	4770      	bx	lr
 800747e:	4610      	mov	r0, r2
 8007480:	e7fb      	b.n	800747a <__ascii_mbtowc+0x16>
 8007482:	f06f 0001 	mvn.w	r0, #1
 8007486:	e7f8      	b.n	800747a <__ascii_mbtowc+0x16>

08007488 <memchr>:
 8007488:	b510      	push	{r4, lr}
 800748a:	b2c9      	uxtb	r1, r1
 800748c:	4402      	add	r2, r0
 800748e:	4290      	cmp	r0, r2
 8007490:	4603      	mov	r3, r0
 8007492:	d101      	bne.n	8007498 <memchr+0x10>
 8007494:	2300      	movs	r3, #0
 8007496:	e003      	b.n	80074a0 <memchr+0x18>
 8007498:	781c      	ldrb	r4, [r3, #0]
 800749a:	3001      	adds	r0, #1
 800749c:	428c      	cmp	r4, r1
 800749e:	d1f6      	bne.n	800748e <memchr+0x6>
 80074a0:	4618      	mov	r0, r3
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <memcpy>:
 80074a4:	b510      	push	{r4, lr}
 80074a6:	1e43      	subs	r3, r0, #1
 80074a8:	440a      	add	r2, r1
 80074aa:	4291      	cmp	r1, r2
 80074ac:	d100      	bne.n	80074b0 <memcpy+0xc>
 80074ae:	bd10      	pop	{r4, pc}
 80074b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074b8:	e7f7      	b.n	80074aa <memcpy+0x6>

080074ba <_Balloc>:
 80074ba:	b570      	push	{r4, r5, r6, lr}
 80074bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074be:	4604      	mov	r4, r0
 80074c0:	460e      	mov	r6, r1
 80074c2:	b93d      	cbnz	r5, 80074d4 <_Balloc+0x1a>
 80074c4:	2010      	movs	r0, #16
 80074c6:	f7ff ffc5 	bl	8007454 <malloc>
 80074ca:	6260      	str	r0, [r4, #36]	; 0x24
 80074cc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074d0:	6005      	str	r5, [r0, #0]
 80074d2:	60c5      	str	r5, [r0, #12]
 80074d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80074d6:	68eb      	ldr	r3, [r5, #12]
 80074d8:	b183      	cbz	r3, 80074fc <_Balloc+0x42>
 80074da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80074e2:	b9b8      	cbnz	r0, 8007514 <_Balloc+0x5a>
 80074e4:	2101      	movs	r1, #1
 80074e6:	fa01 f506 	lsl.w	r5, r1, r6
 80074ea:	1d6a      	adds	r2, r5, #5
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	4620      	mov	r0, r4
 80074f0:	f000 fabf 	bl	8007a72 <_calloc_r>
 80074f4:	b160      	cbz	r0, 8007510 <_Balloc+0x56>
 80074f6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80074fa:	e00e      	b.n	800751a <_Balloc+0x60>
 80074fc:	2221      	movs	r2, #33	; 0x21
 80074fe:	2104      	movs	r1, #4
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fab6 	bl	8007a72 <_calloc_r>
 8007506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007508:	60e8      	str	r0, [r5, #12]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e4      	bne.n	80074da <_Balloc+0x20>
 8007510:	2000      	movs	r0, #0
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	6802      	ldr	r2, [r0, #0]
 8007516:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800751a:	2300      	movs	r3, #0
 800751c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007520:	e7f7      	b.n	8007512 <_Balloc+0x58>

08007522 <_Bfree>:
 8007522:	b570      	push	{r4, r5, r6, lr}
 8007524:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007526:	4606      	mov	r6, r0
 8007528:	460d      	mov	r5, r1
 800752a:	b93c      	cbnz	r4, 800753c <_Bfree+0x1a>
 800752c:	2010      	movs	r0, #16
 800752e:	f7ff ff91 	bl	8007454 <malloc>
 8007532:	6270      	str	r0, [r6, #36]	; 0x24
 8007534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007538:	6004      	str	r4, [r0, #0]
 800753a:	60c4      	str	r4, [r0, #12]
 800753c:	b13d      	cbz	r5, 800754e <_Bfree+0x2c>
 800753e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007540:	686a      	ldr	r2, [r5, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007548:	6029      	str	r1, [r5, #0]
 800754a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800754e:	bd70      	pop	{r4, r5, r6, pc}

08007550 <__multadd>:
 8007550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007554:	461f      	mov	r7, r3
 8007556:	4606      	mov	r6, r0
 8007558:	460c      	mov	r4, r1
 800755a:	2300      	movs	r3, #0
 800755c:	690d      	ldr	r5, [r1, #16]
 800755e:	f101 0c14 	add.w	ip, r1, #20
 8007562:	f8dc 0000 	ldr.w	r0, [ip]
 8007566:	3301      	adds	r3, #1
 8007568:	b281      	uxth	r1, r0
 800756a:	fb02 7101 	mla	r1, r2, r1, r7
 800756e:	0c00      	lsrs	r0, r0, #16
 8007570:	0c0f      	lsrs	r7, r1, #16
 8007572:	fb02 7000 	mla	r0, r2, r0, r7
 8007576:	b289      	uxth	r1, r1
 8007578:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800757c:	429d      	cmp	r5, r3
 800757e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007582:	f84c 1b04 	str.w	r1, [ip], #4
 8007586:	dcec      	bgt.n	8007562 <__multadd+0x12>
 8007588:	b1d7      	cbz	r7, 80075c0 <__multadd+0x70>
 800758a:	68a3      	ldr	r3, [r4, #8]
 800758c:	42ab      	cmp	r3, r5
 800758e:	dc12      	bgt.n	80075b6 <__multadd+0x66>
 8007590:	6861      	ldr	r1, [r4, #4]
 8007592:	4630      	mov	r0, r6
 8007594:	3101      	adds	r1, #1
 8007596:	f7ff ff90 	bl	80074ba <_Balloc>
 800759a:	4680      	mov	r8, r0
 800759c:	6922      	ldr	r2, [r4, #16]
 800759e:	f104 010c 	add.w	r1, r4, #12
 80075a2:	3202      	adds	r2, #2
 80075a4:	0092      	lsls	r2, r2, #2
 80075a6:	300c      	adds	r0, #12
 80075a8:	f7ff ff7c 	bl	80074a4 <memcpy>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7ff ffb7 	bl	8007522 <_Bfree>
 80075b4:	4644      	mov	r4, r8
 80075b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075ba:	3501      	adds	r5, #1
 80075bc:	615f      	str	r7, [r3, #20]
 80075be:	6125      	str	r5, [r4, #16]
 80075c0:	4620      	mov	r0, r4
 80075c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080075c6 <__hi0bits>:
 80075c6:	0c02      	lsrs	r2, r0, #16
 80075c8:	0412      	lsls	r2, r2, #16
 80075ca:	4603      	mov	r3, r0
 80075cc:	b9b2      	cbnz	r2, 80075fc <__hi0bits+0x36>
 80075ce:	0403      	lsls	r3, r0, #16
 80075d0:	2010      	movs	r0, #16
 80075d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80075d6:	bf04      	itt	eq
 80075d8:	021b      	lsleq	r3, r3, #8
 80075da:	3008      	addeq	r0, #8
 80075dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80075e0:	bf04      	itt	eq
 80075e2:	011b      	lsleq	r3, r3, #4
 80075e4:	3004      	addeq	r0, #4
 80075e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80075ea:	bf04      	itt	eq
 80075ec:	009b      	lsleq	r3, r3, #2
 80075ee:	3002      	addeq	r0, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db06      	blt.n	8007602 <__hi0bits+0x3c>
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	d503      	bpl.n	8007600 <__hi0bits+0x3a>
 80075f8:	3001      	adds	r0, #1
 80075fa:	4770      	bx	lr
 80075fc:	2000      	movs	r0, #0
 80075fe:	e7e8      	b.n	80075d2 <__hi0bits+0xc>
 8007600:	2020      	movs	r0, #32
 8007602:	4770      	bx	lr

08007604 <__lo0bits>:
 8007604:	6803      	ldr	r3, [r0, #0]
 8007606:	4601      	mov	r1, r0
 8007608:	f013 0207 	ands.w	r2, r3, #7
 800760c:	d00b      	beq.n	8007626 <__lo0bits+0x22>
 800760e:	07da      	lsls	r2, r3, #31
 8007610:	d423      	bmi.n	800765a <__lo0bits+0x56>
 8007612:	0798      	lsls	r0, r3, #30
 8007614:	bf49      	itett	mi
 8007616:	085b      	lsrmi	r3, r3, #1
 8007618:	089b      	lsrpl	r3, r3, #2
 800761a:	2001      	movmi	r0, #1
 800761c:	600b      	strmi	r3, [r1, #0]
 800761e:	bf5c      	itt	pl
 8007620:	600b      	strpl	r3, [r1, #0]
 8007622:	2002      	movpl	r0, #2
 8007624:	4770      	bx	lr
 8007626:	b298      	uxth	r0, r3
 8007628:	b9a8      	cbnz	r0, 8007656 <__lo0bits+0x52>
 800762a:	2010      	movs	r0, #16
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007632:	bf04      	itt	eq
 8007634:	0a1b      	lsreq	r3, r3, #8
 8007636:	3008      	addeq	r0, #8
 8007638:	071a      	lsls	r2, r3, #28
 800763a:	bf04      	itt	eq
 800763c:	091b      	lsreq	r3, r3, #4
 800763e:	3004      	addeq	r0, #4
 8007640:	079a      	lsls	r2, r3, #30
 8007642:	bf04      	itt	eq
 8007644:	089b      	lsreq	r3, r3, #2
 8007646:	3002      	addeq	r0, #2
 8007648:	07da      	lsls	r2, r3, #31
 800764a:	d402      	bmi.n	8007652 <__lo0bits+0x4e>
 800764c:	085b      	lsrs	r3, r3, #1
 800764e:	d006      	beq.n	800765e <__lo0bits+0x5a>
 8007650:	3001      	adds	r0, #1
 8007652:	600b      	str	r3, [r1, #0]
 8007654:	4770      	bx	lr
 8007656:	4610      	mov	r0, r2
 8007658:	e7e9      	b.n	800762e <__lo0bits+0x2a>
 800765a:	2000      	movs	r0, #0
 800765c:	4770      	bx	lr
 800765e:	2020      	movs	r0, #32
 8007660:	4770      	bx	lr

08007662 <__i2b>:
 8007662:	b510      	push	{r4, lr}
 8007664:	460c      	mov	r4, r1
 8007666:	2101      	movs	r1, #1
 8007668:	f7ff ff27 	bl	80074ba <_Balloc>
 800766c:	2201      	movs	r2, #1
 800766e:	6144      	str	r4, [r0, #20]
 8007670:	6102      	str	r2, [r0, #16]
 8007672:	bd10      	pop	{r4, pc}

08007674 <__multiply>:
 8007674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	4614      	mov	r4, r2
 800767a:	690a      	ldr	r2, [r1, #16]
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	4688      	mov	r8, r1
 8007680:	429a      	cmp	r2, r3
 8007682:	bfbe      	ittt	lt
 8007684:	460b      	movlt	r3, r1
 8007686:	46a0      	movlt	r8, r4
 8007688:	461c      	movlt	r4, r3
 800768a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800768e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007696:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800769a:	eb07 0609 	add.w	r6, r7, r9
 800769e:	42b3      	cmp	r3, r6
 80076a0:	bfb8      	it	lt
 80076a2:	3101      	addlt	r1, #1
 80076a4:	f7ff ff09 	bl	80074ba <_Balloc>
 80076a8:	f100 0514 	add.w	r5, r0, #20
 80076ac:	462b      	mov	r3, r5
 80076ae:	2200      	movs	r2, #0
 80076b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80076b4:	4573      	cmp	r3, lr
 80076b6:	d316      	bcc.n	80076e6 <__multiply+0x72>
 80076b8:	f104 0214 	add.w	r2, r4, #20
 80076bc:	f108 0114 	add.w	r1, r8, #20
 80076c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80076c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	9b00      	ldr	r3, [sp, #0]
 80076cc:	9201      	str	r2, [sp, #4]
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d80c      	bhi.n	80076ec <__multiply+0x78>
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	dd03      	ble.n	80076de <__multiply+0x6a>
 80076d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d05d      	beq.n	800779a <__multiply+0x126>
 80076de:	6106      	str	r6, [r0, #16]
 80076e0:	b003      	add	sp, #12
 80076e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e6:	f843 2b04 	str.w	r2, [r3], #4
 80076ea:	e7e3      	b.n	80076b4 <__multiply+0x40>
 80076ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80076f0:	f1bb 0f00 	cmp.w	fp, #0
 80076f4:	d023      	beq.n	800773e <__multiply+0xca>
 80076f6:	4689      	mov	r9, r1
 80076f8:	46ac      	mov	ip, r5
 80076fa:	f04f 0800 	mov.w	r8, #0
 80076fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8007702:	f8dc a000 	ldr.w	sl, [ip]
 8007706:	b2a3      	uxth	r3, r4
 8007708:	fa1f fa8a 	uxth.w	sl, sl
 800770c:	fb0b a303 	mla	r3, fp, r3, sl
 8007710:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007714:	f8dc 4000 	ldr.w	r4, [ip]
 8007718:	4443      	add	r3, r8
 800771a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800771e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007722:	46e2      	mov	sl, ip
 8007724:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007728:	b29b      	uxth	r3, r3
 800772a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800772e:	454f      	cmp	r7, r9
 8007730:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007734:	f84a 3b04 	str.w	r3, [sl], #4
 8007738:	d82b      	bhi.n	8007792 <__multiply+0x11e>
 800773a:	f8cc 8004 	str.w	r8, [ip, #4]
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	3204      	adds	r2, #4
 8007742:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007746:	f1ba 0f00 	cmp.w	sl, #0
 800774a:	d020      	beq.n	800778e <__multiply+0x11a>
 800774c:	4689      	mov	r9, r1
 800774e:	46a8      	mov	r8, r5
 8007750:	f04f 0b00 	mov.w	fp, #0
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	f8b9 c000 	ldrh.w	ip, [r9]
 800775a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800775e:	b29b      	uxth	r3, r3
 8007760:	fb0a 440c 	mla	r4, sl, ip, r4
 8007764:	46c4      	mov	ip, r8
 8007766:	445c      	add	r4, fp
 8007768:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800776c:	f84c 3b04 	str.w	r3, [ip], #4
 8007770:	f859 3b04 	ldr.w	r3, [r9], #4
 8007774:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007778:	0c1b      	lsrs	r3, r3, #16
 800777a:	fb0a b303 	mla	r3, sl, r3, fp
 800777e:	454f      	cmp	r7, r9
 8007780:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007784:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007788:	d805      	bhi.n	8007796 <__multiply+0x122>
 800778a:	f8c8 3004 	str.w	r3, [r8, #4]
 800778e:	3504      	adds	r5, #4
 8007790:	e79b      	b.n	80076ca <__multiply+0x56>
 8007792:	46d4      	mov	ip, sl
 8007794:	e7b3      	b.n	80076fe <__multiply+0x8a>
 8007796:	46e0      	mov	r8, ip
 8007798:	e7dd      	b.n	8007756 <__multiply+0xe2>
 800779a:	3e01      	subs	r6, #1
 800779c:	e799      	b.n	80076d2 <__multiply+0x5e>
	...

080077a0 <__pow5mult>:
 80077a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a4:	4615      	mov	r5, r2
 80077a6:	f012 0203 	ands.w	r2, r2, #3
 80077aa:	4606      	mov	r6, r0
 80077ac:	460f      	mov	r7, r1
 80077ae:	d007      	beq.n	80077c0 <__pow5mult+0x20>
 80077b0:	4c21      	ldr	r4, [pc, #132]	; (8007838 <__pow5mult+0x98>)
 80077b2:	3a01      	subs	r2, #1
 80077b4:	2300      	movs	r3, #0
 80077b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077ba:	f7ff fec9 	bl	8007550 <__multadd>
 80077be:	4607      	mov	r7, r0
 80077c0:	10ad      	asrs	r5, r5, #2
 80077c2:	d035      	beq.n	8007830 <__pow5mult+0x90>
 80077c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80077c6:	b93c      	cbnz	r4, 80077d8 <__pow5mult+0x38>
 80077c8:	2010      	movs	r0, #16
 80077ca:	f7ff fe43 	bl	8007454 <malloc>
 80077ce:	6270      	str	r0, [r6, #36]	; 0x24
 80077d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077d4:	6004      	str	r4, [r0, #0]
 80077d6:	60c4      	str	r4, [r0, #12]
 80077d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e0:	b94c      	cbnz	r4, 80077f6 <__pow5mult+0x56>
 80077e2:	f240 2171 	movw	r1, #625	; 0x271
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff3b 	bl	8007662 <__i2b>
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80077f4:	6003      	str	r3, [r0, #0]
 80077f6:	f04f 0800 	mov.w	r8, #0
 80077fa:	07eb      	lsls	r3, r5, #31
 80077fc:	d50a      	bpl.n	8007814 <__pow5mult+0x74>
 80077fe:	4639      	mov	r1, r7
 8007800:	4622      	mov	r2, r4
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff36 	bl	8007674 <__multiply>
 8007808:	4681      	mov	r9, r0
 800780a:	4639      	mov	r1, r7
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff fe88 	bl	8007522 <_Bfree>
 8007812:	464f      	mov	r7, r9
 8007814:	106d      	asrs	r5, r5, #1
 8007816:	d00b      	beq.n	8007830 <__pow5mult+0x90>
 8007818:	6820      	ldr	r0, [r4, #0]
 800781a:	b938      	cbnz	r0, 800782c <__pow5mult+0x8c>
 800781c:	4622      	mov	r2, r4
 800781e:	4621      	mov	r1, r4
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff ff27 	bl	8007674 <__multiply>
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	f8c0 8000 	str.w	r8, [r0]
 800782c:	4604      	mov	r4, r0
 800782e:	e7e4      	b.n	80077fa <__pow5mult+0x5a>
 8007830:	4638      	mov	r0, r7
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007836:	bf00      	nop
 8007838:	08009888 	.word	0x08009888

0800783c <__lshift>:
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	460c      	mov	r4, r1
 8007842:	4607      	mov	r7, r0
 8007844:	4616      	mov	r6, r2
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800784c:	eb0a 0903 	add.w	r9, sl, r3
 8007850:	6849      	ldr	r1, [r1, #4]
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	f109 0501 	add.w	r5, r9, #1
 8007858:	42ab      	cmp	r3, r5
 800785a:	db32      	blt.n	80078c2 <__lshift+0x86>
 800785c:	4638      	mov	r0, r7
 800785e:	f7ff fe2c 	bl	80074ba <_Balloc>
 8007862:	2300      	movs	r3, #0
 8007864:	4680      	mov	r8, r0
 8007866:	461a      	mov	r2, r3
 8007868:	f100 0114 	add.w	r1, r0, #20
 800786c:	4553      	cmp	r3, sl
 800786e:	db2b      	blt.n	80078c8 <__lshift+0x8c>
 8007870:	6920      	ldr	r0, [r4, #16]
 8007872:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007876:	f104 0314 	add.w	r3, r4, #20
 800787a:	f016 021f 	ands.w	r2, r6, #31
 800787e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007882:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007886:	d025      	beq.n	80078d4 <__lshift+0x98>
 8007888:	2000      	movs	r0, #0
 800788a:	f1c2 0e20 	rsb	lr, r2, #32
 800788e:	468a      	mov	sl, r1
 8007890:	681e      	ldr	r6, [r3, #0]
 8007892:	4096      	lsls	r6, r2
 8007894:	4330      	orrs	r0, r6
 8007896:	f84a 0b04 	str.w	r0, [sl], #4
 800789a:	f853 0b04 	ldr.w	r0, [r3], #4
 800789e:	459c      	cmp	ip, r3
 80078a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80078a4:	d814      	bhi.n	80078d0 <__lshift+0x94>
 80078a6:	6048      	str	r0, [r1, #4]
 80078a8:	b108      	cbz	r0, 80078ae <__lshift+0x72>
 80078aa:	f109 0502 	add.w	r5, r9, #2
 80078ae:	3d01      	subs	r5, #1
 80078b0:	4638      	mov	r0, r7
 80078b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80078b6:	4621      	mov	r1, r4
 80078b8:	f7ff fe33 	bl	8007522 <_Bfree>
 80078bc:	4640      	mov	r0, r8
 80078be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c2:	3101      	adds	r1, #1
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	e7c7      	b.n	8007858 <__lshift+0x1c>
 80078c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80078cc:	3301      	adds	r3, #1
 80078ce:	e7cd      	b.n	800786c <__lshift+0x30>
 80078d0:	4651      	mov	r1, sl
 80078d2:	e7dc      	b.n	800788e <__lshift+0x52>
 80078d4:	3904      	subs	r1, #4
 80078d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078da:	459c      	cmp	ip, r3
 80078dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80078e0:	d8f9      	bhi.n	80078d6 <__lshift+0x9a>
 80078e2:	e7e4      	b.n	80078ae <__lshift+0x72>

080078e4 <__mcmp>:
 80078e4:	6903      	ldr	r3, [r0, #16]
 80078e6:	690a      	ldr	r2, [r1, #16]
 80078e8:	b530      	push	{r4, r5, lr}
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	d10c      	bne.n	8007908 <__mcmp+0x24>
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	3014      	adds	r0, #20
 80078f2:	3114      	adds	r1, #20
 80078f4:	1884      	adds	r4, r0, r2
 80078f6:	4411      	add	r1, r2
 80078f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007900:	4295      	cmp	r5, r2
 8007902:	d003      	beq.n	800790c <__mcmp+0x28>
 8007904:	d305      	bcc.n	8007912 <__mcmp+0x2e>
 8007906:	2301      	movs	r3, #1
 8007908:	4618      	mov	r0, r3
 800790a:	bd30      	pop	{r4, r5, pc}
 800790c:	42a0      	cmp	r0, r4
 800790e:	d3f3      	bcc.n	80078f8 <__mcmp+0x14>
 8007910:	e7fa      	b.n	8007908 <__mcmp+0x24>
 8007912:	f04f 33ff 	mov.w	r3, #4294967295
 8007916:	e7f7      	b.n	8007908 <__mcmp+0x24>

08007918 <__mdiff>:
 8007918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	460d      	mov	r5, r1
 800791e:	4607      	mov	r7, r0
 8007920:	4611      	mov	r1, r2
 8007922:	4628      	mov	r0, r5
 8007924:	4614      	mov	r4, r2
 8007926:	f7ff ffdd 	bl	80078e4 <__mcmp>
 800792a:	1e06      	subs	r6, r0, #0
 800792c:	d108      	bne.n	8007940 <__mdiff+0x28>
 800792e:	4631      	mov	r1, r6
 8007930:	4638      	mov	r0, r7
 8007932:	f7ff fdc2 	bl	80074ba <_Balloc>
 8007936:	2301      	movs	r3, #1
 8007938:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	bfa4      	itt	ge
 8007942:	4623      	movge	r3, r4
 8007944:	462c      	movge	r4, r5
 8007946:	4638      	mov	r0, r7
 8007948:	6861      	ldr	r1, [r4, #4]
 800794a:	bfa6      	itte	ge
 800794c:	461d      	movge	r5, r3
 800794e:	2600      	movge	r6, #0
 8007950:	2601      	movlt	r6, #1
 8007952:	f7ff fdb2 	bl	80074ba <_Balloc>
 8007956:	f04f 0e00 	mov.w	lr, #0
 800795a:	60c6      	str	r6, [r0, #12]
 800795c:	692b      	ldr	r3, [r5, #16]
 800795e:	6926      	ldr	r6, [r4, #16]
 8007960:	f104 0214 	add.w	r2, r4, #20
 8007964:	f105 0914 	add.w	r9, r5, #20
 8007968:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800796c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007970:	f100 0114 	add.w	r1, r0, #20
 8007974:	f852 ab04 	ldr.w	sl, [r2], #4
 8007978:	f859 5b04 	ldr.w	r5, [r9], #4
 800797c:	fa1f f38a 	uxth.w	r3, sl
 8007980:	4473      	add	r3, lr
 8007982:	b2ac      	uxth	r4, r5
 8007984:	1b1b      	subs	r3, r3, r4
 8007986:	0c2c      	lsrs	r4, r5, #16
 8007988:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800798c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007990:	b29b      	uxth	r3, r3
 8007992:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007996:	45c8      	cmp	r8, r9
 8007998:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800799c:	4694      	mov	ip, r2
 800799e:	f841 4b04 	str.w	r4, [r1], #4
 80079a2:	d8e7      	bhi.n	8007974 <__mdiff+0x5c>
 80079a4:	45bc      	cmp	ip, r7
 80079a6:	d304      	bcc.n	80079b2 <__mdiff+0x9a>
 80079a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80079ac:	b183      	cbz	r3, 80079d0 <__mdiff+0xb8>
 80079ae:	6106      	str	r6, [r0, #16]
 80079b0:	e7c4      	b.n	800793c <__mdiff+0x24>
 80079b2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80079b6:	b2a2      	uxth	r2, r4
 80079b8:	4472      	add	r2, lr
 80079ba:	1413      	asrs	r3, r2, #16
 80079bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80079c0:	b292      	uxth	r2, r2
 80079c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079c6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80079ca:	f841 2b04 	str.w	r2, [r1], #4
 80079ce:	e7e9      	b.n	80079a4 <__mdiff+0x8c>
 80079d0:	3e01      	subs	r6, #1
 80079d2:	e7e9      	b.n	80079a8 <__mdiff+0x90>

080079d4 <__d2b>:
 80079d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80079d8:	461c      	mov	r4, r3
 80079da:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80079de:	2101      	movs	r1, #1
 80079e0:	4690      	mov	r8, r2
 80079e2:	f7ff fd6a 	bl	80074ba <_Balloc>
 80079e6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80079ea:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80079ee:	4607      	mov	r7, r0
 80079f0:	bb34      	cbnz	r4, 8007a40 <__d2b+0x6c>
 80079f2:	9201      	str	r2, [sp, #4]
 80079f4:	f1b8 0200 	subs.w	r2, r8, #0
 80079f8:	d027      	beq.n	8007a4a <__d2b+0x76>
 80079fa:	a802      	add	r0, sp, #8
 80079fc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007a00:	f7ff fe00 	bl	8007604 <__lo0bits>
 8007a04:	9900      	ldr	r1, [sp, #0]
 8007a06:	b1f0      	cbz	r0, 8007a46 <__d2b+0x72>
 8007a08:	9a01      	ldr	r2, [sp, #4]
 8007a0a:	f1c0 0320 	rsb	r3, r0, #32
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	430b      	orrs	r3, r1
 8007a14:	40c2      	lsrs	r2, r0
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	9201      	str	r2, [sp, #4]
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf14      	ite	ne
 8007a20:	2102      	movne	r1, #2
 8007a22:	2101      	moveq	r1, #1
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	6139      	str	r1, [r7, #16]
 8007a28:	b1c4      	cbz	r4, 8007a5c <__d2b+0x88>
 8007a2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a2e:	4404      	add	r4, r0
 8007a30:	6034      	str	r4, [r6, #0]
 8007a32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a36:	6028      	str	r0, [r5, #0]
 8007a38:	4638      	mov	r0, r7
 8007a3a:	b002      	add	sp, #8
 8007a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a44:	e7d5      	b.n	80079f2 <__d2b+0x1e>
 8007a46:	6179      	str	r1, [r7, #20]
 8007a48:	e7e7      	b.n	8007a1a <__d2b+0x46>
 8007a4a:	a801      	add	r0, sp, #4
 8007a4c:	f7ff fdda 	bl	8007604 <__lo0bits>
 8007a50:	2101      	movs	r1, #1
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	6139      	str	r1, [r7, #16]
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	3020      	adds	r0, #32
 8007a5a:	e7e5      	b.n	8007a28 <__d2b+0x54>
 8007a5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a60:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	6918      	ldr	r0, [r3, #16]
 8007a68:	f7ff fdad 	bl	80075c6 <__hi0bits>
 8007a6c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a70:	e7e1      	b.n	8007a36 <__d2b+0x62>

08007a72 <_calloc_r>:
 8007a72:	b538      	push	{r3, r4, r5, lr}
 8007a74:	fb02 f401 	mul.w	r4, r2, r1
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f000 f855 	bl	8007b28 <_malloc_r>
 8007a7e:	4605      	mov	r5, r0
 8007a80:	b118      	cbz	r0, 8007a8a <_calloc_r+0x18>
 8007a82:	4622      	mov	r2, r4
 8007a84:	2100      	movs	r1, #0
 8007a86:	f7fe f977 	bl	8005d78 <memset>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a90 <_free_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4605      	mov	r5, r0
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d043      	beq.n	8007b20 <_free_r+0x90>
 8007a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9c:	1f0c      	subs	r4, r1, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfb8      	it	lt
 8007aa2:	18e4      	addlt	r4, r4, r3
 8007aa4:	f000 fa22 	bl	8007eec <__malloc_lock>
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <_free_r+0x94>)
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	4610      	mov	r0, r2
 8007aae:	b933      	cbnz	r3, 8007abe <_free_r+0x2e>
 8007ab0:	6063      	str	r3, [r4, #4]
 8007ab2:	6014      	str	r4, [r2, #0]
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aba:	f000 ba18 	b.w	8007eee <__malloc_unlock>
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	d90b      	bls.n	8007ada <_free_r+0x4a>
 8007ac2:	6821      	ldr	r1, [r4, #0]
 8007ac4:	1862      	adds	r2, r4, r1
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	bf01      	itttt	eq
 8007aca:	681a      	ldreq	r2, [r3, #0]
 8007acc:	685b      	ldreq	r3, [r3, #4]
 8007ace:	1852      	addeq	r2, r2, r1
 8007ad0:	6022      	streq	r2, [r4, #0]
 8007ad2:	6063      	str	r3, [r4, #4]
 8007ad4:	6004      	str	r4, [r0, #0]
 8007ad6:	e7ed      	b.n	8007ab4 <_free_r+0x24>
 8007ad8:	4613      	mov	r3, r2
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	b10a      	cbz	r2, 8007ae2 <_free_r+0x52>
 8007ade:	42a2      	cmp	r2, r4
 8007ae0:	d9fa      	bls.n	8007ad8 <_free_r+0x48>
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	1858      	adds	r0, r3, r1
 8007ae6:	42a0      	cmp	r0, r4
 8007ae8:	d10b      	bne.n	8007b02 <_free_r+0x72>
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	4401      	add	r1, r0
 8007aee:	1858      	adds	r0, r3, r1
 8007af0:	4282      	cmp	r2, r0
 8007af2:	6019      	str	r1, [r3, #0]
 8007af4:	d1de      	bne.n	8007ab4 <_free_r+0x24>
 8007af6:	6810      	ldr	r0, [r2, #0]
 8007af8:	6852      	ldr	r2, [r2, #4]
 8007afa:	4401      	add	r1, r0
 8007afc:	6019      	str	r1, [r3, #0]
 8007afe:	605a      	str	r2, [r3, #4]
 8007b00:	e7d8      	b.n	8007ab4 <_free_r+0x24>
 8007b02:	d902      	bls.n	8007b0a <_free_r+0x7a>
 8007b04:	230c      	movs	r3, #12
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	e7d4      	b.n	8007ab4 <_free_r+0x24>
 8007b0a:	6820      	ldr	r0, [r4, #0]
 8007b0c:	1821      	adds	r1, r4, r0
 8007b0e:	428a      	cmp	r2, r1
 8007b10:	bf01      	itttt	eq
 8007b12:	6811      	ldreq	r1, [r2, #0]
 8007b14:	6852      	ldreq	r2, [r2, #4]
 8007b16:	1809      	addeq	r1, r1, r0
 8007b18:	6021      	streq	r1, [r4, #0]
 8007b1a:	6062      	str	r2, [r4, #4]
 8007b1c:	605c      	str	r4, [r3, #4]
 8007b1e:	e7c9      	b.n	8007ab4 <_free_r+0x24>
 8007b20:	bd38      	pop	{r3, r4, r5, pc}
 8007b22:	bf00      	nop
 8007b24:	20000300 	.word	0x20000300

08007b28 <_malloc_r>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	1ccd      	adds	r5, r1, #3
 8007b2c:	f025 0503 	bic.w	r5, r5, #3
 8007b30:	3508      	adds	r5, #8
 8007b32:	2d0c      	cmp	r5, #12
 8007b34:	bf38      	it	cc
 8007b36:	250c      	movcc	r5, #12
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	db01      	blt.n	8007b42 <_malloc_r+0x1a>
 8007b3e:	42a9      	cmp	r1, r5
 8007b40:	d903      	bls.n	8007b4a <_malloc_r+0x22>
 8007b42:	230c      	movs	r3, #12
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	2000      	movs	r0, #0
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	f000 f9cf 	bl	8007eec <__malloc_lock>
 8007b4e:	4a21      	ldr	r2, [pc, #132]	; (8007bd4 <_malloc_r+0xac>)
 8007b50:	6814      	ldr	r4, [r2, #0]
 8007b52:	4621      	mov	r1, r4
 8007b54:	b991      	cbnz	r1, 8007b7c <_malloc_r+0x54>
 8007b56:	4c20      	ldr	r4, [pc, #128]	; (8007bd8 <_malloc_r+0xb0>)
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	b91b      	cbnz	r3, 8007b64 <_malloc_r+0x3c>
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f98f 	bl	8007e80 <_sbrk_r>
 8007b62:	6020      	str	r0, [r4, #0]
 8007b64:	4629      	mov	r1, r5
 8007b66:	4630      	mov	r0, r6
 8007b68:	f000 f98a 	bl	8007e80 <_sbrk_r>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d124      	bne.n	8007bba <_malloc_r+0x92>
 8007b70:	230c      	movs	r3, #12
 8007b72:	4630      	mov	r0, r6
 8007b74:	6033      	str	r3, [r6, #0]
 8007b76:	f000 f9ba 	bl	8007eee <__malloc_unlock>
 8007b7a:	e7e4      	b.n	8007b46 <_malloc_r+0x1e>
 8007b7c:	680b      	ldr	r3, [r1, #0]
 8007b7e:	1b5b      	subs	r3, r3, r5
 8007b80:	d418      	bmi.n	8007bb4 <_malloc_r+0x8c>
 8007b82:	2b0b      	cmp	r3, #11
 8007b84:	d90f      	bls.n	8007ba6 <_malloc_r+0x7e>
 8007b86:	600b      	str	r3, [r1, #0]
 8007b88:	18cc      	adds	r4, r1, r3
 8007b8a:	50cd      	str	r5, [r1, r3]
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f000 f9ae 	bl	8007eee <__malloc_unlock>
 8007b92:	f104 000b 	add.w	r0, r4, #11
 8007b96:	1d23      	adds	r3, r4, #4
 8007b98:	f020 0007 	bic.w	r0, r0, #7
 8007b9c:	1ac3      	subs	r3, r0, r3
 8007b9e:	d0d3      	beq.n	8007b48 <_malloc_r+0x20>
 8007ba0:	425a      	negs	r2, r3
 8007ba2:	50e2      	str	r2, [r4, r3]
 8007ba4:	e7d0      	b.n	8007b48 <_malloc_r+0x20>
 8007ba6:	684b      	ldr	r3, [r1, #4]
 8007ba8:	428c      	cmp	r4, r1
 8007baa:	bf16      	itet	ne
 8007bac:	6063      	strne	r3, [r4, #4]
 8007bae:	6013      	streq	r3, [r2, #0]
 8007bb0:	460c      	movne	r4, r1
 8007bb2:	e7eb      	b.n	8007b8c <_malloc_r+0x64>
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	6849      	ldr	r1, [r1, #4]
 8007bb8:	e7cc      	b.n	8007b54 <_malloc_r+0x2c>
 8007bba:	1cc4      	adds	r4, r0, #3
 8007bbc:	f024 0403 	bic.w	r4, r4, #3
 8007bc0:	42a0      	cmp	r0, r4
 8007bc2:	d005      	beq.n	8007bd0 <_malloc_r+0xa8>
 8007bc4:	1a21      	subs	r1, r4, r0
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f000 f95a 	bl	8007e80 <_sbrk_r>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d0cf      	beq.n	8007b70 <_malloc_r+0x48>
 8007bd0:	6025      	str	r5, [r4, #0]
 8007bd2:	e7db      	b.n	8007b8c <_malloc_r+0x64>
 8007bd4:	20000300 	.word	0x20000300
 8007bd8:	20000304 	.word	0x20000304

08007bdc <__ssputs_r>:
 8007bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	688e      	ldr	r6, [r1, #8]
 8007be2:	4682      	mov	sl, r0
 8007be4:	429e      	cmp	r6, r3
 8007be6:	460c      	mov	r4, r1
 8007be8:	4690      	mov	r8, r2
 8007bea:	4699      	mov	r9, r3
 8007bec:	d837      	bhi.n	8007c5e <__ssputs_r+0x82>
 8007bee:	898a      	ldrh	r2, [r1, #12]
 8007bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bf4:	d031      	beq.n	8007c5a <__ssputs_r+0x7e>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	6825      	ldr	r5, [r4, #0]
 8007bfa:	6909      	ldr	r1, [r1, #16]
 8007bfc:	1a6f      	subs	r7, r5, r1
 8007bfe:	6965      	ldr	r5, [r4, #20]
 8007c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c04:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c08:	f109 0301 	add.w	r3, r9, #1
 8007c0c:	443b      	add	r3, r7
 8007c0e:	429d      	cmp	r5, r3
 8007c10:	bf38      	it	cc
 8007c12:	461d      	movcc	r5, r3
 8007c14:	0553      	lsls	r3, r2, #21
 8007c16:	d530      	bpl.n	8007c7a <__ssputs_r+0x9e>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7ff ff85 	bl	8007b28 <_malloc_r>
 8007c1e:	4606      	mov	r6, r0
 8007c20:	b950      	cbnz	r0, 8007c38 <__ssputs_r+0x5c>
 8007c22:	230c      	movs	r3, #12
 8007c24:	f04f 30ff 	mov.w	r0, #4294967295
 8007c28:	f8ca 3000 	str.w	r3, [sl]
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c38:	463a      	mov	r2, r7
 8007c3a:	6921      	ldr	r1, [r4, #16]
 8007c3c:	f7ff fc32 	bl	80074a4 <memcpy>
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	6126      	str	r6, [r4, #16]
 8007c4e:	443e      	add	r6, r7
 8007c50:	6026      	str	r6, [r4, #0]
 8007c52:	464e      	mov	r6, r9
 8007c54:	6165      	str	r5, [r4, #20]
 8007c56:	1bed      	subs	r5, r5, r7
 8007c58:	60a5      	str	r5, [r4, #8]
 8007c5a:	454e      	cmp	r6, r9
 8007c5c:	d900      	bls.n	8007c60 <__ssputs_r+0x84>
 8007c5e:	464e      	mov	r6, r9
 8007c60:	4632      	mov	r2, r6
 8007c62:	4641      	mov	r1, r8
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	f000 f928 	bl	8007eba <memmove>
 8007c6a:	68a3      	ldr	r3, [r4, #8]
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	1b9b      	subs	r3, r3, r6
 8007c70:	60a3      	str	r3, [r4, #8]
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	441e      	add	r6, r3
 8007c76:	6026      	str	r6, [r4, #0]
 8007c78:	e7dc      	b.n	8007c34 <__ssputs_r+0x58>
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	f000 f938 	bl	8007ef0 <_realloc_r>
 8007c80:	4606      	mov	r6, r0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d1e2      	bne.n	8007c4c <__ssputs_r+0x70>
 8007c86:	6921      	ldr	r1, [r4, #16]
 8007c88:	4650      	mov	r0, sl
 8007c8a:	f7ff ff01 	bl	8007a90 <_free_r>
 8007c8e:	e7c8      	b.n	8007c22 <__ssputs_r+0x46>

08007c90 <_svfiprintf_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	461d      	mov	r5, r3
 8007c96:	898b      	ldrh	r3, [r1, #12]
 8007c98:	b09d      	sub	sp, #116	; 0x74
 8007c9a:	061f      	lsls	r7, r3, #24
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	d50f      	bpl.n	8007cc4 <_svfiprintf_r+0x34>
 8007ca4:	690b      	ldr	r3, [r1, #16]
 8007ca6:	b96b      	cbnz	r3, 8007cc4 <_svfiprintf_r+0x34>
 8007ca8:	2140      	movs	r1, #64	; 0x40
 8007caa:	f7ff ff3d 	bl	8007b28 <_malloc_r>
 8007cae:	6020      	str	r0, [r4, #0]
 8007cb0:	6120      	str	r0, [r4, #16]
 8007cb2:	b928      	cbnz	r0, 8007cc0 <_svfiprintf_r+0x30>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	f8c8 3000 	str.w	r3, [r8]
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbe:	e0c8      	b.n	8007e52 <_svfiprintf_r+0x1c2>
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	6163      	str	r3, [r4, #20]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	2320      	movs	r3, #32
 8007cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cce:	2330      	movs	r3, #48	; 0x30
 8007cd0:	f04f 0b01 	mov.w	fp, #1
 8007cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cd8:	9503      	str	r5, [sp, #12]
 8007cda:	4637      	mov	r7, r6
 8007cdc:	463d      	mov	r5, r7
 8007cde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ce2:	b10b      	cbz	r3, 8007ce8 <_svfiprintf_r+0x58>
 8007ce4:	2b25      	cmp	r3, #37	; 0x25
 8007ce6:	d13e      	bne.n	8007d66 <_svfiprintf_r+0xd6>
 8007ce8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007cec:	d00b      	beq.n	8007d06 <_svfiprintf_r+0x76>
 8007cee:	4653      	mov	r3, sl
 8007cf0:	4632      	mov	r2, r6
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	f7ff ff71 	bl	8007bdc <__ssputs_r>
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	f000 80a4 	beq.w	8007e48 <_svfiprintf_r+0x1b8>
 8007d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d02:	4453      	add	r3, sl
 8007d04:	9309      	str	r3, [sp, #36]	; 0x24
 8007d06:	783b      	ldrb	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 809d 	beq.w	8007e48 <_svfiprintf_r+0x1b8>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295
 8007d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	9307      	str	r3, [sp, #28]
 8007d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d20:	931a      	str	r3, [sp, #104]	; 0x68
 8007d22:	462f      	mov	r7, r5
 8007d24:	2205      	movs	r2, #5
 8007d26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d2a:	4850      	ldr	r0, [pc, #320]	; (8007e6c <_svfiprintf_r+0x1dc>)
 8007d2c:	f7ff fbac 	bl	8007488 <memchr>
 8007d30:	9b04      	ldr	r3, [sp, #16]
 8007d32:	b9d0      	cbnz	r0, 8007d6a <_svfiprintf_r+0xda>
 8007d34:	06d9      	lsls	r1, r3, #27
 8007d36:	bf44      	itt	mi
 8007d38:	2220      	movmi	r2, #32
 8007d3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d3e:	071a      	lsls	r2, r3, #28
 8007d40:	bf44      	itt	mi
 8007d42:	222b      	movmi	r2, #43	; 0x2b
 8007d44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d48:	782a      	ldrb	r2, [r5, #0]
 8007d4a:	2a2a      	cmp	r2, #42	; 0x2a
 8007d4c:	d015      	beq.n	8007d7a <_svfiprintf_r+0xea>
 8007d4e:	462f      	mov	r7, r5
 8007d50:	2000      	movs	r0, #0
 8007d52:	250a      	movs	r5, #10
 8007d54:	9a07      	ldr	r2, [sp, #28]
 8007d56:	4639      	mov	r1, r7
 8007d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d5c:	3b30      	subs	r3, #48	; 0x30
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	d94d      	bls.n	8007dfe <_svfiprintf_r+0x16e>
 8007d62:	b1b8      	cbz	r0, 8007d94 <_svfiprintf_r+0x104>
 8007d64:	e00f      	b.n	8007d86 <_svfiprintf_r+0xf6>
 8007d66:	462f      	mov	r7, r5
 8007d68:	e7b8      	b.n	8007cdc <_svfiprintf_r+0x4c>
 8007d6a:	4a40      	ldr	r2, [pc, #256]	; (8007e6c <_svfiprintf_r+0x1dc>)
 8007d6c:	463d      	mov	r5, r7
 8007d6e:	1a80      	subs	r0, r0, r2
 8007d70:	fa0b f000 	lsl.w	r0, fp, r0
 8007d74:	4318      	orrs	r0, r3
 8007d76:	9004      	str	r0, [sp, #16]
 8007d78:	e7d3      	b.n	8007d22 <_svfiprintf_r+0x92>
 8007d7a:	9a03      	ldr	r2, [sp, #12]
 8007d7c:	1d11      	adds	r1, r2, #4
 8007d7e:	6812      	ldr	r2, [r2, #0]
 8007d80:	9103      	str	r1, [sp, #12]
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	db01      	blt.n	8007d8a <_svfiprintf_r+0xfa>
 8007d86:	9207      	str	r2, [sp, #28]
 8007d88:	e004      	b.n	8007d94 <_svfiprintf_r+0x104>
 8007d8a:	4252      	negs	r2, r2
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	9207      	str	r2, [sp, #28]
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	783b      	ldrb	r3, [r7, #0]
 8007d96:	2b2e      	cmp	r3, #46	; 0x2e
 8007d98:	d10c      	bne.n	8007db4 <_svfiprintf_r+0x124>
 8007d9a:	787b      	ldrb	r3, [r7, #1]
 8007d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9e:	d133      	bne.n	8007e08 <_svfiprintf_r+0x178>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	3702      	adds	r7, #2
 8007da4:	1d1a      	adds	r2, r3, #4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	9203      	str	r2, [sp, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	bfb8      	it	lt
 8007dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8007db2:	9305      	str	r3, [sp, #20]
 8007db4:	4d2e      	ldr	r5, [pc, #184]	; (8007e70 <_svfiprintf_r+0x1e0>)
 8007db6:	2203      	movs	r2, #3
 8007db8:	7839      	ldrb	r1, [r7, #0]
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f7ff fb64 	bl	8007488 <memchr>
 8007dc0:	b138      	cbz	r0, 8007dd2 <_svfiprintf_r+0x142>
 8007dc2:	2340      	movs	r3, #64	; 0x40
 8007dc4:	1b40      	subs	r0, r0, r5
 8007dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	3701      	adds	r7, #1
 8007dce:	4303      	orrs	r3, r0
 8007dd0:	9304      	str	r3, [sp, #16]
 8007dd2:	7839      	ldrb	r1, [r7, #0]
 8007dd4:	2206      	movs	r2, #6
 8007dd6:	4827      	ldr	r0, [pc, #156]	; (8007e74 <_svfiprintf_r+0x1e4>)
 8007dd8:	1c7e      	adds	r6, r7, #1
 8007dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dde:	f7ff fb53 	bl	8007488 <memchr>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d038      	beq.n	8007e58 <_svfiprintf_r+0x1c8>
 8007de6:	4b24      	ldr	r3, [pc, #144]	; (8007e78 <_svfiprintf_r+0x1e8>)
 8007de8:	bb13      	cbnz	r3, 8007e30 <_svfiprintf_r+0x1a0>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	f023 0307 	bic.w	r3, r3, #7
 8007df2:	3308      	adds	r3, #8
 8007df4:	9303      	str	r3, [sp, #12]
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	444b      	add	r3, r9
 8007dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfc:	e76d      	b.n	8007cda <_svfiprintf_r+0x4a>
 8007dfe:	fb05 3202 	mla	r2, r5, r2, r3
 8007e02:	2001      	movs	r0, #1
 8007e04:	460f      	mov	r7, r1
 8007e06:	e7a6      	b.n	8007d56 <_svfiprintf_r+0xc6>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	250a      	movs	r5, #10
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	3701      	adds	r7, #1
 8007e10:	9305      	str	r3, [sp, #20]
 8007e12:	4638      	mov	r0, r7
 8007e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e18:	3a30      	subs	r2, #48	; 0x30
 8007e1a:	2a09      	cmp	r2, #9
 8007e1c:	d903      	bls.n	8007e26 <_svfiprintf_r+0x196>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0c8      	beq.n	8007db4 <_svfiprintf_r+0x124>
 8007e22:	9105      	str	r1, [sp, #20]
 8007e24:	e7c6      	b.n	8007db4 <_svfiprintf_r+0x124>
 8007e26:	fb05 2101 	mla	r1, r5, r1, r2
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	e7f0      	b.n	8007e12 <_svfiprintf_r+0x182>
 8007e30:	ab03      	add	r3, sp, #12
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4622      	mov	r2, r4
 8007e36:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <_svfiprintf_r+0x1ec>)
 8007e38:	a904      	add	r1, sp, #16
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	f7fe f836 	bl	8005eac <_printf_float>
 8007e40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e44:	4681      	mov	r9, r0
 8007e46:	d1d6      	bne.n	8007df6 <_svfiprintf_r+0x166>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	065b      	lsls	r3, r3, #25
 8007e4c:	f53f af35 	bmi.w	8007cba <_svfiprintf_r+0x2a>
 8007e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e52:	b01d      	add	sp, #116	; 0x74
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <_svfiprintf_r+0x1ec>)
 8007e60:	a904      	add	r1, sp, #16
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7fe face 	bl	8006404 <_printf_i>
 8007e68:	e7ea      	b.n	8007e40 <_svfiprintf_r+0x1b0>
 8007e6a:	bf00      	nop
 8007e6c:	08009894 	.word	0x08009894
 8007e70:	0800989a 	.word	0x0800989a
 8007e74:	0800989e 	.word	0x0800989e
 8007e78:	08005ead 	.word	0x08005ead
 8007e7c:	08007bdd 	.word	0x08007bdd

08007e80 <_sbrk_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	2300      	movs	r3, #0
 8007e84:	4c05      	ldr	r4, [pc, #20]	; (8007e9c <_sbrk_r+0x1c>)
 8007e86:	4605      	mov	r5, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	6023      	str	r3, [r4, #0]
 8007e8c:	f7fb f874 	bl	8002f78 <_sbrk>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_sbrk_r+0x1a>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_sbrk_r+0x1a>
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	200007a8 	.word	0x200007a8

08007ea0 <__ascii_wctomb>:
 8007ea0:	b149      	cbz	r1, 8007eb6 <__ascii_wctomb+0x16>
 8007ea2:	2aff      	cmp	r2, #255	; 0xff
 8007ea4:	bf8b      	itete	hi
 8007ea6:	238a      	movhi	r3, #138	; 0x8a
 8007ea8:	700a      	strbls	r2, [r1, #0]
 8007eaa:	6003      	strhi	r3, [r0, #0]
 8007eac:	2001      	movls	r0, #1
 8007eae:	bf88      	it	hi
 8007eb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007eb4:	4770      	bx	lr
 8007eb6:	4608      	mov	r0, r1
 8007eb8:	4770      	bx	lr

08007eba <memmove>:
 8007eba:	4288      	cmp	r0, r1
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	eb01 0302 	add.w	r3, r1, r2
 8007ec2:	d807      	bhi.n	8007ed4 <memmove+0x1a>
 8007ec4:	1e42      	subs	r2, r0, #1
 8007ec6:	4299      	cmp	r1, r3
 8007ec8:	d00a      	beq.n	8007ee0 <memmove+0x26>
 8007eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ece:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ed2:	e7f8      	b.n	8007ec6 <memmove+0xc>
 8007ed4:	4283      	cmp	r3, r0
 8007ed6:	d9f5      	bls.n	8007ec4 <memmove+0xa>
 8007ed8:	1881      	adds	r1, r0, r2
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	42d3      	cmn	r3, r2
 8007ede:	d100      	bne.n	8007ee2 <memmove+0x28>
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ee6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007eea:	e7f7      	b.n	8007edc <memmove+0x22>

08007eec <__malloc_lock>:
 8007eec:	4770      	bx	lr

08007eee <__malloc_unlock>:
 8007eee:	4770      	bx	lr

08007ef0 <_realloc_r>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	460e      	mov	r6, r1
 8007ef8:	b921      	cbnz	r1, 8007f04 <_realloc_r+0x14>
 8007efa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007efe:	4611      	mov	r1, r2
 8007f00:	f7ff be12 	b.w	8007b28 <_malloc_r>
 8007f04:	b922      	cbnz	r2, 8007f10 <_realloc_r+0x20>
 8007f06:	f7ff fdc3 	bl	8007a90 <_free_r>
 8007f0a:	4625      	mov	r5, r4
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f10:	f000 f814 	bl	8007f3c <_malloc_usable_size_r>
 8007f14:	42a0      	cmp	r0, r4
 8007f16:	d20f      	bcs.n	8007f38 <_realloc_r+0x48>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f7ff fe04 	bl	8007b28 <_malloc_r>
 8007f20:	4605      	mov	r5, r0
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d0f2      	beq.n	8007f0c <_realloc_r+0x1c>
 8007f26:	4631      	mov	r1, r6
 8007f28:	4622      	mov	r2, r4
 8007f2a:	f7ff fabb 	bl	80074a4 <memcpy>
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff fdad 	bl	8007a90 <_free_r>
 8007f36:	e7e9      	b.n	8007f0c <_realloc_r+0x1c>
 8007f38:	4635      	mov	r5, r6
 8007f3a:	e7e7      	b.n	8007f0c <_realloc_r+0x1c>

08007f3c <_malloc_usable_size_r>:
 8007f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f40:	1f18      	subs	r0, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bfbc      	itt	lt
 8007f46:	580b      	ldrlt	r3, [r1, r0]
 8007f48:	18c0      	addlt	r0, r0, r3
 8007f4a:	4770      	bx	lr

08007f4c <_init>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr

08007f58 <_fini>:
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	bf00      	nop
 8007f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5e:	bc08      	pop	{r3}
 8007f60:	469e      	mov	lr, r3
 8007f62:	4770      	bx	lr
